<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>道场 – 入门指南</title>
    <link>/docs/</link>
    <description>Recent content in 入门指南 on 道场</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Where to find the docs and how to contribute</title>
      <link>/docs/contributing/docs/some-background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/docs/some-background/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-to-modify-this-website&#34;&gt;How to modify this website&lt;/h2&gt;
&lt;p&gt;The main landing page of this website can be modified in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Almost all of the content lives in the &lt;code&gt;content/en/docs&lt;/code&gt; directory. Here are some special cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./content/en/blog&lt;/code&gt; contains all blog posts - make sure you update the front-matter for posts to show up correctly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./external-sources/&lt;/code&gt; defines how files from other repositories are pulled in. We currently do this for Markdown files from the &lt;code&gt;/fluxcd/community&lt;/code&gt; and &lt;code&gt;/fluxcd/.github&lt;/code&gt; repositories. (&lt;code&gt;make gen-content&lt;/code&gt; pulls these in.)&lt;/li&gt;
&lt;li&gt;Flux CLI docs (&lt;code&gt;cmd&lt;/code&gt;) and &lt;code&gt;components&lt;/code&gt; docs: under &lt;code&gt;./content/en/docs&lt;/code&gt; but pulled in through in &lt;code&gt;make gen-content&lt;/code&gt; as well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/static/_redirects&lt;/code&gt; defines redirects on &lt;a href=&#34;https://fluxcd.io&#34;&gt;https://fluxcd.io&lt;/a&gt;. Check out &lt;a href=&#34;https://docs.netlify.com/routing/redirects/&#34;&gt;https://docs.netlify.com/routing/redirects/&lt;/a&gt; for the syntax definition and how to test if things work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running-the-site-locally&#34;&gt;Running the site locally&lt;/h2&gt;
&lt;p&gt;In order to run the Flux site locally, you need to install:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.npmjs.com/get-npm&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The 
&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; static site generator. Make sure to 
&lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34; target=&#34;_blank&#34;&gt;install&lt;/a&gt; the &amp;ldquo;extended&amp;rdquo; variant of Hugo with support for the 
&lt;a href=&#34;https://gohugo.io/hugo-pipes/introduction/&#34; target=&#34;_blank&#34;&gt;Hugo Pipes&lt;/a&gt; feature and to check the 
&lt;a href=&#34;./netlify.toml&#34;&gt;&lt;code&gt;netlify.toml&lt;/code&gt;&lt;/a&gt; configuration file for which version of Hugo you should install.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once those tools are installed, fetch the assets necessary to run the site:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cli&#34; data-lang=&#34;cli&#34;&gt;npm install
make theme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run the site in &amp;ldquo;server&amp;rdquo; mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cli&#34; data-lang=&#34;cli&#34;&gt;make serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; to see the site running in your browser. As you make updates to the site, the browser will immediately update to reflect those changes.&lt;/p&gt;
&lt;h2 id=&#34;publishing-the-site&#34;&gt;Publishing the site&lt;/h2&gt;
&lt;p&gt;The Flux website is published automatically by 
&lt;a href=&#34;https://netlify.com&#34; target=&#34;_blank&#34;&gt;Netlify&lt;/a&gt; when changes are pushed to the &lt;code&gt;main&lt;/code&gt; branch. The site does not need to be published manually.&lt;/p&gt;
&lt;h3 id=&#34;preview-builds&#34;&gt;Preview builds&lt;/h3&gt;
&lt;p&gt;When you submit a pull request to this repository, Netlify builds a &amp;ldquo;deploy preview&amp;rdquo; of your changes. You can see that preview by clicking on the &lt;strong&gt;deploy/netlify&lt;/strong&gt; link in the pull request window.&lt;/p&gt;
&lt;h3 id=&#34;local-development-docker&#34;&gt;Local Development (docker)&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;make docker-preview&lt;/code&gt; and wait until the following output appears:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cli&#34; data-lang=&#34;cli&#34;&gt;Environment: &amp;quot;development&amp;quot;
Serving pages from memory
Web Server is available at //localhost:1313/ (bind address 0.0.0.0)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Visit 
&lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;http://localhost:1313&lt;/a&gt;, where any changes will be visible from inside of the running container. Markdown files updated in &lt;code&gt;content/&lt;/code&gt; should trigger a browser refresh as they are saved.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;docker-preview&lt;/code&gt; target builds the theme, which takes a while and doesn&amp;rsquo;t need to be repeated unless you are making changes to the theme. On subsequent runs, running &lt;code&gt;make docker-serve&lt;/code&gt; instead will skip building the theme.&lt;/p&gt;
&lt;p&gt;This depends on the Docker image &lt;code&gt;fluxcd/website:hugo-support&lt;/code&gt; which should be kept updated when the website&amp;rsquo;s build-time dependencies have changed; this image contains everything needed to run the docs locally.&lt;/p&gt;
&lt;p&gt;If this doesn&amp;rsquo;t work, the image may be stale. The instructions to update it are below.&lt;/p&gt;
&lt;h3 id=&#34;remote-development-kubernetes--okteto-cli&#34;&gt;Remote Development (kubernetes / okteto CLI)&lt;/h3&gt;
&lt;p&gt;This works the same as local development above, but with the Okteto CLI you do not need to run a Linux machine or virtual machine on your local development environment.&lt;/p&gt;
&lt;p&gt;First, make sure you are permitted to deploy pods on any local or remote Kubernetes cluster. Download the 
&lt;a href=&#34;https://okteto.com/docs/getting-started/installation/index.html&#34; target=&#34;_blank&#34;&gt;Okteto CLI&lt;/a&gt; for Windows, Mac, or Linux.&lt;/p&gt;
&lt;p&gt;Okteto CLI is a light-weight client-side tool that replaces Docker with a remote cluster. You can run &lt;code&gt;hugo server&lt;/code&gt; remotely in this way; any changes to the local clone are synchronized to the cluster. The experience is basically the same as local development, (except that you won&amp;rsquo;t need to install Docker.)&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;make docker-serve&lt;/code&gt;, type &lt;code&gt;okteto up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can change the behavior in &lt;code&gt;okteto.yml&lt;/code&gt; according to the 
&lt;a href=&#34;https://okteto.com/docs/reference/manifest/index.html&#34; target=&#34;_blank&#34;&gt;Okteto Manifest Reference&lt;/a&gt;, for example adding a persistent volume can speed up the synchronization of the working directory files to the remote pod on repeated runs.&lt;/p&gt;
&lt;h3 id=&#34;updating-the-developmentpreview-container-image&#34;&gt;Updating the Development/preview container image&lt;/h3&gt;
&lt;p&gt;(For maintainers) Using a machine with &lt;code&gt;docker&lt;/code&gt; and logged in with an account that has permission to push to &lt;code&gt;docker.io/fluxcd/website&lt;/code&gt; repo, run &lt;code&gt;make docker-push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The dependencies of &lt;code&gt;docker-push&lt;/code&gt; are explained below. If the above worked then you are done, and should not need to read any further. Rebuilding &lt;code&gt;hugo&lt;/code&gt; takes a long time and should be avoided when the version hasn&amp;rsquo;t changed or it isn&amp;rsquo;t needed; run &lt;code&gt;make docker-push-support&lt;/code&gt; instead to skip building &lt;code&gt;hugo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Update the &lt;code&gt;docker-support&lt;/code&gt; image tag whenever build-time (or &amp;ldquo;serve&amp;rdquo;-time) dependencies have changed.&lt;/p&gt;
&lt;h4 id=&#34;how-is-the-development-container-made&#34;&gt;How is the Development container made?&lt;/h4&gt;
&lt;p&gt;These targets as explained below are run in the appropriate order as dependencies of &lt;code&gt;make docker-push&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;TODO&lt;/code&gt;: add a system/integration test for &lt;code&gt;website&lt;/code&gt; that verifies any changes have not broken &lt;code&gt;make docker-serve&lt;/code&gt;, for example by adding new dependencies without mentioning them in the &lt;code&gt;docker-support/Dockerfile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;flux-specific-dependencies&#34;&gt;Flux-specific Dependencies&lt;/h5&gt;
&lt;p&gt;The FluxCD.io website has some build-time dependencies including Python3, PyYAML, &lt;code&gt;rsync&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt;, (and potentially others that may be added in the future.) Flux-specific dependencies are prepared in an image that gets tagged as &lt;code&gt;docker.io/fluxcd/website:hugo-support&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This image is built from the &lt;code&gt;Dockerfile&lt;/code&gt; in &lt;code&gt;docker-support/&lt;/code&gt;; run &lt;code&gt;make docker-build-support&lt;/code&gt; to rebuild it locally, (or run as &lt;code&gt;make docker-push-support&lt;/code&gt; to build and also push.)&lt;/p&gt;
&lt;h5 id=&#34;gohugoiohugo&#34;&gt;&lt;code&gt;gohugoio/hugo&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;FluxCD also depends on a specific version of Hugo, which unfortunately does not provide docker images for each version. So we build it from source, with the &lt;code&gt;HUGO_BUILD_TAGS=extended&lt;/code&gt; build arg enabled.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;make docker-push-hugo&lt;/code&gt; to build and also push this image target.&lt;/p&gt;
&lt;p&gt;This will run &lt;code&gt;make hugo&lt;/code&gt; to get a shallow clone of the &lt;code&gt;gohugoio/hugo&lt;/code&gt; repository at the right &lt;code&gt;HUGO_VERSION&lt;/code&gt; and &lt;code&gt;make docker-build-hugo&lt;/code&gt; to build a hugo container base image. (This target compiles &lt;code&gt;golibsass&lt;/code&gt; which is very large, and may take a while.)&lt;/p&gt;
&lt;p&gt;These are all the dependencies of &lt;code&gt;make docker-push&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Blueprint</title>
      <link>/legacy/flux/references/blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/blueprint/</guid>
      <description>
        
        
        &lt;p&gt;This page describes the goals of Flux, how it achieves them and
significant architectural decisions. It is intentionally high level
to prevent it from being out of date too quickly.&lt;/p&gt;
&lt;h2 id=&#34;fluxs-goals&#34;&gt;Flux&amp;rsquo;s goals&lt;/h2&gt;
&lt;p&gt;The overall goal of Flux is to automate the deployment of services.
A typical use case would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A developer makes changes&lt;/li&gt;
&lt;li&gt;An operational cluster is now out of date and needs to be updated&lt;/li&gt;
&lt;li&gt;Flux observes those changes and deploys them to the cluster&lt;/li&gt;
&lt;li&gt;Flux maintains the current state of the cluster (e.g. in the event of
failure)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hence, the goal is to automate away the need for a developer to interact
with an orchestrator (which is a common source of accidental failure) or
with the systems that ensure that the orchestrator is in a working
state.&lt;/p&gt;
&lt;p&gt;Flux provides a CLI (
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;&lt;code&gt;fluxctl&lt;/code&gt;&lt;/a&gt;) to perform these operations
manually. Flux is flexible enough to fit into any development process.&lt;/p&gt;
&lt;h2 id=&#34;implementation-overview&#34;&gt;Implementation overview&lt;/h2&gt;
&lt;p&gt;The following describes how Flux achieves the goals.&lt;/p&gt;
&lt;h3 id=&#34;synchronisation-of-cluster-state&#34;&gt;Synchronisation of cluster state&lt;/h3&gt;
&lt;p&gt;The Flux team firmly believe that cluster state should be version
controlled. This allows users to record the history of the cluster,
fallback to previous versions and recreate clusters in exactly the same
state when required.&lt;/p&gt;
&lt;p&gt;But there is also another aspect. By tightly integrating the cluster
with version control, the cluster becomes more tightly integrated with
the deployment pipeline. This means that developers no longer have to
interact directly with a cluster (with the inevitable consequences of a
&amp;ldquo;fat-finger&amp;rdquo; mistake) which makes it far more stable and ideally
immutable.&lt;/p&gt;
&lt;p&gt;Flux achieves this by automatically synchronising the state of the
cluster to match the code representing the cluster in the repository.&lt;/p&gt;
&lt;p&gt;This simple idea then allows for a whole range of tools that can react
to changes and simply write to a repository.&lt;/p&gt;
&lt;h3 id=&#34;monitoring-for-new-images&#34;&gt;Monitoring for new images&lt;/h3&gt;
&lt;p&gt;Flux reads a list of running containers from the user git repository.
For each image, it will query the container registry to obtain the most
recently released tag.&lt;/p&gt;
&lt;p&gt;Flux then compares the most recent image tag with that specified in the
git repository. If they don&amp;rsquo;t match, the repository is updated.&lt;/p&gt;
&lt;p&gt;When services are in an &amp;ldquo;automated&amp;rdquo; mode, the service will periodically
check to see whether there are any new images. If there are, then they
are written to the repository.&lt;/p&gt;
&lt;p&gt;When automation is disabled, images are not checked.&lt;/p&gt;
&lt;p&gt;In order to access private registries, credentials may be required.&lt;/p&gt;
&lt;h3 id=&#34;deployment-of-images&#34;&gt;Deployment of images&lt;/h3&gt;
&lt;p&gt;Flux will only deploy different images. It will not re-deploy images
with the same tag.&lt;/p&gt;
&lt;p&gt;Once a list of new images have been established, it will alter the
configuration of the cluster to deploy the new images.&lt;/p&gt;
&lt;p&gt;Images can be &amp;ldquo;locked&amp;rdquo; to a specific version. &amp;ldquo;locked&amp;rdquo; images won&amp;rsquo;t be
updated by automated or manual means.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started with Flux</title>
      <link>/legacy/flux/tutorials/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/tutorials/get-started/</guid>
      <description>
        
        
        &lt;p&gt;This short guide shows a self-contained example of Flux and just
takes a couple of minutes to get set up. By the end you will
have Flux running in your cluster and it will be deploying any
code changes for you.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    If you would like to install Flux using Helm, refer to the 
&lt;a href=&#34;/legacy/flux/tutorials/get-started-helm/&#34;&gt;Helm
section&lt;/a&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will need to have Kubernetes set up. For a quick local test,
you can use &lt;code&gt;minikube&lt;/code&gt;, &lt;code&gt;kubeadm&lt;/code&gt; or &lt;code&gt;kind&lt;/code&gt;. Any other Kubernetes setup
will work as well though.&lt;/p&gt;
&lt;p&gt;If working on e.g. GKE with RBAC enabled, you will need to add a &lt;code&gt;ClusterRoleBinding&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create clusterrolebinding &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cluster-admin-&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--clusterrole&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cluster-admin &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;gcloud config get-value core/account&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-up-flux&#34;&gt;Set up Flux&lt;/h2&gt;
&lt;p&gt;In our example we are going to use

&lt;a href=&#34;https://github.com/fluxcd/flux-get-started&#34; target=&#34;_blank&#34;&gt;flux-get-started&lt;/a&gt;. If you
want to use that too, be sure to create a fork of it on GitHub.&lt;/p&gt;
&lt;p&gt;First, please 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;install &lt;code&gt;fluxctl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create the &lt;code&gt;flux&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, install Flux in your cluster (replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub username):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;YOURUSER&amp;#34;&lt;/span&gt;
fluxctl install &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-email&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;@users.noreply.github.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;git@github.com:&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;/flux-get-started &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;namespaces,workloads &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--git-path=namespaces,workloads&lt;/code&gt;, is meant to exclude Helm
manifests. Again, if you want to get started with Helm, please refer to the

&lt;a href=&#34;/legacy/flux/tutorials/get-started-helm/&#34;&gt;Helm section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wait for Flux to start:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux rollout status deployment/flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;giving-write-access&#34;&gt;Giving write access&lt;/h2&gt;
&lt;p&gt;At startup Flux generates a SSH key and logs the public key. Find
the SSH public key by installing 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;&lt;code&gt;fluxctl&lt;/code&gt;&lt;/a&gt; and
running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl identity --k8s-fwd-ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to sync your cluster state with git you need to copy the
public key and create a deploy key with write access on your GitHub
repository.&lt;/p&gt;
&lt;p&gt;Open GitHub, navigate to your fork, go to &lt;strong&gt;Setting &amp;gt; Deploy keys&lt;/strong&gt;,
click on &lt;strong&gt;Add deploy key&lt;/strong&gt;, give it a &lt;code&gt;Title&lt;/code&gt;, check &lt;strong&gt;Allow write
access&lt;/strong&gt;, paste the Flux public key and click &lt;strong&gt;Add key&lt;/strong&gt;. See the

&lt;a href=&#34;https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys&#34; target=&#34;_blank&#34;&gt;GitHub docs&lt;/a&gt;
for more info on how to manage deploy keys.&lt;/p&gt;
&lt;p&gt;(Or replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub ID in this url:
&lt;code&gt;https://github.com/YOURUSER/flux-get-started/settings/keys/new&lt;/code&gt; and
paste the key there.)&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    The SSH key must be configured to have R/W access to the
repository. More specifically, the SSH key must be able to create
and update tags. E.g. in Gitlab, that means it requires &lt;code&gt;Maintainer&lt;/code&gt;
permissions. The &lt;code&gt;Developer&lt;/code&gt; permission can create tags, but not
update them.

&lt;/div&gt;

&lt;h2 id=&#34;committing-a-small-change&#34;&gt;Committing a small change&lt;/h2&gt;
&lt;p&gt;In this example we are using a simple example of a webservice and
change its configuration to use a different message.&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;YOURUSER&lt;/code&gt; in
&lt;code&gt;https://github.com/YOURUSER/flux-get-started/blob/master/workloads/podinfo-dep.yaml&lt;/code&gt;
with your GitHub ID), open the URL in your browser, edit the file,
add &lt;code&gt;--ui-message=&#39;Welcome to Flux&#39;&lt;/code&gt; to the container command and commit the file.&lt;/p&gt;
&lt;p&gt;By default, Flux git pull frequency is set to 5 minutes.
You can tell Flux to sync the changes immediately with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl sync --k8s-fwd-ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;confirm-the-change-landed&#34;&gt;Confirm the change landed&lt;/h2&gt;
&lt;p&gt;To access our webservice and check out its welcome message, simply
run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n demo port-forward deployment/podinfo 9898:9898 &amp;amp;
curl localhost:9898
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the updated &lt;code&gt;message&lt;/code&gt; value in the JSON reply.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, the actual steps to set up Flux, get our app
deployed, give Flux access to it and see modifications land are
very straight-forward and are a quite natural work-flow.&lt;/p&gt;
&lt;p&gt;As a next step, you might want to dive deeper into 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;how to
control Flux&lt;/a&gt;, or go through our
hands-on tutorial about driving Flux, e.g.

&lt;a href=&#34;/legacy/flux/tutorials/driving-flux/&#34;&gt;automations, annotations and locks&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started developing</title>
      <link>/legacy/flux/contributing/get-started-developing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/contributing/get-started-developing/</guid>
      <description>
        
        
        &lt;p&gt;This guide shows a workflow for making a small (actually, tiny) change
to Flux, building and testing that change locally.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;From a very high level, there are at least 3 ways you can develop on
Flux once you have your environment set up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &amp;ldquo;minimalist&amp;rdquo; approach (only requires and &lt;code&gt;kubectl&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the specific image tag (e.g. &lt;code&gt;docker.io/fluxcd/flux:master-a86167e4&lt;/code&gt;)
for what you just built and paste it into &lt;code&gt;/deploy/flux-deployment.yaml&lt;/code&gt;
as the image you&amp;rsquo;re targeting to deploy&lt;/li&gt;
&lt;li&gt;deploy the resources in &lt;code&gt;/develop/*.yaml&lt;/code&gt; manually with
&lt;code&gt;kubectl apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;make a change to the code&lt;/li&gt;
&lt;li&gt;see your code changes have been deployed&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;freshpod&lt;/code&gt; to deploy changes to the &lt;code&gt;/deploy&lt;/code&gt; directory resources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;make a change to the code&lt;/li&gt;
&lt;li&gt;see your changes have been deployed&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote cluster development approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ensure local &lt;code&gt;kubectl&lt;/code&gt; access to a remote Kubernetes cluster&lt;/li&gt;
&lt;li&gt;have an available local memcached instance&lt;/li&gt;
&lt;li&gt;make a change to the code&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go run cmd/fluxd/main.go &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --memcached-hostname localhost  &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --memcached-port &lt;span style=&#34;color:#40a070&#34;&gt;11211&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --memcached-service &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --git-url git@github.com:fluxcd/flux-get-started &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --k8s-in-cluster&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This guide covers approaches 1 and 2 using &lt;code&gt;minikube&lt;/code&gt;. &lt;code&gt;freshpod&lt;/code&gt; is
superseded by &lt;code&gt;Skaffold&lt;/code&gt; and is generally the future.  That said,
&lt;code&gt;freshpod&lt;/code&gt; is very simple to use and reason about (and is still well
supported by &lt;code&gt;minikube&lt;/code&gt;) which is why it&amp;rsquo;s used in this guide.&lt;/p&gt;
&lt;h2 id=&#34;run-fluxcdflux-getting-started&#34;&gt;Run &lt;code&gt;fluxcd/flux-getting-started&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to make some changes soon enough, but just to get a good
baseline please follow the 
&lt;a href=&#34;/legacy/flux/tutorials/get-started/&#34;&gt;&amp;ldquo;Get started with Flux&amp;rdquo;&lt;/a&gt;
tutorial and run the &lt;code&gt;fluxcd/flux-getting-started&lt;/code&gt; repo through its
normal paces.&lt;/p&gt;
&lt;p&gt;Now that we know everything is working with &lt;code&gt;flux-getting-started&lt;/code&gt;,
we&amp;rsquo;re going to try and do nearly the same thing as &lt;code&gt;flux-getting-started&lt;/code&gt;,
except instead of using official releases of flux, we&amp;rsquo;re going to build
and run what we have locally.&lt;/p&gt;
&lt;h2 id=&#34;prepare-your-environment&#34;&gt;Prepare your environment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the prerequisites. This guide is written from running Linux,
but the same instructions will generally apply to OSX. Although
everything you need has been known to work independently in Windows
from time to time, results may vary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;minikube&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.docker.com/install/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure your environment so you can run tests. Run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to make sure we&amp;rsquo;re starting fresh. Tell &lt;code&gt;minikube&lt;/code&gt; to clear
any previously running clusters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;minikube delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/commands/addons/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;minikube&lt;/code&gt; addon&lt;/a&gt;
called 
&lt;a href=&#34;https://github.com/GoogleCloudPlatform/freshpod&#34; target=&#34;_blank&#34;&gt;freshpod&lt;/a&gt;
that will be very useful to us later. You&amp;rsquo;ll see. It&amp;rsquo;s gonna be cool.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;minikube addons &lt;span style=&#34;color:#007020&#34;&gt;enable&lt;/span&gt; freshpod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This part is really important. You&amp;rsquo;re going to set some environment
variables which will intercept any images pulled by docker. Run
&lt;code&gt;minikube docker-env&lt;/code&gt; to see what we&amp;rsquo;re talking about. You&amp;rsquo;ll get an
output that shows you what the script is doing. Thankfully, it&amp;rsquo;s not
terribly complicated - it just sets some environment variables which
will allow &lt;code&gt;minikube&lt;/code&gt; to man-in-the-middle the requests Kubernetes
makes to pull images. It will look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;DOCKER_TLS_VERIFY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;DOCKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;tcp://192.168.99.128:2376&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;DOCKER_CERT_PATH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;/home/fluxrulez/.minikube/certs&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;DOCKER_API_VERSION&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;1.35&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Run this command to configure your shell:&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# eval $(minikube docker-env)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, as the script suggests, run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube docker-env&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, be warned. These are local variables. This means that if you
run this &lt;code&gt;eval&lt;/code&gt; in one terminal and then switch to another for later
when we build the Flux project, you&amp;rsquo;re gonna hit some issues.
For one, you&amp;rsquo;ll know it isn&amp;rsquo;t working because Kubernetes will tell
you that it can&amp;rsquo;t pull the image when you run &lt;code&gt;kubectl get pods&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;NAME                        READY   STATUS         RESTARTS   AGE
flux-7f6bd57699-shx9v       0/1     ErrImagePull   &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;          35s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;prepare-the-repository&#34;&gt;Prepare the repository&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fork the 
&lt;a href=&#34;https://github.com/fluxcd/flux&#34; target=&#34;_blank&#34;&gt;repo on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone &lt;code&gt;git@github.com:&amp;lt;YOUR-GITHUB-USERNAME&amp;gt;/flux.git&lt;/code&gt; replacing
&lt;code&gt;&amp;lt;YOUR-GITHUB-USERNAME&amp;gt;&lt;/code&gt; with your GitHub username.&lt;/p&gt;
&lt;p&gt;In the same terminal you ran &lt;code&gt;eval $(minikube docker-env)&lt;/code&gt;, run
&lt;code&gt;GO111MODULE=on go mod download&lt;/code&gt; followed by &lt;code&gt;make&lt;/code&gt; from the root
directory of the Flux repo.  You&amp;rsquo;ll see docker&amp;rsquo;s usual output as it
builds the image layers.  Once it&amp;rsquo;s done, you should see something
like this in the middle of the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Successfully built 606610e0f4ef
Successfully tagged docker.io/fluxcd/flux:latest
Successfully tagged docker.io/fluxcd/flux:master-a86167e4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This confirms that a new docker image was tagged for your image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open up 
&lt;a href=&#34;https://github.com/fluxcd/flux/blob/master/deploy/flux-deployment.yaml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;deploy/flux-deployment.yaml&lt;/code&gt;&lt;/a&gt;
and update the image at &lt;code&gt;spec.template.spec.containers[0].image&lt;/code&gt; to
be simply &lt;code&gt;docker.io/fluxcd/flux&lt;/code&gt;. While we&amp;rsquo;re here, also change
the &lt;code&gt;--git-url&lt;/code&gt; to point towards your fork. It will look something
like this in the YAML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.io/fluxcd/flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;- --git-url=git@github.com:&amp;lt;YOUR-GITHUB-USERNAME&amp;gt;/flux-getting-started&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;- --git-branch=master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;rsquo;re ready to apply your newly-customized deployment! Since &lt;code&gt;kubectl&lt;/code&gt;
will apply all the Kubernetes manifests it finds (recursively) in a
folder, we simply need to pass the directory to &lt;code&gt;kubectl apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply --filename ./deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see an output similar to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;serviceaccount/flux created
clusterrole.rbac.authorization.k8s.io/flux created
clusterrolebinding.rbac.authorization.k8s.io/flux created
deployment.apps/flux created
secret/flux-git-deploy created
deployment.apps/memcached created
service/memcached created
secret/flux-git-deploy configured
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congrats you just deployed your local Flux to your default namespace.
Check that everything is running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl get pods --selector&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should get an output that looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;NAME                   READY   STATUS    RESTARTS   AGE
flux-6f7fd5bbc-hpq85   1/1     Running   &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;          38s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If (instead) you see that Ready is showing &lt;code&gt;0/1&lt;/code&gt; and/or the status is
&lt;code&gt;ErrImagePull&lt;/code&gt; double back on the instructions and make sure you did
everything correctly and in order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull the logs for your &amp;ldquo;fresh off of master&amp;rdquo; copy of Flux that you
just deployed locally to &lt;code&gt;minikube&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl logs --selector&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see an output that looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:45.091531939Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warming.go:268 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warmer &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;refreshing image&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;docker.io/fluxcd/flux &lt;span style=&#34;color:#bb60d5&#34;&gt;tag_count&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;to_update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;of_which_refresh&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;of_which_missing&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:46.233723421Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warming.go:364 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warmer &lt;span style=&#34;color:#bb60d5&#34;&gt;updated&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;docker.io/fluxcd/flux    &lt;span style=&#34;color:#bb60d5&#34;&gt;successful&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;attempted&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:46.234086642Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;images.go:17 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;sync-loop &lt;span style=&#34;color:#bb60d5&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;polling images&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:46.234125646Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;images.go:27 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;sync-loop &lt;span style=&#34;color:#bb60d5&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;no automated services&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:46.749598558Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warming.go:268 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warmer &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;refreshing image&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;memcached    &lt;span style=&#34;color:#bb60d5&#34;&gt;tag_count&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;to_update&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;of_which_refresh&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;of_which_missing&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;66&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:51.017452675Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warming.go:364 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;warmer &lt;span style=&#34;color:#bb60d5&#34;&gt;updated&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;memcached &lt;span style=&#34;color:#bb60d5&#34;&gt;successful&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;attempted&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;66&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:51.020061586Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;images.go:17 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;sync-loop &lt;span style=&#34;color:#bb60d5&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;polling images&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2019-02-28T18:58:51.020113243Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;images.go:27 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;sync-loop &lt;span style=&#34;color:#bb60d5&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;no automated services&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;make-some-changes&#34;&gt;Make some changes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Now for the part you&amp;rsquo;ve been waiting for! We&amp;rsquo;re going to make a
cosmetic change to our local copy of Flux. Navigate to

&lt;a href=&#34;https://github.com/fluxcd/flux/blob/master/pkg/git/operations.go&#34; target=&#34;_blank&#34;&gt;git/operations.go&lt;/a&gt;.
In it, you will find a private function to this package that goes
by the name &lt;code&gt;execGitCmd&lt;/code&gt;. Paste the following as the (new) first
line of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;executing git command ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; again. Once this finishes you can check on your running
pods with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl get pods --selector&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keep your eye on the &lt;code&gt;AGE&lt;/code&gt; column. It should be just a few seconds
old if you check out the &lt;code&gt;AGE&lt;/code&gt; column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;NAME                   READY   STATUS    RESTARTS   AGE
flux-6f7fd5bbc-6j9d5   1/1     Running   &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;          10s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pod was deployed even though we didn&amp;rsquo;t run any &lt;code&gt;kubectl&lt;/code&gt;
commands or interact with Kubernetes directly because of the
&lt;code&gt;freshpod&lt;/code&gt; &lt;code&gt;minikube&lt;/code&gt; addon that we enabled earlier. Freshpod saw
that a new Docker image was tagged for &lt;code&gt;docker.io/fluxcd/flux:latest&lt;/code&gt;
and it went ahead and redeployed that pod for us.&lt;/p&gt;
&lt;p&gt;Consider that simply applying the &lt;code&gt;flux-deployment.yaml&lt;/code&gt; file again
wouldn&amp;rsquo;t do anything since the actual image we&amp;rsquo;re targeting (which
is actually &lt;code&gt;docker.io/fluxcd/flux&lt;/code&gt; with no &lt;code&gt;:latest&lt;/code&gt; tag, but it&amp;rsquo;s
the same difference) hasn&amp;rsquo;t changed.  The Kubernetes api server will
get that JSON request from &lt;code&gt;kubectl&lt;/code&gt; and go: &amp;ldquo;right&amp;hellip; so nothing has
changed in the file so I have nothing to do&amp;hellip; IGNORE!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There is another way to do this, of course. Remember that before when
we ran &lt;code&gt;make&lt;/code&gt; that we did &lt;em&gt;also&lt;/em&gt; get an image tagged with the &lt;code&gt;:&amp;lt;branch&amp;gt;-&amp;lt;commit hash&amp;gt;&lt;/code&gt;
syntax (in our specific example above it was &lt;code&gt;:master-a86167e4&lt;/code&gt;).
We could, in theory, grab that tag every time we &lt;code&gt;make&lt;/code&gt;, and then
paste it into &lt;code&gt;spec.template.spec.containers[0].image&lt;/code&gt; of our
deployment. That&amp;rsquo;s tedious and error prone. Instead, &lt;code&gt;freshpod&lt;/code&gt; cuts
this step out for us and accomplishes the same end goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the logs again (with &lt;code&gt;kubectl logs --selector=name=flux&lt;/code&gt;) to
find that your obnoxious chain of &lt;code&gt;Z&lt;/code&gt;s is present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations!&lt;/h2&gt;
&lt;p&gt;You have now modified Flux and deployed that change locally. From here
on out, you simply need to run &lt;code&gt;make&lt;/code&gt; after you save your changes and
wait a few seconds for your new pod to be deployed to &lt;code&gt;minikube&lt;/code&gt;.
Keep in mind, that (as in the situation where you run &lt;code&gt;make&lt;/code&gt; without
saving any changes) if the Docker image you pointed to in the
Kubernetes deployment for Flux is not Successfully tagged, &lt;code&gt;freshpod&lt;/code&gt;
won&amp;rsquo;t have anything new to deploy.
Other than that, you should be good to go!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Introducing Flux</title>
      <link>/legacy/flux/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/introduction/</guid>
      <description>
        
        
        &lt;p&gt;Continuous delivery is a term that encapsulates a set of best practices
that surround building, deploying and monitoring applications. The
goal is to provide a sustainable model for maintaining and improving
an application.&lt;/p&gt;
&lt;p&gt;Flux is a tool that automates the deployment of containers to
Kubernetes. It fills the automation void that exists between building
and monitoring.&lt;/p&gt;
&lt;h2 id=&#34;automated-git-cluster-synchronisation&#34;&gt;Automated git-&amp;gt;cluster synchronisation&lt;/h2&gt;
&lt;p&gt;Flux&amp;rsquo;s main feature is the automated synchronisation between a version
control repository and a cluster. If you make any changes to your
repository, those changes are automatically deployed to your cluster.&lt;/p&gt;
&lt;p&gt;This is a simple, but dramatic improvement on current state of the art.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All configuration is stored within version control and is inherently
up to date. At any point anyone could completely recreate the cluster
in exactly the same state of configuration.&lt;/li&gt;
&lt;li&gt;Changes to the cluster are immediately visible to all interested
parties.&lt;/li&gt;
&lt;li&gt;During a postmortem, the git log provides the perfect history for an
audit.&lt;/li&gt;
&lt;li&gt;End to end, code to production pipelines become not only possible, but
easy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;automated-deployment-of-new-container-images&#34;&gt;Automated deployment of new container images&lt;/h2&gt;
&lt;p&gt;Another feature is the automated deployment of containers. It will
continuously monitor a range of container registries and deploy new
versions where applicable.&lt;/p&gt;
&lt;p&gt;This is really useful for keeping the repository and therefore the
cluster up to date. It allows separate teams to have their own
deployment pipelines since Flux is able to see the new image and update
the cluster accordingly.&lt;/p&gt;
&lt;p&gt;This feature can be disabled and images can be locked to a specific
version.&lt;/p&gt;
&lt;h2 id=&#34;integrations-with-other-devops-tools&#34;&gt;Integrations with other devops tools&lt;/h2&gt;
&lt;p&gt;For configuration customization across environments and clusters, Flux comes with builtin support
for 
&lt;a href=&#34;/legacy/flux/references/fluxyaml-config-files/&#34;&gt;Kustomize&lt;/a&gt; and 
&lt;a href=&#34;/legacy/flux/references/helm-operator-integration/&#34;&gt;Helm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For advanced deployment patterns like Canary releases, A/B testing and Blue/Green deployments,
Flux can be used together with 
&lt;a href=&#34;https://flagger.app&#34; target=&#34;_blank&#34;&gt;Flagger&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Introduction</title>
      <link>/legacy/helm-operator/helmrelease-guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/helmrelease-guide/introduction/</guid>
      <description>
        
        
        &lt;p&gt;The intention of this guide is to give you more detailed information on various
elements of the &lt;code&gt;HelmRelease&lt;/code&gt; Custom Resource. You can follow it in one take,
use it as a more explanatory reference, or a combination of both.&lt;/p&gt;
&lt;p&gt;It assumes you have the Helm Operator already installed in your cluster. If
you have not done this yet, 
&lt;a href=&#34;/legacy/helm-operator/get-started/quickstart/#install-the-helm-operator&#34;&gt;follow the installation instructions from the
quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The guide tries not to presume a specific enabled Helm version but for the sake
of simplicity it was written while making use of Helm 3.&lt;/p&gt;
&lt;h2 id=&#34;a-minimal-helmrelease&#34;&gt;A minimal HelmRelease&lt;/h2&gt;
&lt;p&gt;To get started, we will first create the most minimal &lt;code&gt;HelmRelease&lt;/code&gt; possible.
We will use (parts) of this minimal &lt;code&gt;HelmRelease&lt;/code&gt; as an example throughout the
rest of this guide.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# podinfo.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.fluxcd.io/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://stefanprodan.github.io/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;3.2.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;spec.chart&lt;/code&gt; object is the only mandatory property of the &lt;code&gt;HelmRelease&lt;/code&gt;
and defines the Helm chart that should be installed by the Helm Operator. This
&lt;code&gt;HelmRelease&lt;/code&gt; will manage 
&lt;a href=&#34;https://github.com/stefanprodan/podinfo&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stefanprodan/podinfo&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a tiny web application made with Go that showcases best practices of running
microservices in Kubernetes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;from a 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/chart-sources/#helm-repositories&#34;&gt;Helm repository chart source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Applying this to the cluster and making the Helm Operator do the release is
equivalent to a human running the following &lt;code&gt;helm&lt;/code&gt; commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ helm repo add podinfo https://stefanprodan.github.io/podinfo
$ helm upgrade -i default-podinfo podinfo/podinfo --version &#39;3.2.0&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A couple of differences between the &lt;code&gt;HelmRelease&lt;/code&gt; resource and listed &lt;code&gt;helm&lt;/code&gt;
commands should stand out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;HelmRelease&lt;/code&gt; does not make use of a repository alias, instead the
absolute URL of the Helm repository is used.&lt;br&gt;&lt;br&gt;
This is to ensure the &lt;code&gt;HelmRelease&lt;/code&gt; is able to stand on its own. If we used
names in the spec, which were resolved to URLs elsewhere (e.g., in a
&lt;code&gt;repositories.yaml&lt;/code&gt; supplied to the operator), it would be possible to
change the meaning of a &lt;code&gt;HelmRelease&lt;/code&gt; without altering it. This is
undesirable because it makes it hard to specify exactly what you want, in
the one place; or to read exactly what is being specified, in the one place.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;spec.chart.version&lt;/code&gt; is mandatory.&lt;br&gt;&lt;br&gt;
The reasoning behind this is the same as the explanation given above.&lt;/li&gt;
&lt;li&gt;The default release name used by the Helm Operator is composed from the
&lt;code&gt;metadata.namespace&lt;/code&gt; and the &lt;code&gt;metadata.name&lt;/code&gt; of the &lt;code&gt;HelmRelease&lt;/code&gt; resource
(&lt;code&gt;&amp;lt;namespace&amp;gt;-&amp;lt;name&amp;gt;&lt;/code&gt;).&lt;br&gt;&lt;br&gt;
This to ensure it does not collide with other &lt;code&gt;HelmRelease&lt;/code&gt; resources that
may have the same &lt;code&gt;.metadata.name&lt;/code&gt; but different namespace definitions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having absorbed this information, you can now go ahead and apply the resource
using &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl apply -f podinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Take a look at the logs of the Helm Operator deployment and you will see the
Helm installation was performed almost instantly after applying the resource:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl logs deploy/flux-helm-operator
...
ts=2020-01-01T12:00:00.000000000Z caller=release.go:335 component=release release=default-podinfo targetNamespace=default resource=default:helmrelease/podinfo helmVersion=v3 info=&amp;quot;no existing release&amp;quot; action=install
ts=2020-01-01T12:00:00.000000000Z caller=helm.go:69 component=helm version=v3 info=&amp;quot;creating 2
resource(s)&amp;quot; targetNamespace=default release=default-podinfo
ts=2020-01-01T12:00:00.000000000Z caller=release.go:266 component=release release=default-podinfo targetNamespace=default resource=default:helmrelease/podinfo helmVersion=v3 info=&amp;quot;Helm release sync succeeded&amp;quot; revision=3.2.0
$ kubectl get helmrelease
NAME      RELEASE           STATUS     MESSAGE                       AGE
podinfo   default-podinfo   deployed   Helm release sync succeeded   10s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, the release will now also show up for e.g. &lt;code&gt;helm list&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ helm list
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
default-podinfo default         1               2020-01-01 12:00:00.000000000 +0000 UTC deployed        podinfo-3.2.0   3.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Congratulations! You made your first Helm release using a &lt;code&gt;HelmRelease&lt;/code&gt;
resource.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Operator reference</title>
      <link>/legacy/helm-operator/references/operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/references/operator/</guid>
      <description>
        
        
        &lt;p&gt;The Helm Operator deals with Helm chart releases. The operator watches for
changes of Custom Resources of kind &lt;code&gt;HelmRelease&lt;/code&gt;. It receives Kubernetes
Events and acts accordingly.&lt;/p&gt;
&lt;h2 id=&#34;responsibilities&#34;&gt;Responsibilities&lt;/h2&gt;
&lt;p&gt;When the Helm Operator sees a &lt;code&gt;HelmRelease&lt;/code&gt; resource in the
cluster, it either installs or upgrades the named Helm release so that
the chart is released as specified.&lt;/p&gt;
&lt;p&gt;It will also notice when a &lt;code&gt;HelmRelease&lt;/code&gt; resource is updated, and
take action accordingly.&lt;/p&gt;
&lt;h2 id=&#34;setup-and-configuration&#34;&gt;Setup and configuration&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;helm-operator&lt;/code&gt; requires setup and offers customization though a multitude of flags.&lt;/p&gt;
&lt;h3 id=&#34;general-flags&#34;&gt;General flags&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--log-format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Changes the logging format; &lt;code&gt;fmt&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--workers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number of workers processing releases.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--listen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:3030&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Listen address where &lt;code&gt;/metrics&lt;/code&gt; and API will be served.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;reconciliation-configuration&#34;&gt;Reconciliation configuration&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--charts-sync-interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Period on which to reconcile the Helm releases with &lt;code&gt;HelmRelease&lt;/code&gt; resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--status-update-interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Period on which to update the Helm release status in &lt;code&gt;HelmRelease&lt;/code&gt; resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--log-release-diffs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Log the diff when a chart release diverges. &lt;strong&gt;Potentially insecure due to logging of secret values.&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;cluster-configuration&#34;&gt;Cluster configuration&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--kubeconfig&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Path to a kubeconfig. Only required if out-of-cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--master&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--allow-namespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;If set, this limits the scope to a single namespace. if not specified, all namespaces will be watched.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;helm-configuration&#34;&gt;Helm configuration&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--enabled-helm-versions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v2,v3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The Helm client versions supported by this operator instance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--helm-repository-import&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Targeted version and the path of the Helm repository index to import, i.e. &lt;code&gt;v3:/tmp/v3/index.yaml,v2:/tmp/v2/index.yaml&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;tiller-configuration&#34;&gt;Tiller configuration&lt;/h4&gt;
&lt;p&gt;The following option flags are only applicable when support for Helm 2 is
enabled and a connection to Tiller needs to be made.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tiller IP address. Only required if out-of-cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tiller port.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-namespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tiller namespace. If not provided, the default is kube-system.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-enable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable TLS communication with Tiller. If provided, requires TLSKey and TLSCert to be provided as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-verify&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Verify TLS certificate from Tiller. Will enable TLS communication when provided.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-key-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/fluxd/helm/tls.key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to private key file used to communicate with the Tiller server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-cert-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/fluxd/helm/tls.crt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to certificate file used to communicate with the Tiller server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-ca-cert-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Path to CA certificate file used to validate the Tiller server. Required if &lt;code&gt;--tiller-tls-verify&lt;/code&gt; is enabled.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--tiller-tls-hostname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The server name used to verify the hostname on the returned certificates from the Tiller server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;helm-2to3-convert-configurations&#34;&gt;Helm 2to3 convert configurations&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--convert-release-storage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;v2 release storage type/object. It can be &amp;lsquo;secrets&amp;rsquo; or &amp;lsquo;configmaps&amp;rsquo;. This is only used with the &amp;lsquo;tiller-out-cluster&amp;rsquo; flag (default &amp;lsquo;secrets&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--convert-tiller-out-cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When Tiller is not running in the cluster e.g. Tillerless&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;git-chart-source-configuration&#34;&gt;Git chart source configuration&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--git-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration after which Git operations time out.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--git-poll-interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Period on which to poll Git chart sources for changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--update-chart-deps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Update chart dependencies from a Git chart source before installing or upgrading a release.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Proposing changes</title>
      <link>/docs/contributing/docs/proposing-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/docs/proposing-changes/</guid>
      <description>
        
        
        &lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Familiarize yourself with the 
&lt;a href=&#34;https://github.com/fluxcd/website&#34; target=&#34;_blank&#34;&gt;documentation repository&lt;/a&gt; and the website&amp;rsquo;s static site generator (Hugo).&lt;/li&gt;
&lt;li&gt;Understand the process for opening a pull request and reviewing changes&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;opening-a-pull-request&#34;&gt;Opening a pull request&lt;/h2&gt;
&lt;p&gt;To contribute new pages or improve existing pages, open a pull request (PR).&lt;/p&gt;
&lt;p&gt;If your change is small, or you&amp;rsquo;re unfamiliar with git, read 
&lt;a href=&#34;#Changes-using-GitHub&#34;&gt;Changes using GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;changes-using-github&#34;&gt;Changes using GitHub&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re less experienced with git workflows, here&amp;rsquo;s an easier method of opening a pull request.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Maintainer Warning&lt;/h4&gt;

    If you are a maintainer of the repo, the edit page button will not let you work off a fork, as you have write permission.

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On the page you want to modify, select the pencil icon at the top right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make your changes in the GitHub markdown editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Below the editor, fill in the &lt;strong&gt;Propose file change&lt;/strong&gt; form.&lt;/p&gt;
&lt;p&gt;In the first field, give your commit message a title.
In the second field&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide a description


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    Do not use any 
&lt;a href=&#34;https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword&#34; target=&#34;_blank&#34;&gt;GitHub Keywords&lt;/a&gt;
in your commit message. You can add those to the pull request description later.

&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add commit signoff&lt;/p&gt;
&lt;p&gt;Add a new line after the description
Copy the below snippet and fill in with your details&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Signed-off-by: Your Name &amp;lt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;youremail&lt;/span&gt;&lt;span style=&#34;&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;emailprovider&lt;/span&gt;&lt;span style=&#34;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;com&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Prefilling Signoff Information&lt;/h4&gt;

    You can use the 
&lt;a href=&#34;https://github.com/scottrigby/dco-gh-ui&#34; target=&#34;_blank&#34;&gt;dco-gh-ui&lt;/a&gt; browser extension to prefill signoff information in your commit message.
Find out how to install and use the extension 
&lt;a href=&#34;https://github.com/scottrigby/dco-gh-ui&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.

&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Propose file change&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Create pull request&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;Open a pull request&lt;/strong&gt; screen appears. Fill in the form:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Subject&lt;/strong&gt; field of the pull request defaults to the commit summary.
You can change it if needed.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Body&lt;/strong&gt; contains your extended commit message, if you have one,
and some template text. Add the
details the template text asks for, then delete the extra template text.&lt;/li&gt;
&lt;li&gt;Leave the &lt;strong&gt;Allow edits from maintainers&lt;/strong&gt; checkbox selected.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;


    PR descriptions are a great way to help reviewers understand your change. For more information, see 
&lt;a href=&#34;#open-a-pr&#34;&gt;Opening a PR&lt;/a&gt;.

&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Create pull request&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;addressing-feedback-in-github&#34;&gt;Addressing feedback in GitHub&lt;/h3&gt;
&lt;p&gt;Before merging a pull request, community members review and approve it.&lt;/p&gt;
&lt;p&gt;If a reviewer asks you to make changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;strong&gt;Files changed&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Select the pencil (edit) icon on any files changed by the pull request.&lt;/li&gt;
&lt;li&gt;Make the changes requested.&lt;/li&gt;
&lt;li&gt;Commit the changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;work-from-a-local-fork&#34;&gt;Work from a local fork&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re more experienced with git, or if your changes are larger than a few lines, work from a local fork.&lt;/p&gt;
&lt;h4 id=&#34;fork-the-fluxcdwebsite-repository&#34;&gt;Fork the fluxcd/website repository&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the 
&lt;a href=&#34;https://github.com/fluxcd/website/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fluxcd/website&lt;/code&gt;&lt;/a&gt; repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Fork&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the new &lt;code&gt;website&lt;/code&gt; directory. Set the &lt;code&gt;fluxcd/website&lt;/code&gt; repository as the &lt;code&gt;upstream&lt;/code&gt; remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;cd&lt;/span&gt; website

git remote add upstream https://github.com/fluxcd/website.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm your &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;upstream&lt;/code&gt; repositories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output is similar to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;origin    git@github.com:&amp;lt;github_username&amp;gt;/website.git &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
origin    git@github.com:&amp;lt;github_username&amp;gt;/website.git &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
upstream  https://github.com/fluxcd/website.git &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
upstream  https://github.com/fluxcd/website.git &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch commits from your fork&amp;rsquo;s &lt;code&gt;origin/main&lt;/code&gt; and &lt;code&gt;fluxcd/website&lt;/code&gt;&amp;rsquo;s &lt;code&gt;upstream/main&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git fetch origin
git fetch upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes sure your local repository is up to date before you start making changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new branch based on &lt;code&gt;upstream/main&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout -b &amp;lt;my_new_branch&amp;gt; upstream/main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make your changes using a text editor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At any time, use the &lt;code&gt;git status&lt;/code&gt; command to see what files you&amp;rsquo;ve changed.&lt;/p&gt;
&lt;h4 id=&#34;commit-your-changes&#34;&gt;Commit your changes&lt;/h4&gt;
&lt;p&gt;When you are ready to submit a pull request, commit your changes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In your local repository, check which files you need to commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output is similar to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;On branch &amp;lt;my_new_branch&amp;gt;
Your branch is up to date with &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;origin/&amp;lt;my_new_branch&amp;gt;&amp;#39;&lt;/span&gt;.

Changes not staged &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; commit:
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to update what will be committed&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to discard changes in working directory&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

modified:   content/en/docs/contribute/new-content/run-locally.md

no changes added to commit &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the files listed under &lt;strong&gt;Changes not staged for commit&lt;/strong&gt; to the commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add &amp;lt;your_file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Repeat this for each file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After adding all the files, create a commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -sm &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Your commit message&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Do not use any &lt;a href=&#34;https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword&#34;&gt;GitHub Keywords&lt;/a&gt; in your commit message. You can add those to the pull request
description later.

&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push your local branch and its new commit to your remote fork:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push origin &amp;lt;my_new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;open-a-pull-request-from-your-fork-to-fluxcdwebsite&#34;&gt;Open a pull request from your fork to fluxcd/website&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;In a web browser, go to the 
&lt;a href=&#34;https://github.com/fluxcd/website/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fluxcd/website&lt;/code&gt;&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Navigate to pull requests and select New pull request&lt;/li&gt;
&lt;li&gt;Select compare across forks&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;head repository&lt;/strong&gt; drop-down menu, select your fork.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;compare&lt;/strong&gt; drop-down menu, select your branch.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Create Pull Request&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Add a description for your pull request:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; (50 characters or less): Summarize the intent of the change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: Describe the change in more detail.
&lt;ul&gt;
&lt;li&gt;If there is a related GitHub issue, include &lt;code&gt;Fixes #12345&lt;/code&gt; or &lt;code&gt;Closes #12345&lt;/code&gt; in the description. GitHub&amp;rsquo;s automation closes the mentioned issue after merging the PR if used. If there are other related PRs, link those as well.&lt;/li&gt;
&lt;li&gt;If you want advice on something specific, include any questions you&amp;rsquo;d like reviewers to think about in your description.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Create pull request&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations! Your pull request is available in 
&lt;a href=&#34;https://github.com/fluxcd/website/pulls&#34; target=&#34;_blank&#34;&gt;Pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;addressing-feedback-locally&#34;&gt;Addressing feedback locally&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After making your changes, amend your previous commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -as --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-as&lt;/code&gt;: commits all changes and adds your signoff&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amend&lt;/code&gt;: amends the previous commit, rather than creating a new one&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your commit message if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;git push origin &amp;lt;my_new_branch&amp;gt;&lt;/code&gt; to push your changes and re-run the Netlify tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;changes-from-reviewers&#34;&gt;Changes from reviewers&lt;/h4&gt;
&lt;p&gt;Sometimes reviewers commit to your pull request. Before making any other changes, fetch those commits.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch commits from your remote fork and rebase your working branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git fetch origin
git rebase origin/&amp;lt;your-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After rebasing, force-push new changes to your fork:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push --force-with-lease origin &amp;lt;your-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;adding-dco-on-commits-retroactively&#34;&gt;Adding DCO on commits retroactively&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open an interactive rebase session&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase --signoff HEAD~&amp;lt;number of commits in your pr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify you have signed the commits&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Force push&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git push -f origin branchname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;merge-conflicts-and-rebasing&#34;&gt;Merge conflicts and rebasing&lt;/h4&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    For more information, see &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#_basic_merge_conflicts&#34;&gt;Git Branching - Basic Branching and Merging&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging&#34;&gt;Advanced Merging&lt;/a&gt;, or ask in the &lt;code&gt;#sig-docs&lt;/code&gt; Slack channel for help.

&lt;/div&gt;

&lt;p&gt;If another contributor commits changes to the same file in another PR, it can create a merge conflict. You must resolve all merge conflicts in your PR.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update your fork and rebase your local branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git fetch origin
git rebase origin/&amp;lt;your-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then force-push the changes to your fork:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push --force-with-lease origin &amp;lt;your-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch changes from &lt;code&gt;fluxcd/website&lt;/code&gt;&amp;rsquo;s &lt;code&gt;upstream/main&lt;/code&gt; and rebase your branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git fetch upstream
git rebase upstream/main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inspect the results of the rebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in a number of files marked as conflicted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open each conflicted file and look for the conflict markers: &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;===&lt;/code&gt;. Resolve the conflict and delete the conflict marker.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    For more information, see &lt;a href=&#34;https://git-scm.com/docs/git-merge#_how_conflicts_are_presented&#34;&gt;How conflicts are presented&lt;/a&gt;.

&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the files to the changeset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue the rebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat steps 2 to 5 as needed.&lt;/p&gt;
&lt;p&gt;After applying all commits, the &lt;code&gt;git status&lt;/code&gt; command shows that the rebase is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Force-push the branch to your fork:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push --force-with-lease origin &amp;lt;your-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The pull request no longer shows any conflicts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Providing your own SSH key</title>
      <link>/legacy/flux/guides/provide-own-ssh-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/guides/provide-own-ssh-key/</guid>
      <description>
        
        
        &lt;p&gt;Flux connects to the repository using an SSH key it retrieves from a
Kubernetes secret, if the configured (&lt;code&gt;--k8s-secret-name&lt;/code&gt;) secret has
no &lt;code&gt;identity&lt;/code&gt; key/value pair, it will generate new private key.&lt;/p&gt;
&lt;p&gt;With this knowledge, providing your own SSH key is as simple as
creating the configured secret in the expected format.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create a Kubernetes secret from your own private key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-git-deploy --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;identity&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/full/path/to/private_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this will result in a secret that has the structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;data&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;identity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;base64 encoded RSA PRIVATE KEY&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Opaque&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(optional)&lt;/em&gt; if you created the secret with a non-default name
(default: &lt;code&gt;flux-git-deploy&lt;/code&gt;), set the &lt;code&gt;--k8s-secret-name&lt;/code&gt; flag to
the name of your secret (i.e. &lt;code&gt;--k8s-secret-name=foo&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    The SSH key must be configured to have R/W access to the
repository. More specifically, the SSH key must be able to create
and update tags. E.g. in Gitlab, that means it requires &lt;code&gt;Maintainer&lt;/code&gt;
permissions. The &lt;code&gt;Developer&lt;/code&gt; permission can create tags, but not
update them.

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Legacy: Upgrade from beta (&gt;=0.5.0) to stable (&gt;=1.0.0)</title>
      <link>/legacy/helm-operator/how-to/upgrade-to-ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/how-to/upgrade-to-ga/</guid>
      <description>
        
        
        &lt;p&gt;Due to the Flux CD project joining the CNCF Sandbox and the API
becoming stable, the Helm Operator has undergone changes that
necessitate some changes to your &lt;code&gt;HelmRelease&lt;/code&gt; resources.&lt;/p&gt;
&lt;p&gt;The central difference is that the Helm Operator now works with
resources of the kind &lt;code&gt;HelmRelease&lt;/code&gt; in the API version
&lt;code&gt;helm.fluxcd.io/v1&lt;/code&gt;, the format of the resource is backwards
compatible.&lt;/p&gt;
&lt;p&gt;Here are some things to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new operator will ignore the old custom resources (and the old
operator will ignore the new resources).&lt;/li&gt;
&lt;li&gt;Deleting a resource while the corresponding operator is running
will result in the Helm release also being deleted&lt;/li&gt;
&lt;li&gt;Deleting a &lt;code&gt;CustomResourceDefinition&lt;/code&gt; will also delete all
custom resources of that kind.&lt;/li&gt;
&lt;li&gt;If both operators are running and both new and old custom resources
defining a release, the operators will fight over the release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The safest way to upgrade is to avoid deletions and fights by stopping
the old operator. Replacing it with the new one (e.g., by changing the
deployment, or re-releasing the Flux chart with the new version) will
have that effect.&lt;/p&gt;
&lt;p&gt;Once the old operator is not running, it is safe to deploy the new
operator, and start replacing the old resources with new
resources. You can keep the old resources around during this process,
since the new operator will ignore them.&lt;/p&gt;
&lt;h2 id=&#34;updating-custom-resources&#34;&gt;Updating custom resources&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    &lt;p&gt;Once the new CRD is applied it is no longer possible to list your old
and new &lt;code&gt;HelmRelease&lt;/code&gt; resources with just
&lt;code&gt;kubectl get &amp;lt;hr|helmrelease&amp;gt;&lt;/code&gt; due to them sharing the same names. It
is however still possible to list them by their full name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Old HelmRelease resources&lt;/span&gt;
kubectl get helmreleases.flux.weave.works
&lt;p&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# New HelmRelease resources&lt;/span&gt;
kubectl get helmreleases.helm.fluxcd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;The only difference between the old resource format and the new is
the changed API version.&lt;/p&gt;
&lt;p&gt;Changing an old resource to a new resource is thus as simple as
changing the &lt;code&gt;apiVersion&lt;/code&gt; field to &lt;code&gt;helm.fluxcd.io/v1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a full example, this is an old resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux.weave.works/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foo-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@example.com:user/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new custom resource would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.fluxcd.io/v1      &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- change API version&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foo-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@example.com:user/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deleting-the-old-resources&#34;&gt;Deleting the old resources&lt;/h2&gt;
&lt;p&gt;Once you have migrated all your &lt;code&gt;HelmRelease&lt;/code&gt; resources to the new API
version and domain. You can remove all of the old resources by removing
the old Custom Resource Definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl delete crd helmreleases.flux.weave.works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Using the GitOps Toolkit APIs with Go</title>
      <link>/docs/gitops-toolkit/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/gitops-toolkit/packages/</guid>
      <description>
        
        
        &lt;p&gt;While you can use the GitOps Toolkit APIs in a declarative manner with &lt;code&gt;kubectl apply&lt;/code&gt;,
we provide client library code for all our toolkit APIs that makes it easier to access them from Go.&lt;/p&gt;
&lt;h2 id=&#34;go-packages&#34;&gt;Go Packages&lt;/h2&gt;
&lt;p&gt;The GitOps Toolkit Go modules and controllers are released by following the 
&lt;a href=&#34;https://semver.org&#34; target=&#34;_blank&#34;&gt;semver&lt;/a&gt; conventions.&lt;/p&gt;
&lt;p&gt;The API schema definitions modules have the following dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/github.com/fluxcd/pkg/apis/meta&#34; target=&#34;_blank&#34;&gt;github.com/fluxcd/pkg/apis/meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/github.com/fluxcd/pkg/runtime&#34; target=&#34;_blank&#34;&gt;github.com/fluxcd/pkg/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/k8s.io/apimachinery&#34; target=&#34;_blank&#34;&gt;k8s.io/apimachinery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/sigs.k8s.io/controller-runtime&#34; target=&#34;_blank&#34;&gt;sigs.k8s.io/controller-runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The APIs can be consumed with the 
&lt;a href=&#34;https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/client&#34; target=&#34;_blank&#34;&gt;controller-runtime client&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sourcetoolkitfluxcdio&#34;&gt;source.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/source-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;GitRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/helmrepositories.md&#34;&gt;HelmRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/helmcharts.md&#34;&gt;HelmChart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/buckets.md&#34;&gt;Bucket&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;kustomizetoolkitfluxcdio&#34;&gt;kustomize.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/kustomize-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; kustomizev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/kustomize-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/kustomize/kustomization.md&#34;&gt;Kustomization&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;helmtoolkitfluxcdio&#34;&gt;helm.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/helm-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/helm-controller/api/v2beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/helm/helmreleases.md&#34;&gt;HelmRelease&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v2beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notificationtoolkitfluxcdio&#34;&gt;notification.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/notification-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/notification-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/receiver.md&#34;&gt;Receiver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/provider.md&#34;&gt;Provider&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/alert.md&#34;&gt;Alert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;imagetoolkitfluxcdio&#34;&gt;image.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/image-reflector-controller/api
go get github.com/fluxcd/imame-automation-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	imagev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/image-reflector-controller/api/v1alpha2&amp;#34;&lt;/span&gt;
	autov1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/image-automation-controller/api/v1alpha2&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imagerepositories.md&#34;&gt;ImageRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imagepolicies.md&#34;&gt;ImagePolicy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imageupdateautomations.md&#34;&gt;ImageUpdateAutomation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;crud-example&#34;&gt;CRUD Example&lt;/h2&gt;
&lt;p&gt;Here is an example of how to create a Helm release, wait for it to install, then delete it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

  apiextensionsv1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/api/meta&amp;#34;&lt;/span&gt;
  metav1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/runtime&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/types&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/util/wait&amp;#34;&lt;/span&gt;
  _ &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/client-go/plugin/pkg/client/auth&amp;#34;&lt;/span&gt;
  ctrl &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;sigs.k8s.io/controller-runtime&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;sigs.k8s.io/controller-runtime/pkg/client&amp;#34;&lt;/span&gt;

  helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/helm-controller/api/v2beta1&amp;#34;&lt;/span&gt;
  apimeta &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/pkg/apis/meta&amp;#34;&lt;/span&gt;
  sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// register the GitOps Toolkit schema definitions
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  scheme &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; runtime.&lt;span style=&#34;color:#06287e&#34;&gt;NewScheme&lt;/span&gt;()
  _ = sourcev1.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)
  _ = helmv2.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// init Kubernetes client
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  kubeClient, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; client.&lt;span style=&#34;color:#06287e&#34;&gt;New&lt;/span&gt;(ctrl.&lt;span style=&#34;color:#06287e&#34;&gt;GetConfigOrDie&lt;/span&gt;(), client.Options{Scheme: scheme})
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#007020&#34;&gt;panic&lt;/span&gt;(err)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// set a deadline for the Kubernetes API operations
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  ctx, cancel &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#06287e&#34;&gt;WithTimeout&lt;/span&gt;(context.&lt;span style=&#34;color:#06287e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Second)
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;cancel&lt;/span&gt;()

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create a Helm repository pointing to Bitnami
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  helmRepository &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;sourcev1.HelmRepository{
    ObjectMeta: metav1.ObjectMeta{
      Name:      &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bitnami&amp;#34;&lt;/span&gt;,
      Namespace: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
    },
    Spec: sourcev1.HelmRepositorySpec{
      URL: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;https://charts.bitnami.com/bitnami&amp;#34;&lt;/span&gt;,
      Interval: metav1.Duration{
        Duration: &lt;span style=&#34;color:#40a070&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Minute,
      },
    },
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Create&lt;/span&gt;(ctx, helmRepository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  } &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;HelmRepository bitnami created&amp;#34;&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create a Helm release for nginx
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  helmRelease &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;helmv2.HelmRelease{
    ObjectMeta: metav1.ObjectMeta{
      Name:      &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
      Namespace: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
    },
    Spec: helmv2.HelmReleaseSpec{
      ReleaseName: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
      Interval: metav1.Duration{
        Duration: &lt;span style=&#34;color:#40a070&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; time.Minute,
      },
      Chart: helmv2.HelmChartTemplate{
        Spec: helmv2.HelmChartTemplateSpec{
          Chart:   &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
          Version: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;8.x&amp;#34;&lt;/span&gt;,
          SourceRef: helmv2.CrossNamespaceObjectReference{
            Kind: sourcev1.HelmRepositoryKind,
            Name: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bitnami&amp;#34;&lt;/span&gt;,
          },
        },
      },
      Values: &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;apiextensionsv1.JSON{Raw: []&lt;span style=&#34;color:#007020&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;`{&amp;#34;service&amp;#34;: {&amp;#34;type&amp;#34;: &amp;#34;ClusterIP&amp;#34;}}`&lt;/span&gt;)},
    },
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Create&lt;/span&gt;(ctx, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  } &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;HelmRelease nginx created&amp;#34;&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// wait for the a Helm release to be reconciled
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Waiting for nginx to be installed&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; wait.&lt;span style=&#34;color:#06287e&#34;&gt;PollImmediate&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Second, &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Minute,
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt;() (done &lt;span style=&#34;color:#902000&#34;&gt;bool&lt;/span&gt;, err &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt;) {
      namespacedName &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; types.NamespacedName{
        Namespace: helmRelease.&lt;span style=&#34;color:#06287e&#34;&gt;GetNamespace&lt;/span&gt;(),
        Name:      helmRelease.&lt;span style=&#34;color:#06287e&#34;&gt;GetName&lt;/span&gt;(),
      }
      &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Get&lt;/span&gt;(ctx, namespacedName, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;false&lt;/span&gt;, err
      }
      &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; meta.&lt;span style=&#34;color:#06287e&#34;&gt;IsStatusConditionTrue&lt;/span&gt;(helmRelease.Status.Conditions, apimeta.ReadyCondition), &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// print the reconciliation status
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(meta.&lt;span style=&#34;color:#06287e&#34;&gt;FindStatusCondition&lt;/span&gt;(helmRelease.Status.Conditions, apimeta.ReadyCondition).Message)

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// uninstall the release and delete the repository
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Delete&lt;/span&gt;(ctx, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Delete&lt;/span&gt;(ctx, helmRepository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }
  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Helm repository and release deleted&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For an example on how to build a Kubernetes controller that interacts with the GitOps Toolkit APIs see

&lt;a href=&#34;/docs/gitops-toolkit/source-watcher/&#34;&gt;source-watcher&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using the GitOps Toolkit APIs with Go</title>
      <link>/docs/gitops/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/gitops/packages/</guid>
      <description>
        
        
        &lt;p&gt;While you can use the GitOps Toolkit APIs in a declarative manner with &lt;code&gt;kubectl apply&lt;/code&gt;,
we provide client library code for all our toolkit APIs that makes it easier to access them from Go.&lt;/p&gt;
&lt;h2 id=&#34;go-packages&#34;&gt;Go Packages&lt;/h2&gt;
&lt;p&gt;The GitOps Toolkit Go modules and controllers are released by following the 
&lt;a href=&#34;https://semver.org&#34; target=&#34;_blank&#34;&gt;semver&lt;/a&gt; conventions.&lt;/p&gt;
&lt;p&gt;The API schema definitions modules have the following dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/github.com/fluxcd/pkg/apis/meta&#34; target=&#34;_blank&#34;&gt;github.com/fluxcd/pkg/apis/meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/github.com/fluxcd/pkg/runtime&#34; target=&#34;_blank&#34;&gt;github.com/fluxcd/pkg/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/k8s.io/apimachinery&#34; target=&#34;_blank&#34;&gt;k8s.io/apimachinery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pkg.go.dev/sigs.k8s.io/controller-runtime&#34; target=&#34;_blank&#34;&gt;sigs.k8s.io/controller-runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The APIs can be consumed with the 
&lt;a href=&#34;https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/client&#34; target=&#34;_blank&#34;&gt;controller-runtime client&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sourcetoolkitfluxcdio&#34;&gt;source.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/source-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;GitRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/helmrepositories.md&#34;&gt;HelmRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/helmcharts.md&#34;&gt;HelmChart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/source/buckets.md&#34;&gt;Bucket&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;kustomizetoolkitfluxcdio&#34;&gt;kustomize.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/kustomize-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; kustomizev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/kustomize-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/kustomize/kustomization.md&#34;&gt;Kustomization&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;helmtoolkitfluxcdio&#34;&gt;helm.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/helm-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/helm-controller/api/v2beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/helm/helmreleases.md&#34;&gt;HelmRelease&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v2beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notificationtoolkitfluxcdio&#34;&gt;notification.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/notification-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/notification-controller/api/v1beta1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/receiver.md&#34;&gt;Receiver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/provider.md&#34;&gt;Provider&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/notification/alert.md&#34;&gt;Alert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;imagetoolkitfluxcdio&#34;&gt;image.toolkit.fluxcd.io&lt;/h3&gt;
&lt;p&gt;Download package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/fluxcd/image-reflector-controller/api
go get github.com/fluxcd/imame-automation-controller/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	imagev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/image-reflector-controller/api/v1alpha2&amp;#34;&lt;/span&gt;
	autov1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/image-automation-controller/api/v1alpha2&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Types&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imagerepositories.md&#34;&gt;ImageRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imagepolicies.md&#34;&gt;ImagePolicy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&#34;../components/image/imageupdateautomations.md&#34;&gt;ImageUpdateAutomation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;crud-example&#34;&gt;CRUD Example&lt;/h2&gt;
&lt;p&gt;Here is an example of how to create a Helm release, wait for it to install, then delete it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

  apiextensionsv1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/api/meta&amp;#34;&lt;/span&gt;
  metav1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/runtime&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/types&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/util/wait&amp;#34;&lt;/span&gt;
  _ &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/client-go/plugin/pkg/client/auth&amp;#34;&lt;/span&gt;
  ctrl &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;sigs.k8s.io/controller-runtime&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;sigs.k8s.io/controller-runtime/pkg/client&amp;#34;&lt;/span&gt;

  helmv2 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/helm-controller/api/v2beta1&amp;#34;&lt;/span&gt;
  apimeta &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/pkg/apis/meta&amp;#34;&lt;/span&gt;
  sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// register the GitOps Toolkit schema definitions
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  scheme &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; runtime.&lt;span style=&#34;color:#06287e&#34;&gt;NewScheme&lt;/span&gt;()
  _ = sourcev1.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)
  _ = helmv2.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// init Kubernetes client
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  kubeClient, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; client.&lt;span style=&#34;color:#06287e&#34;&gt;New&lt;/span&gt;(ctrl.&lt;span style=&#34;color:#06287e&#34;&gt;GetConfigOrDie&lt;/span&gt;(), client.Options{Scheme: scheme})
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#007020&#34;&gt;panic&lt;/span&gt;(err)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// set a deadline for the Kubernetes API operations
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  ctx, cancel &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#06287e&#34;&gt;WithTimeout&lt;/span&gt;(context.&lt;span style=&#34;color:#06287e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#40a070&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Second)
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;cancel&lt;/span&gt;()

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create a Helm repository pointing to Bitnami
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  helmRepository &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;sourcev1.HelmRepository{
    ObjectMeta: metav1.ObjectMeta{
      Name:      &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bitnami&amp;#34;&lt;/span&gt;,
      Namespace: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
    },
    Spec: sourcev1.HelmRepositorySpec{
      URL: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;https://charts.bitnami.com/bitnami&amp;#34;&lt;/span&gt;,
      Interval: metav1.Duration{
        Duration: &lt;span style=&#34;color:#40a070&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Minute,
      },
    },
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Create&lt;/span&gt;(ctx, helmRepository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  } &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;HelmRepository bitnami created&amp;#34;&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create a Helm release for nginx
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  helmRelease &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;helmv2.HelmRelease{
    ObjectMeta: metav1.ObjectMeta{
      Name:      &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
      Namespace: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
    },
    Spec: helmv2.HelmReleaseSpec{
      ReleaseName: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
      Interval: metav1.Duration{
        Duration: &lt;span style=&#34;color:#40a070&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; time.Minute,
      },
      Chart: helmv2.HelmChartTemplate{
        Spec: helmv2.HelmChartTemplateSpec{
          Chart:   &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;,
          Version: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;8.x&amp;#34;&lt;/span&gt;,
          SourceRef: helmv2.CrossNamespaceObjectReference{
            Kind: sourcev1.HelmRepositoryKind,
            Name: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bitnami&amp;#34;&lt;/span&gt;,
          },
        },
      },
      Values: &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;apiextensionsv1.JSON{Raw: []&lt;span style=&#34;color:#007020&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;`{&amp;#34;service&amp;#34;: {&amp;#34;type&amp;#34;: &amp;#34;ClusterIP&amp;#34;}}`&lt;/span&gt;)},
    },
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Create&lt;/span&gt;(ctx, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  } &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;HelmRelease nginx created&amp;#34;&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// wait for the a Helm release to be reconciled
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Waiting for nginx to be installed&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; wait.&lt;span style=&#34;color:#06287e&#34;&gt;PollImmediate&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Second, &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;time.Minute,
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt;() (done &lt;span style=&#34;color:#902000&#34;&gt;bool&lt;/span&gt;, err &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt;) {
      namespacedName &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; types.NamespacedName{
        Namespace: helmRelease.&lt;span style=&#34;color:#06287e&#34;&gt;GetNamespace&lt;/span&gt;(),
        Name:      helmRelease.&lt;span style=&#34;color:#06287e&#34;&gt;GetName&lt;/span&gt;(),
      }
      &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Get&lt;/span&gt;(ctx, namespacedName, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;false&lt;/span&gt;, err
      }
      &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; meta.&lt;span style=&#34;color:#06287e&#34;&gt;IsStatusConditionTrue&lt;/span&gt;(helmRelease.Status.Conditions, apimeta.ReadyCondition), &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// print the reconciliation status
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(meta.&lt;span style=&#34;color:#06287e&#34;&gt;FindStatusCondition&lt;/span&gt;(helmRelease.Status.Conditions, apimeta.ReadyCondition).Message)

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// uninstall the release and delete the repository
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Delete&lt;/span&gt;(ctx, helmRelease); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }
  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; kubeClient.&lt;span style=&#34;color:#06287e&#34;&gt;Delete&lt;/span&gt;(ctx, helmRepository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(err)
  }
  fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Helm repository and release deleted&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For an example on how to build a Kubernetes controller that interacts with the GitOps Toolkit APIs see

&lt;a href=&#34;/docs/gitops/source-watcher/&#34;&gt;source-watcher&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Ways of structuring your repositories</title>
      <link>/docs/iac/repository-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iac/repository-structure/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through several approaches of organizing repositories
for a smooth GitOps experience with Flux.&lt;/p&gt;
&lt;h2 id=&#34;monorepo&#34;&gt;Monorepo&lt;/h2&gt;
&lt;p&gt;In a monorepo approach you would store all your Kubernetes manifests in a single Git repository.
The various environments specific configs are all stored in the same branch (e.g. &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;repository-structure&#34;&gt;Repository structure&lt;/h3&gt;
&lt;p&gt;Example structure (kustomize overlays):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;├── apps
│   ├── base
│   ├── production 
│   └── staging
├── infrastructure
│   ├── base
│   ├── production 
│   └── staging
└── clusters
    ├── production
    └── staging
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each cluster state is defined in a dedicated dir e.g. &lt;code&gt;clusters/production&lt;/code&gt;
where the specific apps and infrastructure overlays are referenced.&lt;/p&gt;
&lt;p&gt;The separation between apps and infrastructure makes it possible to
define the order in which a cluster is reconciled, e.g.
first the cluster addons and other Kubernetes controllers,
then the applications.&lt;/p&gt;
&lt;p&gt;A complete example of this approach can be found at

&lt;a href=&#34;https://github.com/fluxcd/flux2-kustomize-helm-example&#34; target=&#34;_blank&#34;&gt;flux2-kustomize-helm-example&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;delivery-management&#34;&gt;Delivery management&lt;/h3&gt;
&lt;p&gt;In trunk-based development, the changes are made in small batches and
are merged into the &lt;code&gt;main&lt;/code&gt; branch often. Besides &lt;code&gt;main&lt;/code&gt;, branches are short-lived,
once a pull request is merged, the branch gets deleted.&lt;/p&gt;
&lt;p&gt;New app release can be automatically delivered to staging using Flux&amp;rsquo;s 
&lt;a href=&#34;/docs/iac/image-update/&#34;&gt;image updates to Git&lt;/a&gt;.
For production, you may choose to manually approve app version bumps by configuring Flux
to push the changes to a new branch from which you can create a pull request.
You can limit the impact of an issue that escaped staging testing by using Flagger&amp;rsquo;s

&lt;a href=&#34;https://docs.flagger.app/&#34; target=&#34;_blank&#34;&gt;canary releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Changes to infrastructure can be disruptive and could cause cluster-wide outages.
These config changes can be made in steps, first you merge a change to staging,
when the cluster is successfully reconciled, and the new cluster state passes conformance tests,
you then promote the change to production. The promotion process is gated by PR reviews
and end-to-end testing.&lt;/p&gt;
&lt;h2 id=&#34;repo-per-environment&#34;&gt;Repo per environment&lt;/h2&gt;
&lt;p&gt;This approach is similar to the 
&lt;a href=&#34;#monorepo&#34;&gt;monorepo&lt;/a&gt;, with some notable differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the monorepo approach all team members can read the production config since Git is not designed to restrict access
to certain files in a repository. Having a separate repository for production means that you can grant access to
a subset of team members while allowing everyone to clone staging and open pull requests.&lt;/li&gt;
&lt;li&gt;Promoting changes from one environment to another can be more time-consuming especially for infrastructure changes
that can&amp;rsquo;t be automated with Flux image updates.&lt;/li&gt;
&lt;li&gt;When using the same repository for all environments, unintentional changes to production are harder to spot,
especially for large pull requests. Having a dedicated production repository, limits the scope of changes
and makes the review process less error prone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;repo-per-team&#34;&gt;Repo per team&lt;/h2&gt;
&lt;p&gt;Assuming your organization has a dedicated platform admin team that provides Kubernetes as-a-service for other teams.&lt;/p&gt;
&lt;p&gt;The platform admin team is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up the staging and production environments.&lt;/li&gt;
&lt;li&gt;Maintains the cluster addon-ons and other cluster-wide resources (CRDs, controllers, admission webhooks, etc).&lt;/li&gt;
&lt;li&gt;Onboards the dev teams repositories using Flux&amp;rsquo;s &lt;code&gt;GitRepository&lt;/code&gt; custom resources.&lt;/li&gt;
&lt;li&gt;Configures how the dev teams repositories are reconciled on each cluster using Flux&amp;rsquo;s &lt;code&gt;Kustomization&lt;/code&gt; custom resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dev teams are responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up the apps definitions (Kubernetes deployments, Helm releases).&lt;/li&gt;
&lt;li&gt;Configures how the apps are reconciled on each environment (Kustomize overlays, Helm values).&lt;/li&gt;
&lt;li&gt;Manages the apps promotion between environments using Flux&amp;rsquo;s automated image updates to Git.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repository-structure-1&#34;&gt;Repository structure&lt;/h3&gt;
&lt;p&gt;Platform admin repository example (kustomize overlays):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;├── teams
│   ├── team1
│   ├── team2
├── infrastructure
│   ├── base
│   ├── production 
│   └── staging
└── clusters
    ├── production
    └── staging
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dev team repository example (kustomize overlays):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;└── apps
    ├── base
    ├── production 
    └── staging
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A complete example of this approach can be found at

&lt;a href=&#34;https://github.com/fluxcd/flux2-multi-tenancy&#34; target=&#34;_blank&#34;&gt;flux2-multi-tenancy&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;delivery&#34;&gt;Delivery&lt;/h3&gt;
&lt;p&gt;The delivery process is similar to the 
&lt;a href=&#34;#delivery-management&#34;&gt;monorepo&lt;/a&gt; one. The main difference is the
separation of concerns, the platform admin team handles the change management of the infrastructure,
but delegates the apps delivery to the dev teams.&lt;/p&gt;
&lt;h2 id=&#34;repo-per-app&#34;&gt;Repo per app&lt;/h2&gt;
&lt;p&gt;It is common to use the same repository to store both the application source code and its deployment manifests.
The deployment manifests from an app repo can serve as the base config for both the

&lt;a href=&#34;#monorepo&#34;&gt;monorepo&lt;/a&gt; and the 
&lt;a href=&#34;#repo-per-team&#34;&gt;repo-per-team&lt;/a&gt; approaches.&lt;/p&gt;
&lt;p&gt;Instead of duplicating the deployment manifests between the app repo and the cluster(s) config repo,
the config repo can hold a &lt;em&gt;pointer&lt;/em&gt; to the app manifests.&lt;/p&gt;
&lt;p&gt;Inside the config repo you can define a &lt;code&gt;GitRepository&lt;/code&gt; that tells Flux to clone the app repo inside the cluster,
then with a &lt;code&gt;Kustomization&lt;/code&gt;, you can tell Flux which directory holds the app manifests and how to patch
them based on the target environment.&lt;/p&gt;
&lt;p&gt;Another option is to bundle the app manifests into a Helm chart and publish it to a Helm repository.
In the config repo you can define the &lt;code&gt;HelmRepository&lt;/code&gt; and create an app &lt;code&gt;HelmRelease&lt;/code&gt; for each
target environment.&lt;/p&gt;
&lt;h3 id=&#34;repository-structure-2&#34;&gt;Repository structure&lt;/h3&gt;
&lt;p&gt;App repository plain Kubernetes manifests example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;├── src
└── deploy
    └── manifests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delivery example (stored in config repo):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;semver&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;1.x&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./deploy/manifests&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;App repository Kustomize overlays example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;├── src
└── deploy
    ├── base
    ├── production 
    └── staging
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delivery example (stored in config repo):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;branch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;main&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./deploy/production&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;App repository Helm chart example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;├── src
└── chart
    ├── templates
    ├── values.yaml 
    └── values-prod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delivery example (stored in config repo):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/charts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;1.x&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 核心概念</title>
      <link>/docs/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/</guid>
      <description>
        
        
        &lt;p&gt;DevOps 是一个庞大的理念和实践体系，核心概念如下。&lt;/p&gt;
&lt;h2 id=&#34;gitops&#34;&gt;GitOps&lt;/h2&gt;
&lt;p&gt;GitOps is a way of managing your infrastructure and applications so that whole system
is described declaratively and version controlled (most likely in a Git repository),
and having an automated process that ensures that the deployed environment
matches the state specified in a repository.&lt;/p&gt;
&lt;p&gt;For more information, take a look at 
&lt;a href=&#34;https://www.gitops.tech/#what-is-gitops&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;What is GitOps?&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;Source&lt;/em&gt; defines the origin of a repository containing the desired state of
the system and the requirements to obtain it (e.g. credentials, version selectors).
For example, the latest &lt;code&gt;1.x&lt;/code&gt; tag available from a Git repository over SSH.&lt;/p&gt;
&lt;p&gt;Sources produce an artifact that is consumed by other Flux components to perform
actions, like applying the contents of the artifact on the cluster. A source
may be shared by multiple consumers to deduplicate configuration and/or storage.&lt;/p&gt;
&lt;p&gt;The origin of the source is checked for changes on a defined interval, if
there is a newer version available that matches the criteria, a new artifact
is produced.&lt;/p&gt;
&lt;p&gt;All sources are specified as Custom Resources in a Kubernetes cluster, examples
of sources are &lt;code&gt;GitRepository&lt;/code&gt;, &lt;code&gt;HelmRepository&lt;/code&gt; and &lt;code&gt;Bucket&lt;/code&gt; resources.&lt;/p&gt;
&lt;p&gt;For more information, take a look at

&lt;a href=&#34;components/source/_index.md&#34;&gt;the source controller documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reconciliation&#34;&gt;Reconciliation&lt;/h2&gt;
&lt;p&gt;Reconciliation refers to ensuring that a given state (e.g. application running in the cluster, infrastructure)
matches a desired state declaratively defined somewhere (e.g. a Git repository).&lt;/p&gt;
&lt;p&gt;There are various examples of these in Flux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HelmRelease&lt;/code&gt; reconciliation: ensures the state of the Helm release matches what is defined in the resource,
performs a release if this is not the case (including revision changes of a HelmChart resource).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bucket&lt;/code&gt; reconciliation: downloads and archives the contents of the declared bucket on a given
interval and stores this as an artifact, records the observed revision of the artifact
and the artifact itself in the status of resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kustomization&lt;/code&gt; reconciliation: ensures the state of the application
deployed on a cluster matches the resources defined in a Git repository or S3 bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kustomization&#34;&gt;Kustomization&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Kustomization&lt;/code&gt; custom resource represents a local set of Kubernetes resources
(e.g. kustomize overlay) that Flux is supposed to reconcile in the cluster.
The reconciliation runs every one minute by default, but this can be changed with &lt;code&gt;.spec.interval&lt;/code&gt;.
If you make any changes to the cluster using &lt;code&gt;kubectl edit/patch/delete&lt;/code&gt;,
they will be promptly reverted. You either suspend the reconciliation or push your changes to a Git repository.&lt;/p&gt;
&lt;p&gt;For more information, take a look at the 
&lt;a href=&#34;/docs/faq/#kustomize-questions&#34;&gt;Kustomize FAQ&lt;/a&gt;
and the 
&lt;a href=&#34;components/kustomize/kustomization.md&#34;&gt;Kustomization CRD&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h2&gt;
&lt;p&gt;The process of installing the Flux components in a GitOps manner is called a bootstrap.
The manifests are applied to the cluster, a &lt;code&gt;GitRepository&lt;/code&gt; and &lt;code&gt;Kustomization&lt;/code&gt;
are created for the Flux components, then the manifests are pushed to an existing Git repository
(or a new one is created). Flux can manage itself just as it manages other resources.
The bootstrap is done using the &lt;code&gt;flux&lt;/code&gt; CLI or
using our 
&lt;a href=&#34;https://github.com/fluxcd/terraform-provider-flux&#34; target=&#34;_blank&#34;&gt;Terraform Provider&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information, take a look at 
&lt;a href=&#34;installation/_index.md#bootstrap&#34;&gt;the bootstrap documentation&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Building</title>
      <link>/legacy/helm-operator/contributing/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/contributing/building/</guid>
      <description>
        
        
        &lt;p&gt;You&amp;rsquo;ll need a working &lt;code&gt;go&lt;/code&gt; environment version &amp;gt;= 1.11 (official releases are built against &lt;code&gt;1.14.x&lt;/code&gt;).
It&amp;rsquo;s also expected that you have a Docker daemon for building images.&lt;/p&gt;
&lt;p&gt;Clone the repository. The project uses 
&lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34; target=&#34;_blank&#34;&gt;Go Modules&lt;/a&gt;,
so if you explicitly define &lt;code&gt;$GOPATH&lt;/code&gt; you should clone somewhere else.&lt;/p&gt;
&lt;p&gt;Then, from the root directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes Docker images, and installs binaries to &lt;code&gt;$GOBIN&lt;/code&gt; (if you define it) or &lt;code&gt;$(go env GOPATH)/bin&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the default target architecture is amd64. If you would like
to try to build Docker images and binaries for a different
architecture you will have to set ARCH variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ make &lt;span style=&#34;color:#bb60d5&#34;&gt;ARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;target_arch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;running-tests&#34;&gt;Running tests&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Unit tests&lt;/span&gt;
make &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt;

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# End-to-end tests, acceptable Helm versions are v2,v3&lt;/span&gt;
make e2e &lt;span style=&#34;color:#bb60d5&#34;&gt;HELM_VERSION&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;version&amp;gt;

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Run specific end-to-end test&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;E2E_TESTS&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;./10_helm_chart.bats &lt;span style=&#34;color:#bb60d5&#34;&gt;HELM_VERSION&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v2 make e2e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For e2e tests to work on macOS, you may need to install some dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install bash
brew install parallel
brew install coreutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Building</title>
      <link>/legacy/flux/contributing/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/contributing/building/</guid>
      <description>
        
        
        &lt;p&gt;You&amp;rsquo;ll need a working &lt;code&gt;go&lt;/code&gt; environment version &amp;gt;= 1.11 (official releases are built against &lt;code&gt;1.13&lt;/code&gt;).
It&amp;rsquo;s also expected that you have a Docker daemon for building images.&lt;/p&gt;
&lt;p&gt;Clone the repository. The project uses 
&lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34; target=&#34;_blank&#34;&gt;Go Modules&lt;/a&gt;,
so if you explicitly define &lt;code&gt;$GOPATH&lt;/code&gt; you should clone somewhere else.&lt;/p&gt;
&lt;p&gt;Then, from the root directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes Docker images, and installs binaries to &lt;code&gt;$GOBIN&lt;/code&gt; (if you define it) or &lt;code&gt;$(go env GOPATH)/bin&lt;/code&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;The default target architecture is amd64. If you would like
to try to build Docker images and binaries for a different
architecture you will have to set ARCH variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make &lt;span style=&#34;color:#bb60d5&#34;&gt;ARCH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;target_arch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&#34;running-tests&#34;&gt;Running tests&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Unit tests&lt;/span&gt;
make &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt;

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# End-to-end tests&lt;/span&gt;
make e2e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Chart sources</title>
      <link>/legacy/helm-operator/helmrelease-guide/chart-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/helmrelease-guide/chart-sources/</guid>
      <description>
        
        
        &lt;p&gt;In the introduction we created a simple &lt;code&gt;HelmRelease&lt;/code&gt; that made use of a chart
from a Helm repository, but the Helm Operator does support multiple chart
sources, and virtually any protocol and/or source that can be shelled-in
through a 
&lt;a href=&#34;#extending-the-supported-helm-repository-protocols&#34;&gt;Helm downloader plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this section of the guide we will take a deeper dive into the available
chart sources, and the unique features they have.&lt;/p&gt;
&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;
&lt;p&gt;The following are short lists of the major characteristics of the different
chart sources. Keep these in mind when you have to make a decision about what
type of chart source to use for your &lt;code&gt;HelmRelease&lt;/code&gt;, as they result in quite
different behaviour.&lt;/p&gt;
&lt;h3 id=&#34;charts-from-helm-repositorieshelm-repositories&#34;&gt;Charts from 
&lt;a href=&#34;#helm-repositories&#34;&gt;Helm repositories&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Are immutable and non-moving (i.e. no updates for the chart itself are
received unless the &lt;code&gt;.chart.version&lt;/code&gt; is changed).&lt;/li&gt;
&lt;li&gt;Are cached for the lifetime duration of the Helm Operator pod.&lt;/li&gt;
&lt;li&gt;Are shared between &lt;code&gt;HelmRelease&lt;/code&gt; resources making use of the same chart
and version.&lt;/li&gt;
&lt;li&gt;Require a custom &lt;code&gt;repositories.yaml&lt;/code&gt; to be 
&lt;a href=&#34;#authentication-and-certificates&#34;&gt;mounted and imported&lt;/a&gt;
when authentication is required.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#extending-the-supported-helm-repository-protocols&#34;&gt;Are not just limited to HTTP/S&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do not support&lt;/em&gt; chart dependency updates (but instead use the dependencies
bundled with the chart).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do not support&lt;/em&gt; &lt;code&gt;valuesFrom.chartFileRef&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;charts-from-git-repositoriesgit-repositories&#34;&gt;Charts from 
&lt;a href=&#34;#git-repositories&#34;&gt;Git repositories&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Move by mirroring the Git repository and fetching the latest &lt;code&gt;HEAD&lt;/code&gt; for the
configured &lt;code&gt;.chart.ref&lt;/code&gt; on an interval (i.e. when a change is detected in
Git under the &lt;code&gt;.chart.path&lt;/code&gt;, a release will be scheduled for an upgrade).&lt;/li&gt;
&lt;li&gt;Share their Git repository mirror with &lt;code&gt;HelmRelease&lt;/code&gt; resources making use
of the same &lt;code&gt;.chart.git&lt;/code&gt;, &lt;code&gt;.chart.ref&lt;/code&gt; and &lt;code&gt;.chart.secretKeyRef&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Require a 
&lt;a href=&#34;#ssh&#34;&gt;private key to be mounted for Git over SSH&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support credentials from a secret or a global &lt;code&gt;.netrc&lt;/code&gt; file for 
&lt;a href=&#34;#https&#34;&gt;Git over
HTTPS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do support&lt;/em&gt; 
&lt;a href=&#34;#dependency-updates&#34;&gt;chart dependency updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do support&lt;/em&gt; 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/values/#chart-files&#34;&gt;&lt;code&gt;valuesFrom.chartFileRef&lt;/code&gt;&lt;/a&gt; to make use
of alternative value files present in the &lt;code&gt;.chart.path&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;helm-repositories&#34;&gt;Helm repositories&lt;/h2&gt;
&lt;p&gt;The Helm repository chart source is defined as follows in the &lt;code&gt;.spec&lt;/code&gt; of a
&lt;code&gt;HelmRelease&lt;/code&gt;. All listed fields are mandatory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://stefanprodan.github.io/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;3.2.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repository&lt;/code&gt;: The URL of the Helm repository, e.g. &lt;code&gt;https://kubernetes-charts.storage.googleapis.com&lt;/code&gt;
or &lt;code&gt;https://charts.example.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Putting &lt;code&gt;/index.yaml&lt;/code&gt; behind the URL it should return an index file with all
available charts for the Helm repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;: The name of the Helm chart &lt;em&gt;without&lt;/em&gt; an alias, e.g. &lt;code&gt;podinfo&lt;/code&gt;
(instead of &lt;code&gt;&amp;lt;alias&amp;gt;/podinfo&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Having doubts about what to put here? Use the &lt;code&gt;name&lt;/code&gt; as listed in the
&lt;code&gt;Chart.yaml&lt;/code&gt; of the Helm chart you want to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;version&lt;/code&gt;: The targeted Helm chart version, e.g. &lt;code&gt;3.2.0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/introduction/&#34;&gt;introduction&lt;/a&gt; you already had a brief exposure to this
chart source, and in essence Helm repositories are the simplest way to make use
of a Helm chart in a &lt;code&gt;HelmRelease&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be able to perform releases with them the Helm Operator only makes use of
native Helm features and a tiny bit of glue to wire things together:&lt;/p&gt;
&lt;p&gt;It will first attempt a reverse lookup for a repository alias in the local
&lt;code&gt;repositories.yaml&lt;/code&gt; for the defined &lt;code&gt;repository&lt;/code&gt; URL, if an alias is found it
will use this alias with the given &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; to instruct Helm to
fetch the chart to a cache path defined by the Helm Operator.&lt;/p&gt;
&lt;p&gt;If the reverse lookup failed and no alias was found for the given URL it will
fallback to attempting to retrieve the absolute URL of the chart from the index
of the given &lt;code&gt;repository&lt;/code&gt; URL, this URL is then used to instruct Helm to fetch
the chart to a cache path defined by the Helm Operator.&lt;/p&gt;
&lt;p&gt;When this does not succeed either a status condition of type &lt;code&gt;ChartFetched&lt;/code&gt;
will be recorded on the &lt;code&gt;HelmRelease&lt;/code&gt; resource with the returned error.&lt;/p&gt;
&lt;h3 id=&#34;authentication-and-certificates&#34;&gt;Authentication and certificates&lt;/h3&gt;
&lt;p&gt;Some Helm repositories require authentication or certificates before you are
able to make use of any charts they hold. At present, per-resource
authentication is not implemented for Helm repositories. The &lt;code&gt;HelmRelease&lt;/code&gt;
Custom Resource does include a field &lt;code&gt;chartPullSecret&lt;/code&gt; for attaching a
&lt;code&gt;repositories.yaml&lt;/code&gt; file, but this has not been actually implemented.&lt;/p&gt;
&lt;p&gt;As a workaround, you can mount a &lt;code&gt;repositories.yaml&lt;/code&gt; file with authentication
already configured (and any required certificates) into the Helm Operator
container, and import it using the &lt;code&gt;--helm-repository-import&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;First, create a new empty &lt;code&gt;repositories.yaml&lt;/code&gt; file &lt;em&gt;locally&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;touch repositories.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now use &lt;code&gt;helm&lt;/code&gt; to write the repository entry to this new file. Using
Helm 3 for this is the best option as it offers a &lt;code&gt;--repository-config&lt;/code&gt; flag
and the generated output works for both versions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm repo add &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --repository-config &lt;span style=&#34;color:#bb60d5&#34;&gt;$PWD&lt;/span&gt;/repositories.yaml &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --username &amp;lt;username&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --password &amp;lt;password&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    &amp;lt;alias&amp;gt; &amp;lt;URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    For Azure ACR repositories, you will need to 
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auth-service-principal#create-a-service-principal&#34; target=&#34;_blank&#34;&gt;create a service
principal&lt;/a&gt;
and use the plain text ID and password this gives you.

&lt;/div&gt;

&lt;p&gt;If you need to define any certificates, edit the respective &lt;code&gt;caFile&lt;/code&gt;, &lt;code&gt;certFile&lt;/code&gt;
and &lt;code&gt;keyFile&lt;/code&gt; values of the entry you just added to the mount paths you will
later add to the Helm Operator &lt;em&gt;container&lt;/em&gt;  (example path used here is
&lt;code&gt;/var/certs/*&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;caFile&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/var/certs/ca.crt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;certFile&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/var/certs/cert.crt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;keyFile&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/var/certs/auth.key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;alias&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can create a secret in the same namespace as you are running the Helm
operator, from the repositories file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-helm-repositories &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$PWD&lt;/span&gt;/repositories.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you defined any certificate entries, also create a secret for those
files in the same namespace as you are running the Helm Operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-helm-repository-certs &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$PWD&lt;/span&gt;/ca.crt &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$PWD&lt;/span&gt;/cert.crt &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$PWD&lt;/span&gt;/auth.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mount the created secret(s) by adding to &lt;code&gt;volumes&lt;/code&gt; in the pod spec of the Helm
operator deployment, and &lt;code&gt;volumeMounts&lt;/code&gt; of the Helm Operator container. A good
mount path for the &lt;code&gt;repositories.yaml&lt;/code&gt; file that does not give conflicts with
any Helm paths is &lt;code&gt;/root/.helm/repository/repositories.yaml&lt;/code&gt;. Examples of this
can be found in the commented-out sections of the 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/blob/1.2.0/deploy/deployment.yaml&#34; target=&#34;_blank&#34;&gt;example
deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, configure the &lt;code&gt;--helm-repository-import&lt;/code&gt; argument on the Helm Operator
container for your enabled Helm versions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- --helm-repository-import=v2:/root/.helm/repository/repositories.yaml,v3:/root/.helm/repository/repositories.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    There is no limit to the amount of repository files that can be imported
as the &lt;code&gt;--helm-repository-import&lt;/code&gt; flag accepts a comma separated string
slice of &lt;code&gt;&amp;lt;Helm version&amp;gt;:&amp;lt;filepath&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;v3:/my/path.yaml&lt;/code&gt;.
Adding all entries to the same file and/or secret is thus not a requirement.

&lt;/div&gt;



&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    For the 
&lt;a href=&#34;../references/chart.md&#34;&gt;Helm chart&lt;/a&gt;, this all can be done by setting
&lt;code&gt;configureRepositories.enable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, it will automatically pick up the
&lt;code&gt;flux-helm-reposities&lt;/code&gt; secret created earlier in this guide and configure the
&lt;code&gt;--helm-repository-import&lt;/code&gt; flag for the enabled Helm versions. The certificate
secret can be mounted by configuring the &lt;code&gt;extraVolumes&lt;/code&gt; and &lt;code&gt;extraVolumeMounts&lt;/code&gt;
values.

&lt;/div&gt;

&lt;h3 id=&#34;extending-the-supported-helm-repository-protocols&#34;&gt;Extending the supported Helm repository protocols&lt;/h3&gt;
&lt;p&gt;By default, the Helm Operator is able to pull charts from repositories using
HTTP/S. It is however possible to extend the supported protocols by making use
of a 
&lt;a href=&#34;https://helm.sh/docs/topics/plugins/#downloader-plugins&#34; target=&#34;_blank&#34;&gt;Helm downloader plugin&lt;/a&gt;,
this allows you for example to use charts hosted on 
&lt;a href=&#34;https://github.com/hypnoglow/helm-s3&#34; target=&#34;_blank&#34;&gt;Amazon S3&lt;/a&gt;
or 
&lt;a href=&#34;https://github.com/hayorov/helm-gcs&#34; target=&#34;_blank&#34;&gt;Google Cloud Storage&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;installing-a-helm-downloader-plugin&#34;&gt;Installing a Helm downloader plugin&lt;/h4&gt;
&lt;p&gt;The easiest way to install a plugin so that it becomes accessible to the Helm
operator to use an 
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; target=&#34;_blank&#34;&gt;init container&lt;/a&gt;
and one of the available &lt;code&gt;helm&lt;/code&gt; binaries in the Helm Operator&amp;rsquo;s image and a
volume mount. For the Helm chart,

&lt;a href=&#34;../references/chart.md#use-helm-downloader-plugins&#34;&gt;refer to the chart the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plugin folder paths per Helm version:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Plugins&lt;/th&gt;
&lt;th&gt;Config&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Helm 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/var/fluxd/helm/cache/plugins&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/var/fluxd/helm/plugins&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Helm 3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/root/.cache/helm/plugins&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/root/.local/share/helm/plugins&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Add a volume entry of 
&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&#34; target=&#34;_blank&#34;&gt;type &lt;code&gt;emptyDir&lt;/code&gt;&lt;/a&gt;
to the deployment of your Helm Operator, this is where the plugins will be
stored for the lifetime duration of the pod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-plugins-cache&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;emptyDir&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, add a new init container that uses the same image as the Helm
operator&amp;rsquo;s container, and makes use of the earlier mentioned volume, with
correct volume mounts for the Helm version you are making use of. The
available &lt;code&gt;helm2&lt;/code&gt; and &lt;code&gt;helm3&lt;/code&gt; binaries can then be used to install the plugin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;initContainers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-3-downloader-plugin&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.io/fluxcd/helm-operator:&amp;lt;tag&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;- &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;- &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Replace &amp;#39;&amp;lt;plugin&amp;gt;&amp;#39; and &amp;#39;&amp;lt;version&amp;gt;&amp;#39; with the respective&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# values of the plugin you want to install&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;- &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;helm3 plugin install &amp;lt;plugin&amp;gt; --version &amp;lt;version&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-plugins-cache&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# See: &amp;#39;plugin folder paths per Helm version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/.cache/helm/plugins&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;subPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-plugins-cache&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# See: &amp;#39;plugin folder paths per Helm version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/.local/share/helm/plugins&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;subPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Last, add the same volume mounts to the Helm Operator container so that the
downloaded plugin becomes available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-helm-operator&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.io/fluxcd/helm-operator:&amp;lt;tag&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-plugins-cache&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# See: &amp;#39;plugin folder paths per Helm version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/.cache/helm/plugins&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;subPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;   &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-plugins-cache&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# See: &amp;#39;plugin folder paths per Helm version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/.local/share/helm/plugins&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;subPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;using-an-installed-protocol-in-your-helmrelease&#34;&gt;Using an installed protocol in your HelmRelease&lt;/h4&gt;
&lt;p&gt;Once a Helm downloader plugin has been successfully installed, the newly added
protocol can be used in the &lt;code&gt;.chart.repository&lt;/code&gt; value of a &lt;code&gt;HelmRelease&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;s3://bucket-name/charts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;chart-name&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1.0.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Caution&lt;/h4&gt;

    Most downloader plugins expect some form of credentials to be present to be
able to download a chart, make sure those are available in the Helm
operator&amp;rsquo;s container before attempting to make use of the newly added
protocol.

&lt;/div&gt;

&lt;h2 id=&#34;git-repositories&#34;&gt;Git repositories&lt;/h2&gt;
&lt;p&gt;Besides the extensive support for Helm repositories, the Helm Operator also
offers support for charts from Git repository sources. You can refer to a chart
from a &lt;em&gt;Git&lt;/em&gt; repository, rather than a Helm repository, with a &lt;code&gt;.chart&lt;/code&gt; section
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@github.com:org/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;: The URL of the Git repository, e.g. &lt;code&gt;git@github.com:org/repo&lt;/code&gt; or
&lt;code&gt;https://github.com/org/repo.git&lt;/code&gt;. &lt;strong&gt;Note:&lt;/strong&gt; specifying a custom port only
works when the protocol is specified,
e.g. &lt;code&gt;ssh://git@github.com:2222/org/repo.git&lt;/code&gt; and not &lt;code&gt;git@github.com:2222/org/repo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The Git reference, e.g. a branch, tag, or (short) commit
hash. When omitted, defaults to &lt;code&gt;master&lt;/code&gt; or the configured &lt;code&gt;--git-default-ref&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The path of the chart relative to the root of the Git repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, the Helm Operator will start a mirror for the Git repository, and
a temporary working clone at the current &lt;code&gt;HEAD&lt;/code&gt; of the defined &lt;code&gt;ref&lt;/code&gt; of the
mirror will be created, before performing a release with the &lt;code&gt;path&lt;/code&gt; given.&lt;/p&gt;
&lt;p&gt;Mirrored Git repositories are polled for changes by fetching from the upstream
on the configured &lt;code&gt;--git-poll-interval&lt;/code&gt; (defaults to 5 minutes). When a change
is detected the Helm Operator will collect all &lt;code&gt;HelmRelease&lt;/code&gt; resources making
use of the mirror, and inspect if the change updates the chart at the &lt;code&gt;path&lt;/code&gt;
given. When this is true, it will schedule a new release and an upgrade will
follow.&lt;/p&gt;
&lt;p&gt;When a temporary working clone cannot be created due to e.g. the mirror not
being available yet or a cloning failure because of missing 
&lt;a href=&#34;#authentication&#34;&gt;credentials&lt;/a&gt;,
a status condition of type &lt;code&gt;ChartFetched&lt;/code&gt; will be recorded on the &lt;code&gt;HelmRelease&lt;/code&gt; resource with the
returned error.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    You can pin a chart to a specific version by changing the &lt;code&gt;.ref&lt;/code&gt; to a tag
or commit hash.

&lt;/div&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;
&lt;p&gt;Unauthenticated cloning from Git repositories is possible for public Git
repositories by making the Helm Operator fetch them over HTTP/S. It is
however likely that most of the time you will be using a Git repository
chart source, some form of authentication is required before the repository
can be accessed by the Helm Operator.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip&lt;/h4&gt;

    Because the Helm Operator does not perform any write operations on the Git
repository, credentials with read permissions are always sufficient.

&lt;/div&gt;

&lt;h4 id=&#34;ssh&#34;&gt;SSH&lt;/h4&gt;
&lt;p&gt;For Git over SSH the Helm Operator makes use of private keys available in the
container. Because of this, any &lt;code&gt;HelmRelease&lt;/code&gt; under the management of a
Helm Operator instance has access to the same repositories once a private key
has been provided and no additional configuration is required for the resource
itself other than defining the Git repository in the &lt;code&gt;.chart.repo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To provide a private key to be used for Git operations over SSH, put the key in
a secret under the entry &lt;code&gt;identity&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-git-deploy &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;identity&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;path to key file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, mount it into the Helm Operator container as shown in the

&lt;a href=&#34;https://github.com/fluxcd/helm-operator/blob/1.2.0/deploy/deployment.yaml&#34; target=&#34;_blank&#34;&gt;example deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The default &lt;code&gt;ssh_config&lt;/code&gt; that ships with the Helm Operator&amp;rsquo;s Docker image
expects an identity file at &lt;code&gt;/etc/fluxd/ssh/identity&lt;/code&gt;, which is where it will
be if you just uncomment the blocks from the example.&lt;/p&gt;
&lt;h5 id=&#34;providing-multiple-private-keys&#34;&gt;Providing multiple private keys&lt;/h5&gt;
&lt;p&gt;If you are using more than one repository, you may need to provide more than
one private key. In that case, you can create a secret with an entry for each
key and mount that &lt;em&gt;as well as&lt;/em&gt; an &lt;code&gt;ssh_config&lt;/code&gt; file mentioning each key as an
&lt;code&gt;IdentityFile&lt;/code&gt; in &lt;code&gt;/root/.ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, to provide different credentials for &lt;code&gt;github.com&lt;/code&gt; and
&lt;code&gt;bitbucket.org&lt;/code&gt; you would create a &lt;code&gt;ssh_config&lt;/code&gt; file looking like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Host github.com
    HostName github.com
    User git
    IdentityFile &amp;lt;github private key path&amp;gt;
    IdentitiesOnly yes

Host bitbucket.org
    HostName bitbucket.org
    User git
    IdentityFile &amp;lt;bitbucket private key path&amp;gt;
    IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The &lt;code&gt;IdentitiesOnly&lt;/code&gt; ensures that only the &lt;code&gt;IdentityFile&lt;/code&gt; for the
&lt;code&gt;Host&lt;/code&gt; is used and any other identity files known are ignored.

&lt;/div&gt;

&lt;h6 id=&#34;multiple-private-keys-for-git-repositories-on-the-same-host&#34;&gt;Multiple private keys for Git repositories on the same host&lt;/h6&gt;
&lt;p&gt;There is one caveat to the example illustrated above; due to the fact that
permissions are being handled by the Git server and not SSH itself, any public
key known to the Git server will result in a successful login while the private
counterpart it belongs to may not actually have access to the Git repository
that is targeted. This poses a problem when you have multiple repositories on
the same Git server with a dedicated private key per repository.&lt;/p&gt;
&lt;p&gt;The workaround is to use an alias for the &lt;code&gt;Host&lt;/code&gt; value, and then use this as a
replacement for the hostname in the defined Git repository URL of the
&lt;code&gt;HelmRelease&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Host github-repository1
    HostName github.com
    User git
    IdentityFile &amp;lt;repository specific private key path&amp;gt;
    IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@github-repository1:org/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;https&#34;&gt;HTTPS&lt;/h4&gt;
&lt;p&gt;For Git over HTTPS the Helm Operator offers two ways of providing credentials.&lt;/p&gt;
&lt;h5 id=&#34;per-resource-credentials-using-chartsecretref&#34;&gt;Per-resource credentials using .chart.secretRef&lt;/h5&gt;
&lt;p&gt;To provide HTTPS credentials per &lt;code&gt;HelmRelease&lt;/code&gt; resource you can make use of
a &lt;code&gt;secretRef&lt;/code&gt; in the &lt;code&gt;.chart&lt;/code&gt; and a secret with a username and password.
The defined secret is retrieved from Kubernetes and appended to the
&lt;code&gt;.chart.git&lt;/code&gt; URL before starting the Git mirror.&lt;/p&gt;
&lt;p&gt;First, create a secret with the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; that give access
to the Git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic git-https-credentials &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;username&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, add the reference to the secret to the &lt;code&gt;.chart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/org/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git-https-credentials&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;global-credentials-using-netrc&#34;&gt;Global credentials using .netrc&lt;/h5&gt;
&lt;p&gt;It is also possible to provide &lt;code&gt;HelmRelease&lt;/code&gt; resources access to global
credentials via a

&lt;a href=&#34;https://ec.haxx.se/usingcurl/usingcurl-netrc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.netrc&lt;/code&gt; file&lt;/a&gt; mounted in the
&lt;code&gt;/root/&lt;/code&gt; directory of the Helm Operator container.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Caution&lt;/h4&gt;

    This approach suffers essentially from 
&lt;a href=&#34;#multiple-private-keys-for-git-repositories-on-the-same-host&#34;&gt;the same caveat as mentioned for
Git over SSH&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;To provide credentials for &lt;code&gt;github.com&lt;/code&gt;, you would create a &lt;code&gt;.netrc&lt;/code&gt; file like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;machine github.com
login &amp;lt;username&amp;gt;
password &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After mounting the file from a secret, you can then define the plain HTTPS URL
of the Git repository in your &lt;code&gt;HelmRelease&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/org/repo.git&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dependency-updates&#34;&gt;Dependency updates&lt;/h3&gt;
&lt;p&gt;For a chart from a Git repository the Helm Operator runs a dependency update
by default, this is done through an action that equals to &lt;code&gt;helm dep update&lt;/code&gt;.
You may want to disable this behaviour, for example because your dependencies
are already in git, to do so set &lt;code&gt;skipDepUpdate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;.chart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@github.com:org/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;skipDepUpdate&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;notifying-the-helm-operator-about-git-changes&#34;&gt;Notifying the Helm Operator about Git changes&lt;/h3&gt;
&lt;p&gt;As earlier laid out in this guide the Helm Operator fetches the upstream of
mirrored Git repositories on the configured &lt;code&gt;--git-poll-interval&lt;/code&gt; (defaults
to 5 minutes). In some scenarios (think CI/CD), you may not want to wait for
this interval to pass.&lt;/p&gt;
&lt;p&gt;To help you with this the Helm Operator serves a HTTP API endpoint to
instruct it to immediately refresh all Git mirrors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl port-forward deployment/flux-helm-operator 3030:3030 &amp;amp;
$ curl -XPOST http://localhost:3030/api/v1/sync-git
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    The HTTP API has no built-in authentication, this means you either need to
port forward before making the request or put something in front of it to
serve as a gatekeeper.

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Legacy: Daemon (fluxd)</title>
      <link>/legacy/flux/references/daemon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/daemon/</guid>
      <description>
        
        
        &lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Flux daemon (&lt;code&gt;fluxd&lt;/code&gt;, aka Flux agent) allows automation of application deployments and version control of cluster configuration.
Version controlling of cluster manifests provides reproducibility and a historical trail of events.&lt;/p&gt;
&lt;h3 id=&#34;responsibilities&#34;&gt;Responsibilities&lt;/h3&gt;
&lt;h4 id=&#34;continuous-deployment&#34;&gt;Continuous Deployment&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Flux daemon monitors user git repo Kubernetes manifests for
changes, which it then deploys to the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flux daemon monitors container registry for running container image
updates. Detection of an image change (running container image tag
vs container registry image tag) triggers k8s manifest update, which
is committed to the user git repository, then deployed to the
Kubernetes cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;deployment-approaches&#34;&gt;Deployment approaches&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Automate vs Deautomate&lt;/p&gt;
&lt;p&gt;Deployment happens automatically when a new image tag is
detected. Deautomated deployment will not proceed until
manually released (through the CLI tool &lt;code&gt;fluxctl&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lock vs Unlock&lt;/p&gt;
&lt;p&gt;Deployment is pinned to a particular image tag.
New deployment will not proceed upon triggered release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setup-and-configuration&#34;&gt;Setup and configuration&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fluxd&lt;/code&gt; requires setup and offers customization though a multitude of flags.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;listen -l&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:3030&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;listen address where /metrics and API will be served&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;listen-metrics&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;listen address for /metrics endpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;kubernetes-kubectl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;optional, explicit path to kubectl tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;version&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;output the version number and exit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Git repo &amp;amp; key etc.&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-url&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;URL of git repo with Kubernetes manifests; e.g., &lt;code&gt;git@github.com:fluxcd/flux-get-started&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-branch&lt;/td&gt;
&lt;td&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;branch of git repo to use for Kubernetes manifests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-ci-skip&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;when set, fluxd will append &lt;code&gt;\n\n[ci skip]&lt;/code&gt; to its commit messages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-ci-skip-message&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;if provided, fluxd will append this to commit messages (overrides &amp;ndash;git-ci-skip`)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-path&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;path within git repo to locate Kubernetes manifests (relative path)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-user&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Weave Flux&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;username to use as git committer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-email&lt;/td&gt;
&lt;td&gt;&lt;code&gt;support@weave.works&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;email to use as git committer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-set-author&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;if set, the author of git commits will reflect the user who initiated the commit and will differ from the git committer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-gpg-key-import&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if set, fluxd will attempt to import the gpg key(s) found on the given path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-signing-key&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if set, commits made by fluxd to the user git repo will be signed with the provided GPG key.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-secret&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if set and a &lt;code&gt;.gitsecret&lt;/code&gt; directory exist in the root of the git repository, Flux will execute a &lt;code&gt;git secret reveal -f&lt;/code&gt; in the working clone before performing any operations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-label&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;label to keep track of sync progress; overrides both &amp;ndash;git-sync-tag and &amp;ndash;git-notes-ref&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-sync-tag&lt;/td&gt;
&lt;td&gt;&lt;code&gt;flux-sync&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;tag to use to mark sync progress for this cluster (old config, still used if &amp;ndash;git-label is not supplied)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-notes-ref&lt;/td&gt;
&lt;td&gt;&lt;code&gt;flux&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ref to use for keeping commit annotations in git notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-poll-interval&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;period at which to fetch any new commits from the git repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-timeout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;duration after which git operations time out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;git-readonly&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, the git repo will be considered read-only, and Flux will not attempt to write to it. Implies &amp;ndash;sync-state=secret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;syncing:&lt;/strong&gt; control over how config is applied to the cluster&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sync-interval&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;apply the git config to the cluster at least this often. New commits may provoke more frequent syncs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sync-timeout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;duration after which sync operations time out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sync-garbage-collection&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;when set, fluxd will delete resources that it created, but are no longer present in git&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sync-garbage-collection-dry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;only log what would be garbage collected, rather than deleting. Implies &amp;ndash;sync-garbage-collection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sync-state&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Where to keep sync state; either a tag in the upstream repo (&lt;code&gt;git&lt;/code&gt;), or as an annotation on the SSH secret (&lt;code&gt;secret&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;registry cache:&lt;/strong&gt; (none of these need overriding, usually)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;memcached-hostname&lt;/td&gt;
&lt;td&gt;&lt;code&gt;memcached&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;hostname for memcached service to use for caching image metadata&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;memcached-timeout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;maximum time to wait before giving up on memcached requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;memcached-service&lt;/td&gt;
&lt;td&gt;&lt;code&gt;memcached&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SRV service used to discover memcache servers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-cache-expiry&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration to keep cached registry tag info. Must be &amp;lt; 1 month.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-rps&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;maximum registry requests per second per host&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-burst&lt;/td&gt;
&lt;td&gt;&lt;code&gt;125&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;maximum number of warmer connections to remote and memcache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-insecure-host&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;registry hosts to use HTTP for (instead of HTTPS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-exclude-image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[&amp;quot;k8s.gcr.io/*&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;do not scan images that match these glob expressions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-include-image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;scan &lt;em&gt;only&lt;/em&gt; images that match these glob expressions (the default, &lt;code&gt;nil&lt;/code&gt;, means include everything)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-use-labels&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[&amp;quot;index.docker.io/weaveworks/*&amp;quot;, &amp;quot;index.docker.io/fluxcd/*&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;use the timestamp (RFC3339) from labels for (canonical) image refs that match these glob expressions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;docker-config&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path to a Docker config file with default image registry credentials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-ecr-region&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;allow these AWS regions when scanning images from ECR (multiple values allowed); defaults to the detected cluster region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-ecr-include-id&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;include these AWS account ID(s) when scanning images in ECR (multiple values allowed); empty means allow all, unless excluded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-ecr-exclude-id&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[&amp;lt;EKS SYSTEM ACCOUNT&amp;gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;exclude these AWS account ID(s) when scanning ECR (multiple values allowed); defaults to the EKS system account, so system images will not be scanned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-require&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;exit with an error if the given services are not available. Useful for escalating misconfiguration or outages that might otherwise go undetected. Presently supported values: {&lt;code&gt;ecr&lt;/code&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;registry-disable-scanning&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;do not scan container image registries to fill in the registry cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;k8s-secret backed ssh keyring configuration&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-secret-name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;flux-git-deploy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of the k8s secret used to store the private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-secret-volume-mount-path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/fluxd/ssh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;mount location of the k8s secret storing the private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-secret-data-key&lt;/td&gt;
&lt;td&gt;&lt;code&gt;identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;data key holding the private SSH key within the k8s secret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;k8s configuration&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-allow-namespace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;restrict all operations to the provided namespaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-default-namespace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;the namespace to use for resources where a namespace is not specified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;k8s-unsafe-exclude-resource&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[&amp;quot;*metrics.k8s.io/*&amp;quot;, &amp;quot;webhook.certmanager.k8s.io/*&amp;quot;, &amp;quot;v1/Event&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;do not attempt to obtain cluster resources whose group/version/kind matches these glob expressions, e.g. &lt;code&gt;coordination.k8s.io/v1beta1/Lease&lt;/code&gt;, &lt;code&gt;coordination.k8s.io/*/Lease&lt;/code&gt; or &lt;code&gt;coordination.k8s.io/*&lt;/code&gt;. Potentially unsafe, please read Flux&amp;rsquo;s troubleshooting section on &lt;code&gt;--k8s-unsafe-exclude-resource&lt;/code&gt; before using it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;upstream service&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;connect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;connect to an upstream service e.g., Weave Cloud, at this base address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;token&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;authentication token for upstream service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SSH key generation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;ssh-keygen-bits&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-b argument to ssh-keygen (default unspecified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;ssh-keygen-type&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-t argument to ssh-keygen (default unspecified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;ssh-keygen-format&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-m argument to ssh-keygen (default RFC4716)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;manifest generation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;manifest-generation&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;search for .flux.yaml files to generate manifests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;sops&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;decrypt SOPS-encrypted manifest files before applying them to the cluster. Provide decryption keys in the same way as providing them for &lt;code&gt;sops&lt;/code&gt; the binary, for example with &lt;code&gt;--git-gpg-key-import&lt;/code&gt;. The full description of how to supply sops with a key can be found in the 
&lt;a href=&#34;https://github.com/mozilla/sops#usage&#34; target=&#34;_blank&#34;&gt;SOPS documentation&lt;/a&gt;. Be aware that manifests generated with &lt;code&gt;.flux.yaml&lt;/code&gt; files are not decrypted. Instead, make sure to output cleartext manifests by explicitly invoking the &lt;code&gt;sops&lt;/code&gt; binary.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;more-information&#34;&gt;More information&lt;/h2&gt;
&lt;p&gt;Setting up and configuring &lt;code&gt;fluxd&lt;/code&gt; is discussed in

&lt;a href=&#34;/legacy/flux/tutorials/get-started/&#34;&gt;&amp;ldquo;Get started with Flux&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is also more information on 
&lt;a href=&#34;/legacy/flux/references/garbagecollection/&#34;&gt;garbage collection&lt;/a&gt;,

&lt;a href=&#34;/legacy/flux/references/git-gpg/&#34;&gt;Git commit signing&lt;/a&gt;, and other elements in 
&lt;a href=&#34;/legacy/flux/&#34;&gt;references&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started with Flux using Helm</title>
      <link>/legacy/flux/tutorials/get-started-helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/tutorials/get-started-helm/</guid>
      <description>
        
        
        &lt;p&gt;If you are using Helm already, this guide is for you. By the end
you will have Helm installing Flux in the cluster and deploying
any code changes for you.&lt;/p&gt;
&lt;p&gt;If you are looking for more generic notes for how to install Flux
using Helm, we collected them 
&lt;a href=&#34;https://github.com/fluxcd/flux/blob/master/chart/flux/README.md#&#34; target=&#34;_blank&#34;&gt;in the chart&amp;rsquo;s
README&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will need to have Kubernetes set up. To get up and running fast,
you might want to use &lt;code&gt;minikube&lt;/code&gt; or &lt;code&gt;kubeadm&lt;/code&gt;. Any other Kubernetes
setup will work as well though.&lt;/p&gt;
&lt;p&gt;Download Helm v3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On MacOS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Linux: Download the 
&lt;a href=&#34;https://github.com/kubernetes/helm/releases/latest&#34; target=&#34;_blank&#34;&gt;latest release&lt;/a&gt;,
unpack the tarball and put the binary in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are using Helm v2 you have to create a service account and a cluster role binding for Tiller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n kube-system create sa tiller

kubectl create clusterrolebinding tiller-cluster-rule &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --clusterrole&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cluster-admin &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --serviceaccount&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kube-system:tiller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy Tiller in &lt;code&gt;kube-system&lt;/code&gt; namespace (Helm v2 only):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm init --skip-refresh --upgrade --service-account tiller --history-max &lt;span style=&#34;color:#40a070&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    This is a quick guide and by no means a production ready
Tiller setup, please look into 
&lt;a href=&#34;https://helm.sh/docs/using_helm/#securing-your-helm-installation&#34; target=&#34;_blank&#34;&gt;&amp;lsquo;Securing your Helm installation&amp;rsquo;&lt;/a&gt;
and be aware of the &lt;code&gt;--history-max&lt;/code&gt; flag before promoting to
production.

&lt;/div&gt;

&lt;h2 id=&#34;install-flux&#34;&gt;Install Flux&lt;/h2&gt;
&lt;p&gt;Add the Flux repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm repo add fluxcd https://charts.fluxcd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the Helm Release CRD:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/master/deploy/crds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this next step you install Flux using &lt;code&gt;helm&lt;/code&gt;. Simply&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fork 
&lt;a href=&#34;https://github.com/fluxcd/flux-get-started&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fluxcd/flux-get-started&lt;/code&gt;&lt;/a&gt; on GitHub and replace the &lt;code&gt;fluxcd&lt;/code&gt; with your GitHub username in 
&lt;a href=&#34;https://github.com/fluxcd/flux-get-started/blob/master/releases/ghost.yaml#L13&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the flux namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create namespace flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Flux and the Helm Operator by specifying your fork URL:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Just make sure you replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub username
in the command below:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using a public git server from &lt;code&gt;bitbucket.com&lt;/code&gt;, &lt;code&gt;github.com&lt;/code&gt;, &lt;code&gt;gitlab.com&lt;/code&gt;, &lt;code&gt;dev.azure.com&lt;/code&gt;, or &lt;code&gt;vs-ssh.visualstudio.com&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm upgrade -i flux fluxcd/flux &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;   --set git.url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;git@github.com:YOURUSER/flux-get-started &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;   --namespace flux

 helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;   --set git.ssh.secretName&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux-git-deploy &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;   --namespace flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    By default the helm-operator chart will install with support for both Helm v2 (which requires Tiller) and v3.  You can target specific versions by setting the &lt;code&gt;helm.versions&lt;/code&gt; value, e.g. &lt;code&gt;--set helm.versions=v3&lt;/code&gt;.

&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a private git server:&lt;/p&gt;
&lt;p&gt;When deploying from a private repo, the known_hosts of the git server needs
to be configured into a kubernetes configmap so that &lt;code&gt;StrictHostKeyChecking&lt;/code&gt; is respected.
See the 
&lt;a href=&#34;https://github.com/fluxcd/flux/blob/master/chart/flux/README.md#to-install-flux-with-the-helm-operator-and-a-private-git-repository&#34; target=&#34;_blank&#34;&gt;README of the chart&lt;/a&gt;
for further installation instructions in this case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Allow some time for all containers to get up and running. If you&amp;rsquo;re
impatient, run the following command and see the pod creation
process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;watch kubectl -n flux get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will notice that &lt;code&gt;flux&lt;/code&gt; and &lt;code&gt;flux-helm-operator&lt;/code&gt; will start
turning up in the &lt;code&gt;flux&lt;/code&gt; namespace.&lt;/p&gt;
&lt;h2 id=&#34;giving-write-access&#34;&gt;Giving write access&lt;/h2&gt;
&lt;p&gt;For the real benefits of GitOps, Flux will need access to your
git repository to update configuration if necessary. To facilitate
that you will need to add a deploy key to your fork of the
repository.&lt;/p&gt;
&lt;p&gt;This is pretty straight-forward as Flux generates a SSH key and
logs the public key at startup. Find the SSH public key by
installing 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;&lt;code&gt;fluxctl&lt;/code&gt;&lt;/a&gt; and running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl identity --k8s-fwd-ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to sync your cluster state with git you need to copy the
public key and create a deploy key with write access on your GitHub
repository.&lt;/p&gt;
&lt;p&gt;Open GitHub, navigate to your fork, go to &lt;strong&gt;Setting &amp;gt; Deploy keys&lt;/strong&gt;,
click on &lt;strong&gt;Add deploy key&lt;/strong&gt;, give it a &lt;code&gt;Title&lt;/code&gt;, check &lt;strong&gt;Allow write
access&lt;/strong&gt;, paste the Flux public key and click &lt;strong&gt;Add key&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;(Or replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub ID in this url:
&lt;code&gt;https://github.com/YOURUSER/flux-get-started/settings/keys/new&lt;/code&gt; and
paste the key there.)&lt;/p&gt;
&lt;p&gt;Once Flux has confirmed access to the repository, it will start
deploying the workloads of &lt;code&gt;flux-get-started&lt;/code&gt;. After a while you
will be able to see the Helm releases deployed by Flux (which are
deployed into the &lt;code&gt;demo&lt;/code&gt; namespace) listed like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm list --namespace demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;committing-a-small-change&#34;&gt;Committing a small change&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;flux-get-started&lt;/code&gt; is a simple example in which three services
(mongodb, redis and ghost) are deployed. Here we will simply update the
version of mongodb to a newer version to see if Flux will pick this
up and update our cluster.&lt;/p&gt;
&lt;p&gt;The easiest way is to update your fork of &lt;code&gt;flux-get-started&lt;/code&gt; and
change the &lt;code&gt;image&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;YOURUSER&lt;/code&gt; in &lt;code&gt;https://github.com/YOURUSER/flux-get-started/edit/master/releases/mongodb.yaml&lt;/code&gt;
with your GitHub ID, open the URL in your browser, edit the file,
change the &lt;code&gt;tag:&lt;/code&gt; line to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bitnami/mongodb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;4.0.14&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commit the change to your &lt;code&gt;master&lt;/code&gt; branch. It will now get
automatically deployed to your cluster.&lt;/p&gt;
&lt;p&gt;You can check out the Flux logs with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux logs deployment/flux -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default sync frequency for Flux using the Helm chart is
five minutes. This can be tweaked easily. By observing the logs
you can see when the change landed in the cluster.&lt;/p&gt;
&lt;p&gt;Confirm the change landed by checking the &lt;code&gt;demo&lt;/code&gt; namespace that
Flux is deploying to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl describe -n demo deployment/mongodb | grep Image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, the actual steps to set up Flux, get our app
deployed, give Flux access to it and see modifications land are
very straight-forward and are a quite natural workflow.&lt;/p&gt;
&lt;h2 id=&#34;a-more-advanced-setup&#34;&gt;A more advanced setup&lt;/h2&gt;
&lt;p&gt;For a more advanced Helm setup, take a look at the

&lt;a href=&#34;https://github.com/fluxcd/helm-operator-get-started&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fluxcd/helm-operator-get-started&lt;/code&gt; repository&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Manage Helm Releases</title>
      <link>/docs/iac/helmreleases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iac/helmreleases/</guid>
      <description>
        
        
        &lt;p&gt;The 
&lt;a href=&#34;../components/helm/_index.md&#34;&gt;helm-controller&lt;/a&gt; allows you to
declaratively manage Helm chart releases with Kubernetes manifests.
It makes use of the artifacts produced by the

&lt;a href=&#34;../components/source/_index.md&#34;&gt;source-controller&lt;/a&gt; from
&lt;code&gt;HelmRepository&lt;/code&gt;, &lt;code&gt;GitRepository&lt;/code&gt;, &lt;code&gt;Bucket&lt;/code&gt; and &lt;code&gt;HelmChart&lt;/code&gt; resources.
The helm-controller is part of the default toolkit installation.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To follow this guide you&amp;rsquo;ll need a Kubernetes cluster with the GitOps
toolkit controllers installed on it.
Please see the 
&lt;a href=&#34;/docs/get-started/&#34;&gt;get started guide&lt;/a&gt;
or the 
&lt;a href=&#34;../installation/&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;define-a-chart-source&#34;&gt;Define a chart source&lt;/h2&gt;
&lt;p&gt;To be able to release a Helm chart, the source that contains the chart
(either a &lt;code&gt;HelmRepository&lt;/code&gt;, &lt;code&gt;GitRepository&lt;/code&gt;, or &lt;code&gt;Bucket&lt;/code&gt;) has to be known
first to the source-controller, so that the &lt;code&gt;HelmRelease&lt;/code&gt; can reference
to it.&lt;/p&gt;
&lt;h3 id=&#34;helm-repository&#34;&gt;Helm repository&lt;/h3&gt;
&lt;p&gt;Helm repositories are the recommended source to retrieve Helm charts
from, as they are lightweight in processing and make it possible to
configure a semantic version selector for the chart version that should
be released.&lt;/p&gt;
&lt;p&gt;They can be declared by creating a &lt;code&gt;HelmRepository&lt;/code&gt; resource, the
source-controller will fetch the Helm repository index for this
resource on an interval and expose it as an artifact:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://stefanprodan.github.io/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;interval&lt;/code&gt; defines at which interval the Helm repository index
is fetched, and should be at least &lt;code&gt;1m&lt;/code&gt;. Setting this to a higher
value means newer chart versions will be detected at a slower pace,
a push-based fetch can be introduced using 
&lt;a href=&#34;/docs/iac/webhook-receivers/&#34;&gt;webhook receivers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;url&lt;/code&gt; can be any HTTP/S Helm repository URL.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Authentication&lt;/h4&gt;

    HTTP/S basic and TLS authentication can be configured for private
Helm repositories. See the 
&lt;a href=&#34;../components/source/helmrepositories.md&#34;&gt;&lt;code&gt;HelmRepository&lt;/code&gt; CRD docs&lt;/a&gt;
for more details.

&lt;/div&gt;

&lt;h3 id=&#34;git-repository&#34;&gt;Git repository&lt;/h3&gt;
&lt;p&gt;Charts from Git repositories can be released by declaring a
&lt;code&gt;GitRepository&lt;/code&gt;, the source-controller will fetch the contents of the
repository on an interval and expose it as an artifact.&lt;/p&gt;
&lt;p&gt;The source-controller can build and expose Helm charts as artifacts
from the contents of the &lt;code&gt;GitRepository&lt;/code&gt; artifact (more about this
later on in the guide).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is one caveat you should be aware of:&lt;/strong&gt; to make the
source-controller produce a new chart artifact, the &lt;code&gt;version&lt;/code&gt; in the
&lt;code&gt;Chart.yaml&lt;/code&gt; of the chart must be bumped.&lt;/p&gt;
&lt;p&gt;An example &lt;code&gt;GitRepository&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/stefanprodan/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;branch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ignore&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    # exclude all
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    /*
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    # include charts directory
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    !/charts/&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;interval&lt;/code&gt; defines at which interval the Git repository contents
are fetched, and should be at least &lt;code&gt;1m&lt;/code&gt;. Setting this to a higher
value means newer chart versions will be detected at a slower pace,
a push-based fetch can be introduced using 
&lt;a href=&#34;/docs/iac/webhook-receivers/&#34;&gt;webhook receivers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;url&lt;/code&gt; can be any HTTP/S or SSH address (the latter requiring
authentication).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; defines the checkout strategy, and is set to follow the
&lt;code&gt;master&lt;/code&gt; branch in the above example. For other strategies like
tags or commits, see the 
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;&lt;code&gt;GitRepository&lt;/code&gt; CRD docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ignore&lt;/code&gt; defines file and folder exclusion for the
artifact produced, and follows the 
&lt;a href=&#34;https://git-scm.com/docs/gitignore#_pattern_format&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.gitignore&lt;/code&gt; pattern
format&lt;/a&gt;.
The above example only includes the &lt;code&gt;charts&lt;/code&gt; directory of the
repository and omits all other files.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Authentication&lt;/h4&gt;

    HTTP/S basic and SSH authentication can be configured for private
Git repositories. See the 
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;&lt;code&gt;GitRepository&lt;/code&gt; CRD docs&lt;/a&gt;
for more details.

&lt;/div&gt;

&lt;h3 id=&#34;cloud-storage&#34;&gt;Cloud Storage&lt;/h3&gt;
&lt;p&gt;It is inadvisable while still possible to use a &lt;code&gt;Bucket&lt;/code&gt; as a source for a &lt;code&gt;HelmRelease&lt;/code&gt;,
as the whole storage bucket will be downloaded by source controller at each sync. The
bucket can easily become very large if there are frequent releases of multiple charts
that are stored in the same bucket.&lt;/p&gt;
&lt;p&gt;A better option is to use 
&lt;a href=&#34;https://github.com/helm/chartmuseum&#34; target=&#34;_blank&#34;&gt;Chartmuseum&lt;/a&gt; and run a cluster
local Helm repository that can be used by source controller. Chartmuseum has support
for multiple different cloud storage solutions such as S3, GCS, and Azure Blob Storage,
meaning that you are not limited to only using storage providers that support the S3 protocol.&lt;/p&gt;
&lt;p&gt;You can deploy a Chartmuseum instance with a &lt;code&gt;HelmRelease&lt;/code&gt; that exposes a Helm repository stored
in a S3 bucket. Please refer to 
&lt;a href=&#34;https://chartmuseum.com/docs/#how-to-run&#34; target=&#34;_blank&#34;&gt;Chartmuseums how to run documentation&lt;/a&gt;
for details about how to use other storage backends.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;chartmuseum&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://chartmuseum.github.io/charts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;10m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.toolkit.fluxcd.io/v2beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;chartmuseum&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;chartmuseum&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;2.14.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;chartmuseum&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;env&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;open&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;AWS_SDK_LOAD_CONFIG&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;STORAGE&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amazon&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;STORAGE_AMAZON_BUCKET&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;bucket-name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;STORAGE_AMAZON_PREFIX&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;STORAGE_AMAZON_REGION&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;region-name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;serviceAccount&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;create&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eks.amazonaws.com/role-arn&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;role-arn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;fsGroup&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;65534&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After Chartmuseum is up and running it should be possible to use the accompanying
service as the url for the &lt;code&gt;HelmRepository&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-charts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http://chartmuseum-chartmuseum:8080&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;define-a-helm-release&#34;&gt;Define a Helm release&lt;/h2&gt;
&lt;p&gt;With the chart source created, define a new &lt;code&gt;HelmRelease&lt;/code&gt; to release
the Helm chart:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.toolkit.fluxcd.io/v2beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;name|path&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;4.0.x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;HelmRepository|GitRepository|Bucket&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;replicaCount&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;chart.spec&lt;/code&gt; values are used by the helm-controller as a template
to create a new &lt;code&gt;HelmChart&lt;/code&gt; resource in the same namespace as the
&lt;code&gt;sourceRef&lt;/code&gt;. The source-controller will then lookup the chart in the
artifact of the referenced source, and either fetch the chart for a
&lt;code&gt;HelmRepository&lt;/code&gt;, or build it from a &lt;code&gt;GitRepository&lt;/code&gt; or &lt;code&gt;Bucket&lt;/code&gt;.
It will then make it available as a &lt;code&gt;HelmChart&lt;/code&gt; artifact to be used by
the helm-controller.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;chart.spec.chart&lt;/code&gt; can either contain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the chart as made available by the &lt;code&gt;HelmRepository&lt;/code&gt;
(without any aliases), for example: &lt;code&gt;podinfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The relative path the chart can be found at in the &lt;code&gt;GitRepository&lt;/code&gt;
or &lt;code&gt;Bucket&lt;/code&gt;, for example: &lt;code&gt;./charts/podinfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The relative path the chart package can be found at in the
&lt;code&gt;GitRepository&lt;/code&gt; or &lt;code&gt;Bucket&lt;/code&gt;, for example: &lt;code&gt;./charts/podinfo-1.2.3.tgz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;chart.spec.version&lt;/code&gt; can be a fixed semver, or any semver range
(i.e. &lt;code&gt;&amp;gt;=4.0.0 &amp;lt;5.0.0&lt;/code&gt;). It is only taken into account for &lt;code&gt;HelmRelease&lt;/code&gt;
resources that reference a &lt;code&gt;HelmRepository&lt;/code&gt; source.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Advanced configuration&lt;/h4&gt;

    The &lt;code&gt;HelmRelease&lt;/code&gt; offers an extensive set of configurable flags
for finer grain control over how Helm actions are performed.
See the 
&lt;a href=&#34;../components/helm/helmreleases.md&#34;&gt;&lt;code&gt;HelmRelease&lt;/code&gt; CRD docs&lt;/a&gt;
for more details.

&lt;/div&gt;

&lt;h2 id=&#34;refer-to-values-in-configmap-and-secret-resources&#34;&gt;Refer to values in &lt;code&gt;ConfigMap&lt;/code&gt; and &lt;code&gt;Secret&lt;/code&gt; resources&lt;/h2&gt;
&lt;p&gt;It is possible to define a list of &lt;code&gt;ConfigMap&lt;/code&gt; and &lt;code&gt;Secret&lt;/code&gt; resources
from which to take values. The values are merged in the order given,
with the later values overwriting earlier. These values always have a
lower priority than the values inlined in the &lt;code&gt;HelmRelease&lt;/code&gt; via the
&lt;code&gt;spec.values&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;prod-env-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;values-prod.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;prod-tls-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesKey&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;crt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;targetPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;tls.crt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt;: Kind of the values referent (&lt;code&gt;ConfigMap&lt;/code&gt; or &lt;code&gt;Secret&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Name of the values referent, in the same namespace as the
&lt;code&gt;HelmRelease&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valuesKey&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The data key where the values.yaml or a
specific value can be found. Defaults to &lt;code&gt;values.yaml&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;targetPath&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The YAML dot notation path at which the
value should be merged. When set, the &lt;code&gt;valuesKey&lt;/code&gt; is expected to be
a single flat value. Defaults to &lt;code&gt;None&lt;/code&gt; when omitted, which results
in the values getting merged at the root.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The &lt;code&gt;targetPath&lt;/code&gt; supports the same formatting as you would supply
as an argument to the &lt;code&gt;helm&lt;/code&gt; binary using &lt;code&gt;--set [path]=[value]&lt;/code&gt;.
In addition to this, the referred value can contain the same
value formats (e.g. &lt;code&gt;{a,b,c}&lt;/code&gt; for a list).
You can read more about the available formats and limitations in
the 
&lt;a href=&#34;https://helm.sh/docs/intro/using_helm/#the-format-and-limitations-of---set&#34; target=&#34;_blank&#34;&gt;Helm documentation&lt;/a&gt;.

&lt;/div&gt;



&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TargetPath and JSON values&lt;/h4&gt;

    &lt;p&gt;When using &lt;code&gt;TargetPath&lt;/code&gt; in combination with a JSON string, the
&lt;p&gt;&lt;a href=&#34;https://github.com/helm/helm/issues/5618&#34; target=&#34;_blank&#34;&gt;limitations are the same as while using &lt;code&gt;helm&lt;/code&gt;&lt;/a&gt;,
and require you to escape the full JSON string (including &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;&lt;/p&gt;


&lt;/div&gt;

&lt;h2 id=&#34;refer-to-values-in-configmaps-generated-with-kustomize&#34;&gt;Refer to values in &lt;code&gt;ConfigMaps&lt;/code&gt; generated with Kustomize&lt;/h2&gt;
&lt;p&gt;It is possible to use Kustomize 
&lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/configmapgenerator/&#34; target=&#34;_blank&#34;&gt;ConfigMap generator&lt;/a&gt;
to trigger a Helm release upgrade every time the encoded values change.&lt;/p&gt;
&lt;p&gt;First create a &lt;code&gt;kustomizeconfig.yaml&lt;/code&gt; for Kustomize to be able to patch
&lt;code&gt;ConfigMaps&lt;/code&gt; referenced in &lt;code&gt;HelmRelease&lt;/code&gt; manifests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;nameReference&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;fieldSpecs&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;spec/valuesFrom/name&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a &lt;code&gt;HelmRelease&lt;/code&gt; definition that references a &lt;code&gt;ConfigMap&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.toolkit.fluxcd.io/v2beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;releaseName&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a &lt;code&gt;kustomization.yaml&lt;/code&gt; that generates the &lt;code&gt;ConfigMap&lt;/code&gt; using our kustomize config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize.config.k8s.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- namespace.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- repository.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- release.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;configMapGenerator&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;files&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- values.yaml=my-values.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;configurations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- kustomizeconfig.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When 
&lt;a href=&#34;../components/kustomize/_index.md&#34;&gt;kustomize-controller&lt;/a&gt; reconciles the above manifests, it will generate
a unique name of the &lt;code&gt;ConfigMap&lt;/code&gt; every time &lt;code&gt;my-values.yaml&lt;/code&gt; content is updated in Git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.toolkit.fluxcd.io/v2beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo-values-2mh2t8m94h&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Garbage Collection&lt;/h4&gt;

    &lt;p&gt;Stale &lt;code&gt;ConfigMaps&lt;/code&gt;, previously generated by Kustomize, will be
removed from the cluster by kustomize-controller if
&lt;p&gt;&lt;a href=&#34;../components/kustomize/kustomization/#garbage-collection&#34;&gt;pruning&lt;/a&gt; is enabled.&lt;/p&gt;&lt;/p&gt;


&lt;/div&gt;

&lt;h2 id=&#34;refer-to-values-inside-the-chart&#34;&gt;Refer to values inside the chart&lt;/h2&gt;
&lt;p&gt;It is possible to replace the &lt;code&gt;values.yaml&lt;/code&gt; with a different file present inside the Helm chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.toolkit.fluxcd.io/v2beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mongodb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mongodb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mongodb&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bitnami&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFiles&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- values.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- values-production.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;replicaCount&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the &lt;code&gt;spec.chart.spec.valuesFiles&lt;/code&gt; doesn&amp;rsquo;t exists inside the chart, helm-controller will not be able to
fetch the chart. To determine why the &lt;code&gt;HelmChart&lt;/code&gt; fails to produce an artifact, you can inspect the status with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get helmcharts --all-namespaces
NAME    READY   STATUS
mongodb False   failed to locate override values file: values-prod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configure-notifications&#34;&gt;Configure notifications&lt;/h2&gt;
&lt;p&gt;The default toolkit installation configures the helm-controller to
broadcast events to the 
&lt;a href=&#34;../components/notification/_index.md&#34;&gt;notification-controller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To receive the events as notifications, a &lt;code&gt;Provider&lt;/code&gt; needs to be setup
first as described in the 
&lt;a href=&#34;/docs/iac/notifications/#define-a-provider&#34;&gt;notifications guide&lt;/a&gt;.
Once you have set up the &lt;code&gt;Provider&lt;/code&gt;, create a new &lt;code&gt;Alert&lt;/code&gt; resource in
the &lt;code&gt;flux-system&lt;/code&gt; to start receiving notifications about the Helm
release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Alert&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;generation&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;providerRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;slack&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSeverity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;info&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmChart&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default-podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/img/helm-controller-alerts.png&#34; alt=&#34;helm-controller alerts&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;configure-webhook-receivers&#34;&gt;Configure webhook receivers&lt;/h2&gt;
&lt;p&gt;When using semver ranges for Helm releases, you may want to trigger an update
as soon as a new chart version is published to your Helm repository.
In order to notify source-controller about a chart update,
you can 
&lt;a href=&#34;/docs/iac/webhook-receivers/&#34;&gt;setup webhook receivers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First generate a random string and create a secret with a &lt;code&gt;token&lt;/code&gt; field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;head -c &lt;span style=&#34;color:#40a070&#34;&gt;12&lt;/span&gt; /dev/urandom | shasum | cut -d &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;$TOKEN&lt;/span&gt;

kubectl -n flux-system create secret generic webhook-token &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$TOKEN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using 
&lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34;&gt;Harbor&lt;/a&gt; as your Helm repository, you can define a receiver with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Receiver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;harbor&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webhook-token&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The notification-controller generates a unique URL using the provided token and the receiver name/namespace.&lt;/p&gt;
&lt;p&gt;Find the URL with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl -n flux-system get receiver/helm-podinfo

NAME           READY   STATUS
helm-podinfo   True    Receiver initialised with URL: /hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Log in to the Harbor interface, go to Projects, select a project, and select Webhooks.
Fill the form with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Endpoint URL: compose the address using the receiver LB and the generated URL &lt;code&gt;http://&amp;lt;LoadBalancerAddress&amp;gt;/&amp;lt;ReceiverURL&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Auth Header: use the &lt;code&gt;token&lt;/code&gt; string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the above settings, when you upload a chart, the following happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Harbor sends the chart push event to the receiver address&lt;/li&gt;
&lt;li&gt;Notification controller validates the authenticity of the payload using the auth header&lt;/li&gt;
&lt;li&gt;Source controller is notified about the changes&lt;/li&gt;
&lt;li&gt;Source controller pulls the changes into the cluster and updates the &lt;code&gt;HelmChart&lt;/code&gt; version&lt;/li&gt;
&lt;li&gt;Helm controller is notified about the version change and upgrades the release&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Besides Harbor, you can define receivers for &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;GitLab&lt;/strong&gt;, &lt;strong&gt;Bitbucket&lt;/strong&gt;
and any other system that supports webhooks e.g. Jenkins, CircleCI, etc.
See the 
&lt;a href=&#34;../components/notification/receiver.md&#34;&gt;Receiver CRD docs&lt;/a&gt; for more details.

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Legacy: Quickstart</title>
      <link>/legacy/helm-operator/get-started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/get-started/quickstart/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through to all steps required to quickly get
started with the Helm Operator.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes cluster &lt;strong&gt;&amp;gt;=1.13.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Up-to-date &lt;strong&gt;Helm 2 or 3&lt;/strong&gt; 
&lt;a href=&#34;https://github.com/helm/helm/releases&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;helm&lt;/code&gt; binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-the-helm-operator&#34;&gt;Install the Helm Operator&lt;/h2&gt;
&lt;p&gt;First, install the &lt;code&gt;HelmRelease&lt;/code&gt; Custom Resource Definition. By adding
this CRD it will be possible to define &lt;code&gt;HelmRelease&lt;/code&gt; resources on the
cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/crds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a new namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;helm&lt;/code&gt;, first add the Flux CD Helm repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm repo add fluxcd https://charts.fluxcd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, install the Helm Operator using the available Helm chart:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --namespace flux &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --set helm.versions&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This installs the Helm Operator with default settings and support for
Helm 3 enabled.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    See the 
&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;operator reference&lt;/a&gt; and 
&lt;a href=&#34;../references/chart.md#configuration&#34;&gt;chart
documentation&lt;/a&gt;
for detailed configuration options.

&lt;/div&gt;

&lt;h2 id=&#34;create-your-first-helmrelease&#34;&gt;Create your first &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To install a Helm chart using the Helm Operator, create a &lt;code&gt;HelmRelease&lt;/code&gt;
resource on the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: helm.fluxcd.io/v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: HelmRelease
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  chart:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    repository: https://stefanprodan.github.io/podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    name: podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    version: 3.2.0
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The applied resource will install the 
&lt;a href=&#34;https://github.com/stefanprodan/podinfo&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;podinfo&lt;/code&gt;
chart&lt;/a&gt; with a tiny Go web
application from a Helm repository chart source. &lt;em&gt;Chart sources&lt;/em&gt; are
references to places where the operator can find Helm charts. The
release name the Helm Operator will use is composed out of the
namespace and name of the &lt;code&gt;HelmRelease&lt;/code&gt; resource (but can be
configured): &lt;code&gt;default-podinfo&lt;/code&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    Read more about different chart sources in the 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/chart-sources/&#34;&gt;chart
sources&lt;/a&gt; section of the
&lt;code&gt;HelmRelease&lt;/code&gt; guide.

&lt;/div&gt;

&lt;h2 id=&#34;confirm-the-chart-has-been-installed&#34;&gt;Confirm the chart has been installed&lt;/h2&gt;
&lt;p&gt;When a Helm chart has been successfully released the Helm Operator will
push a condition of type &lt;code&gt;Released&lt;/code&gt; with status &lt;code&gt;True&lt;/code&gt;. You can check
this condition is set using &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl wait --for=condition=released helmrelease/podinfo
helmrelease.helm.fluxcd.io/podinfo condition met
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, by describing the &lt;code&gt;HelmRelease&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl describe helmrelease podinfo
Name:         podinfo
Namespace:    default
Labels:       &amp;lt;none&amp;gt;
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {&amp;quot;apiVersion&amp;quot;:&amp;quot;helm.fluxcd.io/v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;HelmRelease&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;podinfo&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;default&amp;quot;},&amp;quot;spec&amp;quot;:{&amp;quot;chart...
API Version:  helm.fluxcd.io/v1
Kind:         HelmRelease
Metadata:
  Creation Timestamp:  2020-01-01T12:00:00Z
  Generation:          1
  Resource Version:    9017
  Self Link:           /apis/helm.fluxcd.io/v1/namespaces/default/helmreleases/podinfo
  UID:                 e9c11dc8-5ba6-4ee7-9226-cb0f9cab04ff
Spec:
  Chart:
    Name:        podinfo
    Repository:  https://stefanprodan.github.io/podinfo
    Version:     3.2.0
Status:
  Conditions:
    Last Transition Time:  2020-01-01T12:00:00Z
    Last Update Time:      2020-01-01T12:00:00Z
    Message:               chart fetched: podinfo-3.2.0.tgz
    Reason:                RepoChartInCache
    Status:                True
    Type:                  ChartFetched
    Last Transition Time:  2020-01-01T12:00:01Z
    Last Update Time:      2020-01-01T12:00:01Z
    Message:               Helm release sync succeeded
    Reason:                HelmSuccess
    Status:                True
    Type:                  Released
  Observed Generation:     1
  Release Name:            default-podinfo
  Release Status:          deployed
  Revision:                3.2.0
Events:
  Type    Reason       Age   From           Message
  ----    ------       ----  ----           -------
  Normal  ChartSynced  35s   helm-operator  Chart managed by HelmRelease processed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confirm the &lt;code&gt;default-podinfo&lt;/code&gt; pod has been deployed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
default-podinfo-7f9759cc66-bslsl   1/1     Running   0          59s
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip&lt;/h4&gt;

    &lt;p&gt;The available shorthand for &lt;code&gt;kubectl&lt;/code&gt; operations on &lt;code&gt;helmrelease&lt;/code&gt;
resources is &lt;code&gt;hr&lt;/code&gt;, i.e:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get hr
NAME      RELEASE           STATUS     MESSAGE                       AGE
podinfo   default-podinfo   deployed   Helm release sync succeeded   59s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2 id=&#34;make-a-modification&#34;&gt;Make a modification&lt;/h2&gt;
&lt;p&gt;The Helm Operator ensures that the Helm release in the cluster matches
the defined state in the &lt;code&gt;HelmRelease&lt;/code&gt; resource. This means that an
upgrade will be performed when the resource is modified. To demonstrate
this, we are going to increase the number of &lt;code&gt;podinfo&lt;/code&gt; replicas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl edit helmrelease/podinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
&lt;a href=&#34;https://helm.sh/docs/chart_best_practices/values/#helm&#34; target=&#34;_blank&#34;&gt;Helm values&lt;/a&gt;
can be defined on the &lt;code&gt;HelmRelease&lt;/code&gt; resources under the  &lt;code&gt;spec.values&lt;/code&gt;
key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://stefanprodan.github.io/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;3.2.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;replicaCount&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save the modification and watch the new pod enroll:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods -w
NAME                               READY   STATUS              RESTARTS   AGE
default-podinfo-7f9759cc66-lk45t   1/1     Running             0          59s
default-podinfo-7f9759cc66-w7fj7   0/1     ContainerCreating   0          1s
default-podinfo-7f9759cc66-w7fj7   0/1     Running             0          1s
default-podinfo-7f9759cc66-w7fj7   1/1     Running             0          1s
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    See the 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/values/&#34;&gt;values&lt;/a&gt; and 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/release-configuration/&#34;&gt;release
configuration&lt;/a&gt;
sections in the &lt;code&gt;HelmRelease&lt;/code&gt; guide for more details.

&lt;/div&gt;

&lt;h2 id=&#34;reconciliation&#34;&gt;Reconciliation&lt;/h2&gt;
&lt;p&gt;All &lt;code&gt;HelmRelease&lt;/code&gt; resources in the cluster watched by a Helm Operator
instance are rescheduled to synchronize every 3 minutes (or configured
&lt;code&gt;--charts-sync-interval&lt;/code&gt;); this is also known as the reconciliation
loop.&lt;/p&gt;
&lt;p&gt;During reconciliation the result of a dry-run upgrade made with the
&lt;code&gt;HelmRelease&lt;/code&gt; resource is compared to the current deployed Helm
release, and if they differ an upgrade is performed to ensure the defined
and in-cluster state match again.&lt;/p&gt;
&lt;p&gt;You can experience this with your own eyes by rolling back the
modification we just made using &lt;code&gt;helm&lt;/code&gt;, the Helm Operator created
the release with a name composed of the namespace and name of the
&lt;code&gt;HelmRelease&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ helm rollback podinfo
Rollback was a success! Happy Helming!
$ kubectl get pods
NAME                               READY   STATUS        RESTARTS   AGE
default-podinfo-7f9759cc66-w7fj7   1/1     Terminating   0          1m1s
default-podinfo-7f9759cc66-lk45t   1/1     Running       0          2m1s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Watch the Helm Operator reverting the unauthorized modification (this
can take a while, but no longer than 3 minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods -w
NAME                               READY   STATUS              RESTARTS   AGE
default-podinfo-7f9759cc66-lk45t   1/1     Running             0          2m19s
default-podinfo-7f9759cc66-kd5rk   0/1     Pending             0          0s
default-podinfo-7f9759cc66-kd5rk   0/1     Pending             0          0s
default-podinfo-7f9759cc66-kd5rk   0/1     ContainerCreating   0          0s
default-podinfo-7f9759cc66-kd5rk   0/1     Running             0          1s
default-podinfo-7f9759cc66-kd5rk   1/1     Running             0          7s
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    Read more about 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/&#34;&gt;reconciliation and
upgrades&lt;/a&gt; in
the &lt;code&gt;HelmRelease&lt;/code&gt; guide.

&lt;/div&gt;

&lt;h2 id=&#34;uninstalling-the-chart&#34;&gt;Uninstalling the chart&lt;/h2&gt;
&lt;p&gt;To uninstall the chart and clean up the release, simply run &lt;code&gt;kubectl delete&lt;/code&gt; for the resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl delete helmrelease podinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods -w
NAME                               READY   STATUS        RESTARTS   AGE
default-podinfo-7f9759cc66-fr4vb   1/1     Terminating   0          3m30s
default-podinfo-7f9759cc66-kd5rk   1/1     Terminating   0          1m6s
default-podinfo-7f9759cc66-kd5rk   0/1     Terminating   0          1m8s
default-podinfo-7f9759cc66-fr4vb   0/1     Terminating   0          3m32s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delete the Helm Operator by removing the &lt;code&gt;fluxcd&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl delete namespace flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Want to continue testing the Helm Operator or install it in a cluster
environment? Take a look at the available get started guides for more
sophisticated setup options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;/legacy/helm-operator/get-started/using-helm/&#34;&gt;Get started using Helm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;/legacy/helm-operator/get-started/using-kustomize/&#34;&gt;Get started using Kustomize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;/legacy/helm-operator/get-started/using-yamls/&#34;&gt;Get started using YAMLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Want to take a deeper dive in the available features and the
&lt;code&gt;HelmRelease&lt;/code&gt; resource?
&lt;strong&gt;Continue with the 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/introduction/&#34;&gt;&lt;code&gt;HelmRelease&lt;/code&gt; guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Requirements and limitations</title>
      <link>/legacy/flux/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/requirements/</guid>
      <description>
        
        
        &lt;p&gt;Flux has some requirements of the files it finds in your git repo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flux can only deal with one such repo at a time. This limitation is
technical and may go away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flux only deals with YAML files at present. It tries to preserve
comments and whitespace in YAMLs when updating them. You may see
updates with incidental, harmless changes, like reindented blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flux will ignore directories that look like Helm charts, to avoid
applying templated YAML manifests. A directory will be skipped if
its contents include the files &lt;code&gt;Chart.yaml&lt;/code&gt; and &lt;code&gt;values.yaml&lt;/code&gt;, as
these are the (only) mandatory components of a Helm chart.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is &lt;em&gt;not&lt;/em&gt; a requirement that the files are arranged in any
particular way into directories. Flux will look in subdirectories for
YAML files recursively, but does not infer any meaning from the
directory structure.&lt;/p&gt;
&lt;p&gt;Flux uses the Docker Registry API to collect metadata about the images
running in the cluster. This comes with at least one limitation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since Flux runs in a container in your cluster, it may not be able
to resolve all hostnames that you or Kubernetes can resolve. In
particular, it won&amp;rsquo;t be able to get image metadata for images in a
private image registry that&amp;rsquo;s made available at &lt;code&gt;localhost&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Upgrade from alpha (&lt;=0.4.0) to beta</title>
      <link>/legacy/helm-operator/how-to/upgrade-to-beta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/how-to/upgrade-to-beta/</guid>
      <description>
        
        
        &lt;p&gt;The Helm Operator has undergone changes that necessitate some changes
to custom resources, and the deployment of the operator itself.&lt;/p&gt;
&lt;p&gt;The central difference is that the Helm Operator now works with
resources of the kind &lt;code&gt;HelmRelease&lt;/code&gt; in the API version
&lt;code&gt;flux.weave.works/v1beta1&lt;/code&gt;, which have a different format to the
custom resources used by the old Helm Operator (&lt;code&gt;FluxHelmRelease&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here are some things to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new operator will ignore the old custom resources (and the old
operator will ignore the new resources).&lt;/li&gt;
&lt;li&gt;Deleting a resource while the corresponding operator is running
will result in the Helm release also being deleted&lt;/li&gt;
&lt;li&gt;Deleting a &lt;code&gt;CustomResourceDefinition&lt;/code&gt; will also delete all
custom resources of that kind.&lt;/li&gt;
&lt;li&gt;If both operators are running and both new and old custom resources
defining a release, the operators will fight over the release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The safest way to upgrade is to avoid deletions and fights by stopping
the old operator. Replacing it with the new one (e.g., by changing the
deployment, or re-releasing the Flux chart with the new version) will
have that effect.&lt;/p&gt;
&lt;p&gt;Once the old operator is not running, it is safe to deploy the new
operator, and start replacing the old resources with new
resources. You can keep the old resources around during this process,
since the new operator will ignore them.&lt;/p&gt;
&lt;h2 id=&#34;upgrading-the-operator-deployment&#34;&gt;Upgrading the operator deployment&lt;/h2&gt;
&lt;h3 id=&#34;using-the-flux-chart&#34;&gt;Using the Flux chart&lt;/h3&gt;
&lt;p&gt;The chart (from v0.5.0, or from this git repo) provides the
correct arguments to the operator; to upgrade, do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm repo update

helm upgrade flux --reuse-values &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--set image.tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1.8.1 &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--set helmOperator.tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;0.5.1 &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;fluxcd/flux --version 0.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The chart will leave the old custom resource definition and custom
resources in place. You will need to replace the individual resources,
as described below.&lt;/p&gt;
&lt;h3 id=&#34;using-manifests&#34;&gt;Using manifests&lt;/h3&gt;
&lt;p&gt;You will need to adapt any existing manifest that you use to run the
Helm Operator. The arguments to the operator executable have changed,
since it no longer needs the git repo to be specified (and in some
cases, just to tidy up):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the new operator does not use the &lt;code&gt;--git-url&lt;/code&gt;, &lt;code&gt;--git-charts-path&lt;/code&gt;,
or &lt;code&gt;--git-branch&lt;/code&gt; arguments, since the git repo and so on are
provided in each custom resource.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;--queue-worker-count&lt;/code&gt; argument has been removed&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;--chart-sync-timeout&lt;/code&gt; argument has been removed&lt;/li&gt;
&lt;li&gt;other arguments stay the same&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is entirely valid to run the operator with no arguments, which you
may end up with after removing those mentioned above. It will work
with the secrets mounted as for the old operator, to start off with,
since it expects the SSH key for the git repo to be in the same place.&lt;/p&gt;
&lt;p&gt;Once you want to use the new capabilities of the operator &amp;ndash; e.g.,
releasing charts from Helm repos &amp;ndash; you will probably need to adapt
the manifest further. The 
&lt;a href=&#34;../references/helmrelease-custom-resource.md&#34;&gt;&lt;code&gt;HelmRelease&lt;/code&gt; Custom Resource&lt;/a&gt;
and 
&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;operator&lt;/a&gt; references explain all
the details.&lt;/p&gt;
&lt;h2 id=&#34;updating-custom-resources&#34;&gt;Updating custom resources&lt;/h2&gt;
&lt;p&gt;The main differences between the old resource format and the new are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the API version and kind have changed&lt;/li&gt;
&lt;li&gt;you can now specify a chart to release either as a path in a git
repo, or a named, versioned chart from a Helm repo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how to change an old resource to a new resource:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the &lt;code&gt;apiVersion&lt;/code&gt; field to &lt;code&gt;flux.weave.works/v1beta1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;change the &lt;code&gt;kind&lt;/code&gt; field to &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;you can remove the label &lt;code&gt;chart:&lt;/code&gt; from the labels, if it&amp;rsquo;s still
there, just to tidy up (it doesn&amp;rsquo;t matter if it&amp;rsquo;s there or not)&lt;/li&gt;
&lt;li&gt;replace the field &lt;code&gt;chartGitPath&lt;/code&gt;, with the structure:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;URL to git repo&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;optional branch name&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;path from top directory of git repo to chart directory&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;releaseName&lt;/code&gt;, and &lt;code&gt;valueFileSecrets&lt;/code&gt; can stay as
they are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you now give the git repo URL and branch and full path in
each custom resource, rather than supplying arguments to the Helm
operator. (As you&amp;rsquo;ve been using the old operator, you&amp;rsquo;ll only have one
git repo for all charts &amp;ndash; but now you can use different repos for
charts!)&lt;/p&gt;
&lt;p&gt;As a full example, this is an old resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.integrations.flux.weave.works/v1alpha2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FluxHelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foo-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chartGitPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Say the arguments given to the old Helm Operator were&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- --git-url=git@example.com:user/repo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- --git-charts-path=charts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- --git-branch=master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the new custom resource would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux.weave.works/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- change API version&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease                   &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- change kind&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foo-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;git&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git@example.com:user/repo&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- --git-url from operator args&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;charts/foobar           &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- join --git-chart-path and chartGitPath&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;foobar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Using Git over HTTPS</title>
      <link>/legacy/flux/guides/use-git-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/guides/use-git-https/</guid>
      <description>
        
        
        &lt;p&gt;Instead of making use of Flux&#39; capabilities to generate an SSH private
key, or 
&lt;a href=&#34;/legacy/flux/guides/provide-own-ssh-key/&#34;&gt;supplying your own&lt;/a&gt;, it is possible to
set environment variables and use these in your &lt;code&gt;--git-url&lt;/code&gt; argument to
provide your HTTPS basic auth credentials without having to expose them
as a plain value in your workload.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Setting an HTTP(S) URL as &lt;code&gt;--git-url&lt;/code&gt; will disable the
generation of a private key and prevent the setup of the SSH keyring.

&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;The variables &lt;em&gt;must be escaped with &lt;code&gt;$()&lt;/code&gt;&lt;/em&gt; for Kubernetes
to pass the values to the Flux container, e.g. &lt;code&gt;$(GIT_AUTHKEY)&lt;/code&gt;.
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/#using-environment-variables-inside-of-your-config&#34; target=&#34;_blank&#34;&gt;Read more about this Kubernetes feature&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;


&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;Each of the username and password must be percent-encoded, otherwise
the git URL may end up being invalid once they have been interpolated
in. You can encode a string with Perl (assuming your token is in the
environment variable &lt;code&gt;TOKEN&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;$TOKEN&amp;quot; | perl -MURI::Escape -ne &#39;chomp;print uri_escape($_),&amp;quot;\n&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;


&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a personal access token to be used as the &lt;code&gt;GIT_AUTHKEY&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token&#34; target=&#34;_blank&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html&#34; target=&#34;_blank&#34;&gt;BitBucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Kubernetes secret with two environment variables and their
respective values (replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;token/password&amp;gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-git-auth --from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GIT_AUTHUSER&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;username&amp;gt; --from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GIT_AUTHKEY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;token/password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this will result in a secret that has the structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;data&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;GIT_AUTHKEY&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;base64 encoded token/password&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;GIT_AUTHUSER&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;base64 encoded username&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Opaque&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the Kubernetes secret as environment variables using &lt;code&gt;envFrom&lt;/code&gt;
and use them in your &lt;code&gt;--git-url&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;envFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-git-auth&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Replace `github.com/...` with your git repository &lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- --git-url=https://$(GIT_AUTHUSER):$(GIT_AUTHKEY)@github.com/fluxcd/flux-get-started.git&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Watching for source changes</title>
      <link>/docs/gitops-toolkit/source-watcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/gitops-toolkit/source-watcher/</guid>
      <description>
        
        
        &lt;p&gt;In this guide you&amp;rsquo;ll be developing a Kubernetes controller with

&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34; target=&#34;_blank&#34;&gt;Kubebuilder&lt;/a&gt;
that subscribes to 
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;GitRepository&lt;/a&gt;
events and reacts to revision changes by downloading the artifact produced by

&lt;a href=&#34;../components/source/_index.md&#34;&gt;source-controller&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;On your dev machine install the following tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go &amp;gt;= 1.16&lt;/li&gt;
&lt;li&gt;kubebuilder &amp;gt;= 3.0&lt;/li&gt;
&lt;li&gt;kind &amp;gt;= 0.8&lt;/li&gt;
&lt;li&gt;kubectl &amp;gt;= 1.18&lt;/li&gt;
&lt;li&gt;kustomize &amp;gt;= 4.0&lt;/li&gt;
&lt;li&gt;docker &amp;gt;= 19.03&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-flux&#34;&gt;Install Flux&lt;/h2&gt;
&lt;p&gt;Create a cluster for testing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kind create cluster --name dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the Flux CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s https://fluxcd.io/install.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that your dev machine satisfies the prerequisites with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux check --pre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install source-controller on the dev cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux install &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux-system &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--network-policy&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--components&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;source-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;clone-the-sample-controller&#34;&gt;Clone the sample controller&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll be using 
&lt;a href=&#34;https://github.com/fluxcd/source-watcher&#34; target=&#34;_blank&#34;&gt;fluxcd/source-watcher&lt;/a&gt; as
a template for developing your own controller. The source-watcher was scaffolded with &lt;code&gt;kubebuilder init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Clone the source-watcher repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/fluxcd/source-watcher
&lt;span style=&#34;color:#007020&#34;&gt;cd&lt;/span&gt; source-watcher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build the controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-the-controller&#34;&gt;Run the controller&lt;/h2&gt;
&lt;p&gt;Port forward to source-controller artifacts server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux-system port-forward svc/source-controller 8181:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Export the local address as &lt;code&gt;SOURCE_HOST&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;SOURCE_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;localhost:8181
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run source-watcher locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a Git source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;4.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-watcher should log the revision:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;New revision detected   &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;gitrepository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux-system/test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;4.0.0/ab953493ee14c3c9800bda0251e0c507f9741408&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
Extracted tarball into /var/folders/77/3y6x_p2j2g9fspdkzjbm5_s40000gn/T/test292235827: &lt;span style=&#34;color:#40a070&#34;&gt;123&lt;/span&gt; files, &lt;span style=&#34;color:#40a070&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;dirs&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;32.603415ms&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Processing files...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change the Git tag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;4.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-watcher should log the new revision:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;New revision detected   &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;gitrepository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux-system/test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-controller reports the revision under &lt;code&gt;GitRepository.Status.Artifact.Revision&lt;/code&gt; in the format: &lt;code&gt;&amp;lt;branch|tag&amp;gt;/&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_watcher.go&#34; target=&#34;_blank&#34;&gt;GitRepositoryWatcher&lt;/a&gt;
controller does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subscribes to &lt;code&gt;GitRepository&lt;/code&gt; events&lt;/li&gt;
&lt;li&gt;detects when the Git revision changes&lt;/li&gt;
&lt;li&gt;downloads and extracts the source artifact&lt;/li&gt;
&lt;li&gt;write to stdout the extracted file names&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// GitRepositoryWatcher watches GitRepository objects for revision changes
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;type&lt;/span&gt; GitRepositoryWatcher &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	client.Client
	Scheme &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;runtime.Scheme
}

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:rbac:groups=source.toolkit.fluxcd.io,resources=gitrepositories,verbs=get;list;watch
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:rbac:groups=source.toolkit.fluxcd.io,resources=gitrepositories/status,verbs=get
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; (r &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;GitRepositoryWatcher) &lt;span style=&#34;color:#06287e&#34;&gt;Reconcile&lt;/span&gt;(ctx context.Context, req ctrl.Request) (ctrl.Result, &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt;) {
	log &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; logr.&lt;span style=&#34;color:#06287e&#34;&gt;FromContext&lt;/span&gt;(ctx)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// get source object
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; repository sourcev1.GitRepository
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#06287e&#34;&gt;Get&lt;/span&gt;(ctx, req.NamespacedName, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;repository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, client.&lt;span style=&#34;color:#06287e&#34;&gt;IgnoreNotFound&lt;/span&gt;(err)
	}

	log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;New revision detected&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;, repository.Status.Artifact.Revision)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create tmp dir
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	tmpDir, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#06287e&#34;&gt;TempDir&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, repository.Name)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;failed to create temp dir, error: %w&amp;#34;&lt;/span&gt;, err)
	}
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;defer&lt;/span&gt; os.&lt;span style=&#34;color:#06287e&#34;&gt;RemoveAll&lt;/span&gt;(tmpDir)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// download and extract artifact
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	summary, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#06287e&#34;&gt;fetchArtifact&lt;/span&gt;(ctx, repository, tmpDir)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#06287e&#34;&gt;Error&lt;/span&gt;(err, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;unable to fetch artifact&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, err
	}
	log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(summary)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// list artifact content
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	files, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#06287e&#34;&gt;ReadDir&lt;/span&gt;(tmpDir)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;failed to list files, error: %w&amp;#34;&lt;/span&gt;, err)
	}

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// do something with the artifact content
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; _, f &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;range&lt;/span&gt; files {
		log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Processing &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; f.&lt;span style=&#34;color:#06287e&#34;&gt;Name&lt;/span&gt;())
	}

	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; (r &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;GitRepositoryWatcher) &lt;span style=&#34;color:#06287e&#34;&gt;SetupWithManager&lt;/span&gt;(mgr ctrl.Manager) &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.&lt;span style=&#34;color:#06287e&#34;&gt;NewControllerManagedBy&lt;/span&gt;(mgr).
		&lt;span style=&#34;color:#06287e&#34;&gt;For&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;sourcev1.GitRepository{}, builder.&lt;span style=&#34;color:#06287e&#34;&gt;WithPredicates&lt;/span&gt;(GitRepositoryRevisionChangePredicate{})).
		&lt;span style=&#34;color:#06287e&#34;&gt;Complete&lt;/span&gt;(r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To add the watcher to an existing project, copy the controller and the revision change predicate to your &lt;code&gt;controllers&lt;/code&gt; dir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_watcher.go&#34; target=&#34;_blank&#34;&gt;gitrepository_watcher.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_predicate.go&#34; target=&#34;_blank&#34;&gt;gitrepository_predicate.go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In your &lt;code&gt;main.go&lt;/code&gt; init function, register the Source API schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	utilruntime &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/util/runtime&amp;#34;&lt;/span&gt;
	clientgoscheme &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/client-go/kubernetes/scheme&amp;#34;&lt;/span&gt;

	sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;init&lt;/span&gt;() {
	utilruntime.&lt;span style=&#34;color:#06287e&#34;&gt;Must&lt;/span&gt;(clientgoscheme.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme))
	utilruntime.&lt;span style=&#34;color:#06287e&#34;&gt;Must&lt;/span&gt;(sourcev1.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:scaffold:scheme
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start the controller in the main function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;main&lt;/span&gt;()  {

	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err = (&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;controllers.GitRepositoryWatcher{
		Client: mgr.&lt;span style=&#34;color:#06287e&#34;&gt;GetClient&lt;/span&gt;(),
		Scheme: mgr.&lt;span style=&#34;color:#06287e&#34;&gt;GetScheme&lt;/span&gt;(),
	}).&lt;span style=&#34;color:#06287e&#34;&gt;SetupWithManager&lt;/span&gt;(mgr); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		setupLog.&lt;span style=&#34;color:#06287e&#34;&gt;Error&lt;/span&gt;(err, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;unable to create controller&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;GitRepositoryWatcher&amp;#34;&lt;/span&gt;)
		os.&lt;span style=&#34;color:#06287e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;)
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the watcher controller depends on Kubernetes client-go &amp;gt;= 1.21.
Your &lt;code&gt;go.mod&lt;/code&gt; should require controller-runtime v0.9 or newer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#06287e&#34;&gt;require&lt;/span&gt; (
    k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;apimachinery v0&lt;span style=&#34;color:#40a070&#34;&gt;.21.1&lt;/span&gt;
    k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;client&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;go&lt;/span&gt; v0&lt;span style=&#34;color:#40a070&#34;&gt;.21.1&lt;/span&gt;
    sigs.k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;runtime v0&lt;span style=&#34;color:#40a070&#34;&gt;.9.0&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! Happy hacking!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Watching for source changes</title>
      <link>/docs/gitops/source-watcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/gitops/source-watcher/</guid>
      <description>
        
        
        &lt;p&gt;In this guide you&amp;rsquo;ll be developing a Kubernetes controller with

&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34; target=&#34;_blank&#34;&gt;Kubebuilder&lt;/a&gt;
that subscribes to 
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;GitRepository&lt;/a&gt;
events and reacts to revision changes by downloading the artifact produced by

&lt;a href=&#34;../components/source/_index.md&#34;&gt;source-controller&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;On your dev machine install the following tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go &amp;gt;= 1.16&lt;/li&gt;
&lt;li&gt;kubebuilder &amp;gt;= 3.0&lt;/li&gt;
&lt;li&gt;kind &amp;gt;= 0.8&lt;/li&gt;
&lt;li&gt;kubectl &amp;gt;= 1.18&lt;/li&gt;
&lt;li&gt;kustomize &amp;gt;= 4.0&lt;/li&gt;
&lt;li&gt;docker &amp;gt;= 19.03&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-flux&#34;&gt;Install Flux&lt;/h2&gt;
&lt;p&gt;Create a cluster for testing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kind create cluster --name dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the Flux CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s https://fluxcd.io/install.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that your dev machine satisfies the prerequisites with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux check --pre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install source-controller on the dev cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux install &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux-system &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--network-policy&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--components&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;source-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;clone-the-sample-controller&#34;&gt;Clone the sample controller&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll be using 
&lt;a href=&#34;https://github.com/fluxcd/source-watcher&#34; target=&#34;_blank&#34;&gt;fluxcd/source-watcher&lt;/a&gt; as
a template for developing your own controller. The source-watcher was scaffolded with &lt;code&gt;kubebuilder init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Clone the source-watcher repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/fluxcd/source-watcher
&lt;span style=&#34;color:#007020&#34;&gt;cd&lt;/span&gt; source-watcher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build the controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-the-controller&#34;&gt;Run the controller&lt;/h2&gt;
&lt;p&gt;Port forward to source-controller artifacts server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux-system port-forward svc/source-controller 8181:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Export the local address as &lt;code&gt;SOURCE_HOST&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;SOURCE_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;localhost:8181
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run source-watcher locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a Git source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;4.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-watcher should log the revision:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;New revision detected   &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;gitrepository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux-system/test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;4.0.0/ab953493ee14c3c9800bda0251e0c507f9741408&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
Extracted tarball into /var/folders/77/3y6x_p2j2g9fspdkzjbm5_s40000gn/T/test292235827: &lt;span style=&#34;color:#40a070&#34;&gt;123&lt;/span&gt; files, &lt;span style=&#34;color:#40a070&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;dirs&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;32.603415ms&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Processing files...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change the Git tag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git &lt;span style=&#34;color:#007020&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;4.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-watcher should log the new revision:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;New revision detected   &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;gitrepository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux-system/test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source-controller reports the revision under &lt;code&gt;GitRepository.Status.Artifact.Revision&lt;/code&gt; in the format: &lt;code&gt;&amp;lt;branch|tag&amp;gt;/&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_watcher.go&#34; target=&#34;_blank&#34;&gt;GitRepositoryWatcher&lt;/a&gt;
controller does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subscribes to &lt;code&gt;GitRepository&lt;/code&gt; events&lt;/li&gt;
&lt;li&gt;detects when the Git revision changes&lt;/li&gt;
&lt;li&gt;downloads and extracts the source artifact&lt;/li&gt;
&lt;li&gt;write to stdout the extracted file names&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// GitRepositoryWatcher watches GitRepository objects for revision changes
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;type&lt;/span&gt; GitRepositoryWatcher &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	client.Client
	Scheme &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;runtime.Scheme
}

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:rbac:groups=source.toolkit.fluxcd.io,resources=gitrepositories,verbs=get;list;watch
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:rbac:groups=source.toolkit.fluxcd.io,resources=gitrepositories/status,verbs=get
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; (r &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;GitRepositoryWatcher) &lt;span style=&#34;color:#06287e&#34;&gt;Reconcile&lt;/span&gt;(ctx context.Context, req ctrl.Request) (ctrl.Result, &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt;) {
	log &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; logr.&lt;span style=&#34;color:#06287e&#34;&gt;FromContext&lt;/span&gt;(ctx)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// get source object
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;var&lt;/span&gt; repository sourcev1.GitRepository
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#06287e&#34;&gt;Get&lt;/span&gt;(ctx, req.NamespacedName, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;repository); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, client.&lt;span style=&#34;color:#06287e&#34;&gt;IgnoreNotFound&lt;/span&gt;(err)
	}

	log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;New revision detected&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;, repository.Status.Artifact.Revision)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// create tmp dir
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	tmpDir, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#06287e&#34;&gt;TempDir&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, repository.Name)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;failed to create temp dir, error: %w&amp;#34;&lt;/span&gt;, err)
	}
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;defer&lt;/span&gt; os.&lt;span style=&#34;color:#06287e&#34;&gt;RemoveAll&lt;/span&gt;(tmpDir)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// download and extract artifact
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	summary, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#06287e&#34;&gt;fetchArtifact&lt;/span&gt;(ctx, repository, tmpDir)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#06287e&#34;&gt;Error&lt;/span&gt;(err, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;unable to fetch artifact&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, err
	}
	log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(summary)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// list artifact content
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	files, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#06287e&#34;&gt;ReadDir&lt;/span&gt;(tmpDir)
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, fmt.&lt;span style=&#34;color:#06287e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;failed to list files, error: %w&amp;#34;&lt;/span&gt;, err)
	}

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// do something with the artifact content
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; _, f &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;range&lt;/span&gt; files {
		log.&lt;span style=&#34;color:#06287e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Processing &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; f.&lt;span style=&#34;color:#06287e&#34;&gt;Name&lt;/span&gt;())
	}

	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.Result{}, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; (r &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;GitRepositoryWatcher) &lt;span style=&#34;color:#06287e&#34;&gt;SetupWithManager&lt;/span&gt;(mgr ctrl.Manager) &lt;span style=&#34;color:#902000&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; ctrl.&lt;span style=&#34;color:#06287e&#34;&gt;NewControllerManagedBy&lt;/span&gt;(mgr).
		&lt;span style=&#34;color:#06287e&#34;&gt;For&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;sourcev1.GitRepository{}, builder.&lt;span style=&#34;color:#06287e&#34;&gt;WithPredicates&lt;/span&gt;(GitRepositoryRevisionChangePredicate{})).
		&lt;span style=&#34;color:#06287e&#34;&gt;Complete&lt;/span&gt;(r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To add the watcher to an existing project, copy the controller and the revision change predicate to your &lt;code&gt;controllers&lt;/code&gt; dir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_watcher.go&#34; target=&#34;_blank&#34;&gt;gitrepository_watcher.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/source-watcher/blob/main/controllers/gitrepository_predicate.go&#34; target=&#34;_blank&#34;&gt;gitrepository_predicate.go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In your &lt;code&gt;main.go&lt;/code&gt; init function, register the Source API schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	utilruntime &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/apimachinery/pkg/util/runtime&amp;#34;&lt;/span&gt;
	clientgoscheme &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;k8s.io/client-go/kubernetes/scheme&amp;#34;&lt;/span&gt;

	sourcev1 &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;github.com/fluxcd/source-controller/api/v1beta1&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;init&lt;/span&gt;() {
	utilruntime.&lt;span style=&#34;color:#06287e&#34;&gt;Must&lt;/span&gt;(clientgoscheme.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme))
	utilruntime.&lt;span style=&#34;color:#06287e&#34;&gt;Must&lt;/span&gt;(sourcev1.&lt;span style=&#34;color:#06287e&#34;&gt;AddToScheme&lt;/span&gt;(scheme)

	&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// +kubebuilder:scaffold:scheme
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start the controller in the main function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06287e&#34;&gt;main&lt;/span&gt;()  {

	&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; err = (&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;controllers.GitRepositoryWatcher{
		Client: mgr.&lt;span style=&#34;color:#06287e&#34;&gt;GetClient&lt;/span&gt;(),
		Scheme: mgr.&lt;span style=&#34;color:#06287e&#34;&gt;GetScheme&lt;/span&gt;(),
	}).&lt;span style=&#34;color:#06287e&#34;&gt;SetupWithManager&lt;/span&gt;(mgr); err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		setupLog.&lt;span style=&#34;color:#06287e&#34;&gt;Error&lt;/span&gt;(err, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;unable to create controller&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;GitRepositoryWatcher&amp;#34;&lt;/span&gt;)
		os.&lt;span style=&#34;color:#06287e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;)
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the watcher controller depends on Kubernetes client-go &amp;gt;= 1.21.
Your &lt;code&gt;go.mod&lt;/code&gt; should require controller-runtime v0.9 or newer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#06287e&#34;&gt;require&lt;/span&gt; (
    k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;apimachinery v0&lt;span style=&#34;color:#40a070&#34;&gt;.21.1&lt;/span&gt;
    k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;client&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;go&lt;/span&gt; v0&lt;span style=&#34;color:#40a070&#34;&gt;.21.1&lt;/span&gt;
    sigs.k8s.io&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;runtime v0&lt;span style=&#34;color:#40a070&#34;&gt;.9.0&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! Happy hacking!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docs from the ground up</title>
      <link>/docs/contributing/docs/writing-docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/docs/writing-docs/</guid>
      <description>
        
        
        &lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;If you already know &lt;strong&gt;Markdown&lt;/strong&gt;, this is going to be straight-forward. For our docs we use markdown, and we get some additions through the 
&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; static website generator and the 
&lt;a href=&#34;https://docsy.dev&#34; target=&#34;_blank&#34;&gt;Docsy&lt;/a&gt; theme, which we are going to line out here.&lt;/p&gt;
&lt;p&gt;If you are unfamiliar with Markdown, please see &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt; (it&amp;rsquo;s a good cheat-sheet) or &lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;https://www.markdownguide.org/&lt;/a&gt; if you are looking for something more substantial.&lt;/p&gt;
&lt;h2 id=&#34;starting-at-the-top&#34;&gt;Starting at the top&lt;/h2&gt;
&lt;p&gt;Hugo allows you to specify metadata concerning an article at the top of the Markdown file, in a section called &lt;strong&gt;Front Matter&lt;/strong&gt;. The Hugo website has a 
&lt;a href=&#34;https://gohugo.io/content-management/front-matter/&#34; target=&#34;_blank&#34;&gt;great article about it&lt;/a&gt; which explains all the relevant options.&lt;/p&gt;
&lt;p&gt;For now, let&amp;rsquo;s take a look at a quick example which should explain the most relevant entries in Front Matter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: Using Flux on OpenShift
linkTitle: OpenShift
description: &amp;#34;How to bootstrap Flux on OpenShift.&amp;#34;
weight: 20
---

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## OpenShift Setup
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
Steps described in this document have been tested on OpenShift 4.6 only. 

[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The top section between two lines of &lt;code&gt;---&lt;/code&gt; is the Front Matter section. Here we define a couple of entries which tell Hugo how to handle article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;title&lt;/code&gt; is the equivalent of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in a HTML document or &lt;code&gt;# &amp;lt;title&amp;gt;&lt;/code&gt; in a Markdown article&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;linkTitle&lt;/code&gt; is the title to be used in the menu or navbar (usually you might want to pick something shorter and easier to spot)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;description&lt;/code&gt; is shown in a list of documents - maybe the directory you are looking at has a &lt;code&gt;_index.md&lt;/code&gt; document - this is where you would see the list of articles (and the short descriptions). Note you can write multi-line descriptions like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;description: &amp;gt;
  more text here
  here is even more description
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weight&lt;/code&gt; indicates where in the list of documents this is shown. It basically imposes an order on the articles in this directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Mixing Front Matter and top-level headings&lt;/h4&gt;

    Please note: Everything below the Front Matter entry is just the regular Markdown article as you would normally write it. Please note that headings start with &lt;code&gt;## &amp;lt;..&amp;gt;&lt;/code&gt;, as the title is defined in the Front Matter. Mixing Front Matter and &lt;code&gt;# &amp;lt;..&amp;gt;&lt;/code&gt; headings will trip up Hugo and it might error out or not show the article.

&lt;/div&gt;

&lt;h2 id=&#34;linking-to-other-docs&#34;&gt;Linking to other docs&lt;/h2&gt;
&lt;p&gt;You can easily link to other places using either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Absolute URLs, for linking off to external sites like &lt;code&gt;https://github.com&lt;/code&gt; or &lt;code&gt;https://k8s.io&lt;/code&gt; - you can use any of the Markdown notations for this, so
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;https://k8s.io&amp;gt;&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Kubernetes](https://k8s.io)&lt;/code&gt; will work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Link to markdown files in other you can link to the &lt;code&gt;.md&lt;/code&gt; file, or the resulting path. So if you are editing e.g. &lt;code&gt;article1.md&lt;/code&gt; in &lt;code&gt;content/en/docs/section-a&lt;/code&gt; and want to link to &lt;code&gt;article2.md&lt;/code&gt; in the same directory you can use the following:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[link](article2.md)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[link](../article2/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[link](/docs/section-a/article2/)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-the-readers-attention&#34;&gt;Getting the readers attention&lt;/h2&gt;
&lt;p&gt;Sometimes you will need to get the reader&amp;rsquo;s attention and clearly point out an edge case, or the current state of things. A good way to do this is using Docsy&amp;rsquo;s &lt;code&gt;alert&lt;/code&gt; shortcode. Here is a simple example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go-html-template&#34; data-lang=&#34;go-html-template&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;alert&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;title&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;color&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;warning&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
This is a warning.
&lt;span style=&#34;color:#007020&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;&#34;&gt;/&lt;/span&gt;alert&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; keywords are optional.&lt;/p&gt;
&lt;p&gt;Please refer to 
&lt;a href=&#34;https://www.docsy.dev/docs/adding-content/shortcodes/#alert&#34; target=&#34;_blank&#34;&gt;Docsy&amp;rsquo;s documentation&lt;/a&gt; of the feature.&lt;/p&gt;
&lt;h2 id=&#34;media-illustrations-and-more&#34;&gt;Media, illustrations and more&lt;/h2&gt;
&lt;p&gt;If you want to illustrate the documentation and make things easier to read, there are lots of shortcodes either inherited through Hugo or through Docsy. Here is a list of our current favourites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.docsy.dev/docs/adding-content/shortcodes/#pageinfo&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pageinfo&lt;/code&gt;&lt;/a&gt; for quick &amp;ldquo;banner type&amp;rdquo; info boxes&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.docsy.dev/docs/adding-content/shortcodes/#tabbed-panes&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tabpane&lt;/code&gt;&lt;/a&gt; for pieces of text that go in different tabs&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.docsy.dev/docs/adding-content/shortcodes/#card-panes&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cardpane&lt;/code&gt; and &lt;code&gt;card&lt;/code&gt;&lt;/a&gt; for adding cards and card panes&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gist&lt;/code&gt;, &lt;code&gt;youtube&lt;/code&gt;, &lt;code&gt;tweet&lt;/code&gt; and more&lt;/a&gt;: lots of shortcodes we get from Hugo itself.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 转型方法</title>
      <link>/docs/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/get-started/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Basic knowledge&lt;/h4&gt;

    &lt;p&gt;This guide assumes you have some understanding of the core concepts and have read the introduction to Flux.
The core concepts used in this guide are 
&lt;a href=&#34;../concepts/#gitops&#34;&gt;GitOps&lt;/a&gt;,
&lt;p&gt;&lt;a href=&#34;../concepts/#sources&#34;&gt;Sources&lt;/a&gt;,
&lt;a href=&#34;../concepts/#kustomization&#34;&gt;Kustomization&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;In this tutorial, you will deploy an application to a kubernetes cluster with Flux
and manage the cluster in a complete GitOps manner.
You&amp;rsquo;ll be using a dedicated Git repository e.g. &lt;code&gt;fleet-infra&lt;/code&gt; to manage your Kubernetes clusters.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;In order to follow the guide, you will need a Kubernetes cluster version 1.16 or newer and kubectl version 1.18.
For a quick local test, you can use 
&lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34; target=&#34;_blank&#34;&gt;Kubernetes kind&lt;/a&gt;.
Any other Kubernetes setup will work as well though.&lt;/p&gt;
&lt;p&gt;Flux is installed in a GitOps way and its manifest will be pushed to the repository,
so you will also need a GitHub account and a

&lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&#34; target=&#34;_blank&#34;&gt;personal access token&lt;/a&gt;
that can create repositories (check all permissions under &lt;code&gt;repo&lt;/code&gt;) to enable Flux do this.&lt;/p&gt;
&lt;p&gt;Export your GitHub personal access token and username:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;your-token&amp;gt;
&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GITHUB_USER&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;your-username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-the-flux-cli&#34;&gt;Install the Flux CLI&lt;/h2&gt;
&lt;p&gt;To install the latest &lt;code&gt;flux&lt;/code&gt; release on MacOS and Linux using

&lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt; run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install fluxcd/tap/flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or install &lt;code&gt;flux&lt;/code&gt; by downloading precompiled binaries using a Bash script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s https://fluxcd.io/install.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The install script downloads the flux binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If using Arch Linux, install the latest stable version from &lt;strong&gt;AUR&lt;/strong&gt; using
either 
&lt;a href=&#34;https://aur.archlinux.org/packages/flux-bin&#34; target=&#34;_blank&#34;&gt;flux-bin&lt;/a&gt; (pre-built
binary) or 
&lt;a href=&#34;https://aur.archlinux.org/packages/flux-go&#34; target=&#34;_blank&#34;&gt;flux-go&lt;/a&gt; (locally built
binary).&lt;/p&gt;
&lt;p&gt;Binaries for &lt;strong&gt;macOS&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt; and &lt;strong&gt;Linux&lt;/strong&gt; AMD64/ARM are available for download on the

&lt;a href=&#34;https://github.com/fluxcd/flux2/releases&#34; target=&#34;_blank&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To configure your shell to load &lt;code&gt;flux&lt;/code&gt; 
&lt;a href=&#34;./cmd/flux_completion_bash.md&#34;&gt;bash completions&lt;/a&gt; add to your profile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# ~/.bashrc or ~/.bash_profile&lt;/span&gt;
. &amp;lt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;flux completion bash&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
&lt;a href=&#34;./cmd/flux_completion_zsh.md&#34;&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/a&gt;, 
&lt;a href=&#34;./cmd/flux_completion_fish.md&#34;&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/a&gt;, and 
&lt;a href=&#34;./cmd/flux_completion_powershell.md&#34;&gt;&lt;code&gt;powershell&lt;/code&gt;&lt;/a&gt; are also supported with their own sub-commands.&lt;/p&gt;
&lt;h2 id=&#34;install-flux-components&#34;&gt;Install Flux components&lt;/h2&gt;
&lt;p&gt;Create the cluster using Kubernetes kind or set the kubectl context to an existing cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kind create cluster
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that your staging cluster satisfies the prerequisites with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ flux check --pre
► checking prerequisites
✔ kubectl 1.18.3 &amp;gt;=1.18.0
✔ kubernetes 1.18.2 &amp;gt;=1.16.0
✔ prerequisites checks passed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the bootstrap command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$GITHUB_USER&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;fleet-infra &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;./clusters/my-cluster &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --personal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Multi-arch images&lt;/h4&gt;

    The component images are published as 
&lt;a href=&#34;https://docs.docker.com/docker-for-mac/multi-arch/&#34; target=&#34;_blank&#34;&gt;multi-arch container images&lt;/a&gt;
with support for Linux &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;armv7&lt;/code&gt; (e.g. 32bit Raspberry Pi)
architectures.

&lt;/div&gt;

&lt;p&gt;The bootstrap command creates a repository if one doesn&amp;rsquo;t exist,
commits the manifests for the Flux components to the default branch at the specified path,
and installs the Flux components.
Then it configures the target cluster to synchronize with the specified path inside the repository.&lt;/p&gt;
&lt;p&gt;If you wish to create the repository under a GitHub organization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;organization&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;repo-name&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;organization default branch&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --team&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;team1-slug&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --team&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;team2-slug&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;./clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ flux bootstrap github --owner=gitopsrun --team=devs --repository=fleet-infra --path=./clusters/my-cluster 
► connecting to github.com
✔ repository created
✔ devs team access granted
✔ repository cloned
✚ generating manifests
✔ components manifests pushed
► installing components in flux-system namespace
deployment &amp;quot;source-controller&amp;quot; successfully rolled out
deployment &amp;quot;kustomize-controller&amp;quot; successfully rolled out
deployment &amp;quot;helm-controller&amp;quot; successfully rolled out
deployment &amp;quot;notification-controller&amp;quot; successfully rolled out
✔ install completed
► configuring deploy key
✔ deploy key configured
► generating sync manifests
✔ sync manifests pushed
► applying sync manifests
◎ waiting for cluster sync
✔ bootstrap finished
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you prefer GitLab, export &lt;code&gt;GITLAB_TOKEN&lt;/code&gt; env var and
use the command 
&lt;a href=&#34;installation/_index.md#gitlab-and-gitlab-enterprise&#34;&gt;flux bootstrap
gitlab&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Idempotency&lt;/h4&gt;

    It is safe to run the bootstrap command as many times as you want.
If the Flux components are present on the cluster,
the bootstrap command will perform an upgrade if needed.
You can target a specific Flux 
&lt;a href=&#34;https://github.com/fluxcd/flux2/releases&#34; target=&#34;_blank&#34;&gt;version&lt;/a&gt;
with &lt;code&gt;flux bootstrap --version=&amp;lt;semver&amp;gt;&lt;/code&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;clone-the-git-repository&#34;&gt;Clone the git repository&lt;/h2&gt;
&lt;p&gt;We are going to drive app deployments in a GitOps manner,
using the Git repository as the desired state for our cluster.
Instead of applying the manifests directly to the cluster,
Flux will apply it for us instead.&lt;/p&gt;
&lt;p&gt;Therefore, we need to clone the repository to our local machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/&lt;span style=&#34;color:#bb60d5&#34;&gt;$GITHUB_USER&lt;/span&gt;/fleet-infra
&lt;span style=&#34;color:#007020&#34;&gt;cd&lt;/span&gt; fleet-infra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-podinfo-repository-to-flux&#34;&gt;Add podinfo repository to Flux&lt;/h2&gt;
&lt;p&gt;We will be using a public repository 
&lt;a href=&#34;https://github.com/stefanprodan/podinfo&#34; target=&#34;_blank&#34;&gt;github.com/stefanprodan/podinfo&lt;/a&gt;,
podinfo is a tiny web application made with Go.&lt;/p&gt;
&lt;p&gt;Create a 
&lt;a href=&#34;../components/source/gitrepositories/&#34;&gt;GitRepository&lt;/a&gt;
manifest pointing to podinfo repository&amp;rsquo;s master branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;master &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;30s &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --export &amp;gt; ./clusters/my-cluster/podinfo-source.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command generates the following manifest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;30s&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;branch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/stefanprodan/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commit and push it to the &lt;code&gt;fleet-infra&lt;/code&gt; repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git add -A &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Add podinfo GitRepository&amp;#34;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deploy-podinfo-application&#34;&gt;Deploy podinfo application&lt;/h2&gt;
&lt;p&gt;We will create a Flux 
&lt;a href=&#34;../components/kustomize/kustomization/&#34;&gt;Kustomization&lt;/a&gt; manifest for podinfo.
This configures Flux to build and apply the 
&lt;a href=&#34;https://github.com/stefanprodan/podinfo/tree/master/kustomize&#34; target=&#34;_blank&#34;&gt;kustomize&lt;/a&gt;
directory located in the podinfo repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create kustomization podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --source&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;./kustomize&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --prune&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --validation&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;client &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;5m &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --export &amp;gt; ./clusters/my-cluster/podinfo-kustomization.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command generates the following manifest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m0s&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./kustomize&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;prune&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;validation&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;client&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commit and push the &lt;code&gt;Kustomization&lt;/code&gt; manifest to the repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git add -A &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Add podinfo Kustomization&amp;#34;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The structure of your repository should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fleet-infra
└── clusters/
    └── my-cluster/
        ├── flux-system/                        
        │   ├── gotk-components.yaml
        │   ├── gotk-sync.yaml
        │   └── kustomization.yaml
        ├── podinfo-kustomization.yaml
        └── podinfo-source.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;watch-flux-sync-the-application&#34;&gt;Watch Flux sync the application&lt;/h2&gt;
&lt;p&gt;In about 30s the synchronization should start:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ watch flux get kustomizations
NAME            READY   MESSAGE
flux-system     True    Applied revision: main/fc07af652d3168be329539b30a4c3943a7d12dd8
podinfo         True    Applied revision: master/855f7724be13f6146f61a893851522837ad5b634
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the synchronization finishes you can check that podinfo has been deployed on your cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl -n default get deployments,services
NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/podinfo   2/2     2            2           108s

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE
service/podinfo      ClusterIP   10.100.149.126   &amp;lt;none&amp;gt;        9898/TCP,9999/TCP   108s
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;


    From this moment forward, any changes made to the podinfo
Kubernetes manifests in the master branch will be synchronised with your cluster.

&lt;/div&gt;

&lt;p&gt;If a Kubernetes manifest is removed from the podinfo repository, Flux will remove it from your cluster.
If you delete a &lt;code&gt;Kustomization&lt;/code&gt; from the fleet-infra repository, Flux will remove all Kubernetes objects that
were previously applied from that &lt;code&gt;Kustomization&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you alter the podinfo deployment using &lt;code&gt;kubectl edit&lt;/code&gt;, the changes will be reverted to match
the state described in Git. When dealing with an incident, you can pause the reconciliation of a
kustomization with &lt;code&gt;flux suspend kustomization &amp;lt;name&amp;gt;&lt;/code&gt;. Once the debugging session
is over, you can re-enable the reconciliation with &lt;code&gt;flux resume kustomization &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;multi-cluster-setup&#34;&gt;Multi-cluster Setup&lt;/h2&gt;
&lt;p&gt;To use Flux to manage more than one cluster or promote deployments from staging to production, take a look at the
two approaches in the repositories listed below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/flux2-kustomize-helm-example&#34; target=&#34;_blank&#34;&gt;https://github.com/fluxcd/flux2-kustomize-helm-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/flux2-multi-tenancy&#34; target=&#34;_blank&#34;&gt;https://github.com/fluxcd/flux2-multi-tenancy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: fluxctl</title>
      <link>/legacy/flux/references/fluxctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/fluxctl/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;fluxctl&lt;/code&gt; provides an API that can be used from the command line.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--help&lt;/code&gt; for &lt;code&gt;fluxctl&lt;/code&gt; is described below.&lt;/p&gt;
&lt;h2 id=&#34;installing-fluxctl&#34;&gt;Installing &lt;code&gt;fluxctl&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;mac-os&#34;&gt;Mac OS&lt;/h3&gt;
&lt;p&gt;If you are using a Mac and use Homebrew, you can simply run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install fluxctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;h4 id=&#34;ubuntu-and-others-snaps&#34;&gt;Ubuntu (and others): snaps&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.snapcraft.io/installing-snapd&#34; target=&#34;_blank&#34;&gt;Many Linux distributions&lt;/a&gt; support
snaps these days, which makes it very easy to install &lt;code&gt;fluxctl&lt;/code&gt; and stay up to
date.&lt;/p&gt;
&lt;p&gt;To install it, simply run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo snap install fluxctl --classic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you would prefer to track builds from master, run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo snap install fluxctl --edge --classic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;instead.&lt;/p&gt;
&lt;h4 id=&#34;arch-linux&#34;&gt;Arch Linux&lt;/h4&gt;
&lt;p&gt;Install &lt;code&gt;fluxctl&lt;/code&gt; via pacman:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pacman -S fluxctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;h4 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://chocolatey.org/&#34; target=&#34;_blank&#34;&gt;Chocolatey&lt;/a&gt; is a third party package manager for Windows.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t already installed chocolatey you will need to 
&lt;a href=&#34;https://chocolatey.org/install&#34; target=&#34;_blank&#34;&gt;do this first&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;fluxctl can then be installed from the 
&lt;a href=&#34;https://chocolatey.org/packages/fluxctl&#34; target=&#34;_blank&#34;&gt;public package repository&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;choco install fluxctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;binary-releases&#34;&gt;Binary releases&lt;/h3&gt;
&lt;p&gt;With every release of Flux, we release binaries of &lt;code&gt;fluxctl&lt;/code&gt; for Mac, Linux
and Windows. Download them from the 
&lt;a href=&#34;https://github.com/fluxcd/flux/releases&#34; target=&#34;_blank&#34;&gt;Flux release
page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;connecting-fluxctl-to-the-daemon&#34;&gt;Connecting &lt;code&gt;fluxctl&lt;/code&gt; to the daemon&lt;/h2&gt;
&lt;p&gt;By default, &lt;code&gt;fluxctl&lt;/code&gt; will attempt to port-forward to your Flux
instance, assuming it runs in the &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; namespace. You can
specify a different namespace with the &lt;code&gt;--k8s-fwd-ns&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl --k8s-fwd-ns&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;weave list-workloads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The namespace can also be given in the environment variable
&lt;code&gt;FLUX_FORWARD_NAMESPACE&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;FLUX_FORWARD_NAMESPACE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;weave
fluxctl list-workloads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are not able to use the port forward to connect, you will need
some way of connecting to the Flux API directly (NodePort,
LoadBalancer, VPN, etc). &lt;strong&gt;Be aware that exposing the Flux API in this
way is a security hole, because it can be accessed without
authentication.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once that is set up, you can specify an API URL with &lt;code&gt;--url&lt;/code&gt; or the
environment variable &lt;code&gt;FLUX_URL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl --url http://127.0.0.1:3030/api/flux list-workloads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;flux-api-service&#34;&gt;Flux API service&lt;/h3&gt;
&lt;p&gt;Now you can easily query the Flux API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl list-workloads --all-namespaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-an-ssh-deploy-key-to-the-repository&#34;&gt;Add an SSH deploy key to the repository&lt;/h3&gt;
&lt;p&gt;Flux connects to the repository using an SSH key. You have two
options:&lt;/p&gt;
&lt;h4 id=&#34;1-allow-flux-to-generate-a-key-for-you&#34;&gt;1. Allow Flux to generate a key for you&lt;/h4&gt;
&lt;p&gt;If you don&amp;rsquo;t specify a key to use, Flux will create one for you. Obtain
the public key through &lt;code&gt;fluxctl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl identity
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDCN2ECqUFMR413CURbLBcG41fLY75SfVZCd3LCsJBClVlEcMk4lwXxA3X4jowpv2v4Jw2qqiWKJepBf2UweBLmbWYicHc6yboj5o297//+ov0qGt/uRuexMN7WUx6c93VFGV7Pjd60Yilb6GSF8B39iEVq7GQUC1OZRgQnKZWLSQ&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, you can see the public key in the &lt;code&gt;flux&lt;/code&gt; log.&lt;/p&gt;
&lt;p&gt;The public key will need to be given to the service hosting the Git
repository. For example, in GitHub you would create an SSH deploy key
in the repository, supplying that public key.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flux&lt;/code&gt; logs should show that it has now connected to the
repository and synchronised the cluster.&lt;/p&gt;
&lt;p&gt;When using Kubernetes, this key is stored as a Kubernetes secret. You
can restart &lt;code&gt;flux&lt;/code&gt; and it will continue to use the same key.&lt;/p&gt;
&lt;h4 id=&#34;2-specify-a-key-to-use&#34;&gt;2. Specify a key to use&lt;/h4&gt;
&lt;p&gt;Create a Kubernetes Secret from a private key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret generic flux-git-deploy --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;identity&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/full/path/to/private_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this will result in a secret that has the structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;data&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;identity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;base64 encoded RSA PRIVATE KEY&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Opaque&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add the secret to the &lt;code&gt;flux-deployment.yaml&lt;/code&gt; manifest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secret&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretName&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-git-deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And add a volume mount for the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;...&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;fluxd&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;git-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/etc/fluxd/ssh&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can customise the paths and names of the chosen key with the
arguments (examples with defaults): &lt;code&gt;--k8s-secret-name=flux-git-deploy&lt;/code&gt;,
&lt;code&gt;--k8s-secret-volume-mount-path=/etc/fluxd/ssh&lt;/code&gt; and
&lt;code&gt;--k8s-secret-data-key=identity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using an SSH key allows you to maintain control of the repository. You
can revoke permission for &lt;code&gt;flux&lt;/code&gt; to access the repository at any time
by removing the deploy key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl helps you deploy your code.

Connecting:

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# To a fluxd running in namespace &amp;#34;default&amp;#34; in your current kubectl context&lt;/span&gt;
  fluxctl list-workloads

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# To a fluxd running in namespace &amp;#34;weave&amp;#34; in your current kubectl context&lt;/span&gt;
  fluxctl --k8s-fwd-ns&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;weave list-workloads

  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# To a Weave Cloud instance, with your instance token in $TOKEN&lt;/span&gt;
  fluxctl --token &lt;span style=&#34;color:#bb60d5&#34;&gt;$TOKEN&lt;/span&gt; list-workloads

Workflow:
  fluxctl list-workloads                                                   &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Which workloads are running?&lt;/span&gt;
  fluxctl list-images --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/foo                    &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Which images are running/available?&lt;/span&gt;
  fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/foo --update-image&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;bar:v2  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Release new version.&lt;/span&gt;

Usage:
  fluxctl &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;command&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;

Available Commands:
  automate       Turn on automatic deployment &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; a workload.
  deautomate     Turn off automatic deployment &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; a workload.
  &lt;span style=&#34;color:#007020&#34;&gt;help&lt;/span&gt;           Help about any &lt;span style=&#34;color:#007020&#34;&gt;command&lt;/span&gt;
  identity       Display SSH public key
  install        Print and tweak Kubernetes manifests needed to install Flux in a Cluster
  list-images    Show deployed and available images.
  list-workloads List workloads currently running in the cluster.
  lock           Lock a workload, so it cannot be deployed.
  policy         Manage policies &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; a workload.
  release        Release a new version of a workload.
  save           save workload definitions to &lt;span style=&#34;color:#007020&#34;&gt;local&lt;/span&gt; files in cluster-native format
  sync           synchronize the cluster with the git repository, now
  unlock         Unlock a workload, so it can be deployed.
  version        Output the version of fluxctl

Flags:
      --context string                  The kubeconfig context to use
  -h, --help                            &lt;span style=&#34;color:#007020&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; fluxctl
      --k8s-fwd-labels stringToString   Labels used to &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;select&lt;/span&gt; the fluxd pod a port forward should be created &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt;. You can also &lt;span style=&#34;color:#007020&#34;&gt;set&lt;/span&gt; the environment variable FLUX_FORWARD_LABELS &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux&lt;span style=&#34;color:#666&#34;&gt;])&lt;/span&gt;
      --k8s-fwd-ns string               Namespace in which fluxd is running, &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; creating a port forward to access the API. No port forward will be created &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; a URL or token is given. You can also &lt;span style=&#34;color:#007020&#34;&gt;set&lt;/span&gt; the environment variable FLUX_FORWARD_NAMESPACE &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
      --timeout duration                Global &lt;span style=&#34;color:#007020&#34;&gt;command&lt;/span&gt; timeout; you can also &lt;span style=&#34;color:#007020&#34;&gt;set&lt;/span&gt; the environment variable FLUX_TIMEOUT &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;default 1m0s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  -t, --token string                    Weave Cloud authentication token; you can also &lt;span style=&#34;color:#007020&#34;&gt;set&lt;/span&gt; the environment variable WEAVE_CLOUD_TOKEN or FLUX_SERVICE_TOKEN
  -u, --url string                      Base URL of the Flux API &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;defaults to &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;https://cloud.weave.works/api/flux&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;if&lt;/span&gt; a token is provided&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;; you can also &lt;span style=&#34;color:#007020&#34;&gt;set&lt;/span&gt; the environment variable FLUX_URL

Use &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;fluxctl [command] --help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; more information about a command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-fluxctl-install&#34;&gt;Using &lt;code&gt;fluxctl install&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Installs Flux into your cluster, taking as input your Git details and namespace you want to target.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl install --git-url &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;git@github.com:&amp;lt;your username&amp;gt;/flux-get-started&amp;#39;&lt;/span&gt; | kubectl -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See 
&lt;a href=&#34;/legacy/flux/tutorials/get-started/#set-up-flux&#34;&gt;here&lt;/a&gt; for a full tutorial which makes use of &lt;code&gt;fluxctl install&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;workloads&#34;&gt;Workloads&lt;/h2&gt;
&lt;h3 id=&#34;what-is-a-workload&#34;&gt;What is a Workload?&lt;/h3&gt;
&lt;p&gt;This term refers to any cluster resource responsible for the creation of
containers from versioned images - in Kubernetes these are objects such as
Deployments, DaemonSets, StatefulSets and CronJobs.&lt;/p&gt;
&lt;h3 id=&#34;viewing-workloads&#34;&gt;Viewing Workloads&lt;/h3&gt;
&lt;p&gt;The first thing to do is to check whether Flux can see any running
workloads. To do this, use the &lt;code&gt;list-workloads&lt;/code&gt; subcommand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl list-workloads
WORKLOAD                       CONTAINER   IMAGE                                         RELEASE  POLICY
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld:master-a000001  ready
                               sidecar     quay.io/weaveworks/sidecar:master-a000002
default:deployment/busybox     busybox     busybox:1.31.1                                ready
default:deployment/nginx       nginx       nginx:stable-alpine                           ready
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the actual images running will depend on your cluster.&lt;/p&gt;
&lt;p&gt;You can also filter workloads by container name, using the &lt;code&gt;--container|-c&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl list-workloads --container helloworld
WORKLOAD                       CONTAINER   IMAGE                                         RELEASE  POLICY
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld:master-a000001  ready
                               sidecar     quay.io/weaveworks/sidecar:master-a000002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;inspecting-the-version-of-a-container&#34;&gt;Inspecting the Version of a Container&lt;/h3&gt;
&lt;p&gt;Once we have a list of workloads, we can begin to inspect which versions
of the image are running.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl list-images --workload default:deployment/helloworld
WORKLOAD                       CONTAINER   IMAGE                          CREATED
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld
                                           |   master-9a16ff945b9e        &lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 13:19 UTC
                                           |   master-b31c617a0fe3        &lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 13:19 UTC
                                           |   master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;12&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 17:17 UTC
                                           &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;-&amp;gt; master-a000001             12 Jul 16 17:16 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                               sidecar     quay.io/weaveworks/sidecar
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                           &amp;#39;&lt;/span&gt;-&amp;gt; master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 10:05 UTC
                                               master-a000001             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 09:53 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arrows will point to the version that is currently running
alongside a list of other versions and their timestamps.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;fluxctl&lt;/code&gt; in scripts, you can remove the table headers with &lt;code&gt;--no-headers&lt;/code&gt; for both &lt;code&gt;list-images&lt;/code&gt; and &lt;code&gt;list-workloads&lt;/code&gt; command to suppress the header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl list-workloads --no-headers
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld:master-a000001  ready
                               sidecar     quay.io/weaveworks/sidecar:master-a000002
$ fluxctl list-images --workload default:deployment/helloworld --no-headers
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;releasing-a-workload&#34;&gt;Releasing a Workload&lt;/h3&gt;
&lt;p&gt;We can now go ahead and update a workload with the &lt;code&gt;release&lt;/code&gt; subcommand.
This will check whether each workload needs to be updated, and if so,
write the new configuration to the repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;phil --message&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;New version&amp;#34;&lt;/span&gt; --update-all-images
Submitting release ...
Commit pushed: 7dc025c
Applied 7dc025c61fdbbfc2c32f792ad61e6ff52cf0590a
WORKLOAD                     STATUS   UPDATES
default:deployment/helloworld  success  helloworld: quay.io/weaveworks/helloworld:master-a000001 -&amp;gt; master-9a16ff945b9e

$ fluxctl list-images --workload default:deployment/helloworld
WORKLOAD                       CONTAINER   IMAGE                          CREATED
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld
                                           &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;-&amp;gt; master-9a16ff945b9e        20 Jul 16 13:19 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-b31c617a0fe3        20 Jul 16 13:19 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-a000002             12 Jul 16 17:17 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-a000001             12 Jul 16 17:16 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                               sidecar     quay.io/weaveworks/sidecar
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                           &amp;#39;&lt;/span&gt;-&amp;gt; master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 10:05 UTC
                                               master-a000001             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 09:53 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;turning-on-automation&#34;&gt;Turning on Automation&lt;/h3&gt;
&lt;p&gt;Automation can be easily controlled from &lt;code&gt;fluxctl&lt;/code&gt;
with the &lt;code&gt;automate&lt;/code&gt; subcommand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl automate --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld
Commit pushed: af4bf73
WORKLOAD                     STATUS   UPDATES
default:deployment/helloworld  success

$ fluxctl list-workloads --namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default
WORKLOAD                       CONTAINER   IMAGE                                             RELEASE  POLICY
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld:master-9a16ff945b9e ready    automated
                               sidecar     quay.io/weaveworks/sidecar:master-a000002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Automation can also be enabled by adding the annotation
&lt;code&gt;fluxcd.io/automated: &amp;quot;true&amp;quot;&lt;/code&gt; to the deployment.&lt;/p&gt;
&lt;p&gt;We can see that the &lt;code&gt;list-workloads&lt;/code&gt; subcommand reports that the
helloworld application is automated. Flux will now automatically
deploy a new version of a workload whenever one is available and commit
the new configuration to the version control system.&lt;/p&gt;
&lt;h3 id=&#34;turning-off-automation&#34;&gt;Turning off Automation&lt;/h3&gt;
&lt;p&gt;Turning off automation is performed with the &lt;code&gt;deautomate&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl deautomate --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld
Commit pushed: a54ef2c
WORKLOAD                     STATUS   UPDATES
default:deployment/helloworld  success

$ fluxctl list-workloads --namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default
WORKLOAD                       CONTAINER   IMAGE                                             RELEASE  POLICY
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld:master-9a16ff945b9e ready
                               sidecar     quay.io/weaveworks/sidecar:master-a000002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that the workload is no longer automated.&lt;/p&gt;
&lt;h3 id=&#34;rolling-back-a-workload&#34;&gt;Rolling back a Workload&lt;/h3&gt;
&lt;p&gt;Rolling back can be achieved by combining:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#turning-off-automation&#34;&gt;&lt;code&gt;deautomate&lt;/code&gt;&lt;/a&gt; to prevent Flux from automatically updating to newer versions, and&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#releasing-a-workload&#34;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt; to deploy the version you want to roll back to.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl list-images --workload default:deployment/helloworld
WORKLOAD                       CONTAINER   IMAGE                          CREATED
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld
                                           &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;-&amp;gt; master-9a16ff945b9e        20 Jul 16 13:19 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-b31c617a0fe3        20 Jul 16 13:19 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-a000002             12 Jul 16 17:17 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                               master-a000001             12 Jul 16 17:16 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                               sidecar     quay.io/weaveworks/sidecar
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                           &amp;#39;&lt;/span&gt;-&amp;gt; master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 10:05 UTC
                                               master-a000001             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 09:53 UTC

$ fluxctl deautomate --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld
Commit pushed: c07f317
WORKLOAD                       STATUS   UPDATES
default:deployment/helloworld  success

$ fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --update-image&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;quay.io/weaveworks/helloworld:master-a000001
Submitting release ...
Commit pushed: 33ce4e3
Applied 33ce4e38048f4b787c583e64505485a13c8a7836
WORKLOAD                     STATUS   UPDATES
default:deployment/helloworld  success  helloworld: quay.io/weaveworks/helloworld:master-9a16ff945b9e -&amp;gt; master-a000001

$ fluxctl list-images --workload default:deployment/helloworld
WORKLOAD                     CONTAINER   IMAGE                          CREATED
default:deployment/helloworld  helloworld  quay.io/weaveworks/helloworld
                                           |   master-9a16ff945b9e        &lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 13:19 UTC
                                           |   master-b31c617a0fe3        &lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 13:19 UTC
                                           |   master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;12&lt;/span&gt; Jul &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 17:17 UTC
                                           &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;-&amp;gt; master-a000001             12 Jul 16 17:16 UTC
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                               sidecar     quay.io/weaveworks/sidecar
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;                                           &amp;#39;&lt;/span&gt;-&amp;gt; master-a000002             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 10:05 UTC
                                               master-a000001             &lt;span style=&#34;color:#40a070&#34;&gt;23&lt;/span&gt; Aug &lt;span style=&#34;color:#40a070&#34;&gt;16&lt;/span&gt; 09:53 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;locking-a-workload&#34;&gt;Locking a Workload&lt;/h3&gt;
&lt;p&gt;Locking a workload will stop manual or automated releases to that
workload. Changes made in the file will still be synced.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl lock --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;deployment/helloworld
Commit pushed: d726722
WORKLOAD                       STATUS   UPDATES
default:deployment/helloworld  success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;releasing-an-image-to-a-locked-workload&#34;&gt;Releasing an image to a locked workload&lt;/h3&gt;
&lt;p&gt;It may be desirable to release an image to a locked workload while
maintaining the lock afterwards. In order to not having to modify the
lock policy (which includes author and reason), one may use &lt;code&gt;--force&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --update-all-images --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;unlocking-a-workload&#34;&gt;Unlocking a Workload&lt;/h3&gt;
&lt;p&gt;Unlocking a workload allows it to have manual or automated releases
(again).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ fluxctl unlock --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;deployment/helloworld
Commit pushed: 708b63a
WORKLOAD                       STATUS   UPDATES
default:deployment/helloworld  success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;recording-user-and-message-with-the-triggered-action&#34;&gt;Recording user and message with the triggered action&lt;/h3&gt;
&lt;p&gt;Issuing a deployment change results in a version control change/git
commit, keeping the history of the actions. The Flux daemon can be
started with several flags that impact the commit information:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;flag&lt;/th&gt;
&lt;th&gt;purpose&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git-user&lt;/td&gt;
&lt;td&gt;committer name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Weave Flux&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git-email&lt;/td&gt;
&lt;td&gt;committer email&lt;/td&gt;
&lt;td&gt;&lt;code&gt;support@weave.works&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git-set-author&lt;/td&gt;
&lt;td&gt;override the commit author&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Actions triggered by a user through the CLI &lt;code&gt;fluxctl&lt;/code&gt;
tool, can have the commit author information customized. This is handy for providing extra context in the
notifications and history. Whether the customization is possible, depends on the Flux daemon (&lt;code&gt;fluxd&lt;/code&gt;)
&lt;code&gt;git-set-author&lt;/code&gt; flag. If set, the commit author will be customized in the following way:&lt;/p&gt;
&lt;h2 id=&#34;image-tag-filtering&#34;&gt;Image Tag Filtering&lt;/h2&gt;
&lt;p&gt;When building images it is often useful to tag build images by the branch that they were built against for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;quay.io/weaveworks/helloworld:master-9a16ff945b9e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Indicates that the &lt;code&gt;helloworld&lt;/code&gt; image was built against master
commit &lt;code&gt;9a16ff945b9e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When automation is turned on Flux will, by default, use whatever
is the latest image on a given repository. If you want to only
auto-update your image against a certain subset of tags then you
can do that using tag filtering.&lt;/p&gt;
&lt;p&gt;So for example, if you want to only update the &amp;ldquo;helloworld&amp;rdquo; image
to tags that were built against the &amp;ldquo;prod&amp;rdquo; branch then you could
do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag-all&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;prod-*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your pod contains multiple containers then you tag each container
individually:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;helloworld=prod-*&amp;#39;&lt;/span&gt; --tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;sidecar=prod-*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Manual releases without explicit mention of the target image will
also adhere to tag filters.
This will only release the newest image matching the tag filter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --update-all-images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To release an image outside of tag filters, either specify the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --update-image&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;helloworld:dev-abc123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or use &lt;code&gt;--force&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl release --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --update-all-images --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that automation might immediately undo this.&lt;/p&gt;
&lt;h3 id=&#34;filter-pattern-types&#34;&gt;Filter pattern types&lt;/h3&gt;
&lt;p&gt;Flux currently offers support for &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt; and &lt;code&gt;regexp&lt;/code&gt; based filtering.&lt;/p&gt;
&lt;h4 id=&#34;glob&#34;&gt;Glob&lt;/h4&gt;
&lt;p&gt;The glob (&lt;code&gt;*&lt;/code&gt;) filter is the simplest filter Flux supports, a filter can contain
multiple globs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag-all&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;glob:master-v1.*.*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;semver&#34;&gt;Semver&lt;/h4&gt;
&lt;p&gt;If your images use 
&lt;a href=&#34;https://semver.org&#34; target=&#34;_blank&#34;&gt;semantic versioning&lt;/a&gt; you can filter by image tags
that adhere to certain constraints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag-all&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;semver:~1&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or only release images that have a stable semantic version tag (X.Y.Z):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag-all&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;semver:*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using a semver filter will also affect how Flux sorts images, so
that the higher versions will be considered newer.&lt;/p&gt;
&lt;p&gt;Semver has a concept of &amp;ldquo;pre-release&amp;rdquo; versions which have an extra
label like &lt;code&gt;-beta&lt;/code&gt; at the end.  If you want to include these then
write a policy with a hyphen; for example &lt;code&gt;&amp;gt;=1.2.3&lt;/code&gt; will skip
prereleases while &lt;code&gt;&amp;gt;=1.2.3-0&lt;/code&gt; will include prereleases.&lt;/p&gt;
&lt;h4 id=&#34;regexp&#34;&gt;Regexp&lt;/h4&gt;
&lt;p&gt;If your images have complex tags you can filter by regular expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy --workload&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:deployment/helloworld --tag-all&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;regexp:^([a-zA-Z]+)$&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;regexp&lt;/code&gt; it is also possible to use its alias &lt;code&gt;regex&lt;/code&gt;.
Please bear in mind that if you want to match the whole tag,
you must bookend your pattern with &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;controlling-image-timestamps-with-labels&#34;&gt;Controlling image timestamps with labels&lt;/h3&gt;
&lt;p&gt;Some image registries do not expose a reliable creation timestamp for
image tags, which could pose a problem for the automated roll-out of
images.&lt;/p&gt;
&lt;p&gt;To overcome this problem you can define one of the supported labels in
your &lt;code&gt;Dockerfile&lt;/code&gt;. Flux will prioritize labels over the timestamp it
retrieves from the registry.&lt;/p&gt;
&lt;h4 id=&#34;supported-label-formats&#34;&gt;Supported label formats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/opencontainers/image-spec/blob/master/annotations.md#pre-defined-annotation-keys&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;org.opencontainers.image.created&lt;/code&gt;&lt;/a&gt;
date and time on which the image was built (string, date-time as defined by RFC 3339).&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://label-schema.org/rc1/#build-time-labels&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;org.label-schema.build-date&lt;/code&gt;&lt;/a&gt;
date and time on which the image was built (string, date-time as defined by RFC 3339).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;actions-triggered-through-fluxctl&#34;&gt;Actions triggered through &lt;code&gt;fluxctl&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fluxctl&lt;/code&gt; provides the following flags for the message and author customization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  -m, --message string      attach a message to the update
      --user    string      override the user reported as initiating the update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;commit-customization&#34;&gt;Commit customization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Commit message&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;fluxctl --message=&amp;quot;Message providing more context for the action&amp;quot; .....
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Committer&lt;/p&gt;
&lt;p&gt;Committer information can be overriden with the appropriate fluxd flags:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;--git-user
--git-email
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See 
&lt;a href=&#34;/legacy/flux/references/daemon/&#34;&gt;daemon.md&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit author&lt;/p&gt;
&lt;p&gt;The default for the author is the committer information, which can be overriden,
in the following manner:&lt;/p&gt;
&lt;p&gt;a) Default override uses user&amp;rsquo;s git configuration, ie &lt;code&gt;user.name&lt;/code&gt;
and &lt;code&gt;user.email&lt;/code&gt; (.gitconfig) to set the commit author.
If the user has neither user.name nor for
user.email set up, the committer information will be used. If only one
is set up, that will be used.&lt;/p&gt;
&lt;p&gt;b) This can be further overriden by the use of the &lt;code&gt;fluxctl --user&lt;/code&gt; flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fluxctl --user=&amp;quot;Jane Doe &amp;lt;jane@doe.com&amp;gt;&amp;quot; ......&lt;/code&gt;&lt;br&gt;
This will always succeed as git expects a new author in the format
&amp;ldquo;some_string &amp;lt;some_other_string&amp;gt;&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fluxctl --user=&amp;quot;Jane Doe&amp;quot; .......&lt;/code&gt;&lt;br&gt;
This form will succeed if there is already a repo commit, done by
Jane Doe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fluxctl --user=&amp;quot;jane@doe.com&amp;quot; .......&lt;/code&gt;&lt;br&gt;
This form will succeed if there is already a repo commit, done by
&lt;a href=&#34;mailto:jane@doe.com&#34;&gt;jane@doe.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;errors-due-to-author-customization&#34;&gt;Errors due to author customization&lt;/h3&gt;
&lt;p&gt;In case of no prior commit by the specified author, an error will be reported
for 2) and 3):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git commit: fatal: --author &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt; is not &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Name &amp;lt;email&amp;gt;&amp;#39;&lt;/span&gt; and matches
no existing author
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-annotations&#34;&gt;Using Annotations&lt;/h2&gt;
&lt;p&gt;Automation and image tag filtering can also be managed using annotations
(&lt;code&gt;fluxctl&lt;/code&gt; is using the same mechanism).&lt;/p&gt;
&lt;p&gt;Automation can be enabled with &lt;code&gt;fluxcd.io/automated: &amp;quot;true&amp;quot;&lt;/code&gt;. Image
filtering annotations take the form
&lt;code&gt;fluxcd.io/tag.&amp;lt;container-name&amp;gt;: &amp;lt;filter-type&amp;gt;:&amp;lt;filter-value&amp;gt;&lt;/code&gt; or
&lt;code&gt;filter.fluxcd.io/&amp;lt;container-name&amp;gt;: &amp;lt;filter-type&amp;gt;:&amp;lt;filter-value&amp;gt;&lt;/code&gt;. Values of
&lt;code&gt;filter-type&lt;/code&gt; can be 
&lt;a href=&#34;#glob&#34;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;, 
&lt;a href=&#34;#semver&#34;&gt;&lt;code&gt;semver&lt;/code&gt;&lt;/a&gt;, and

&lt;a href=&#34;#regexp&#34;&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/a&gt;. Filter values use the same syntax as when the filter is
configured using &lt;code&gt;fluxctl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a simple but complete deployment file with annotations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;demo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;fluxcd.io/automated&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;fluxcd.io/tag.podinfod&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;semver:~1.3&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;stefanprodan/podinfo:1.3.2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;9898&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- ./podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- --port=9898&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Things to notice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The annotations are made in &lt;code&gt;metadata.annotations&lt;/code&gt;, not in &lt;code&gt;spec.template.metadata&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fluxcd.io/tag.&lt;/code&gt;&amp;hellip; references the container name &lt;code&gt;podinfod&lt;/code&gt;, this will change based on your container name. If you have multiple containers you would have multiple lines like that.&lt;/li&gt;
&lt;li&gt;The value for the &lt;code&gt;fluxcd.io/tag.&lt;/code&gt;&amp;hellip; annotation should includes the filter pattern type, in this case &lt;code&gt;semver&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Annotations can also be used to tell Flux to temporarily ignore certain manifests
using &lt;code&gt;fluxcd.io/ignore: &amp;quot;true&amp;quot;&lt;/code&gt;. Read more about this in the 
&lt;a href=&#34;/legacy/flux/faq/&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started</title>
      <link>/legacy/flux/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/get-started/</guid>
      <description>
        
        
        &lt;p&gt;All you need is a Kubernetes cluster and a git repo. The git repo
contains 
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/overview/&#34; target=&#34;_blank&#34;&gt;manifests&lt;/a&gt;
(as YAML files) describing what should run in the cluster. Flux imposes

&lt;a href=&#34;../requirements.md&#34;&gt;some requirements&lt;/a&gt; on these files.&lt;/p&gt;
&lt;h2 id=&#34;installing-flux&#34;&gt;Installing Flux&lt;/h2&gt;
&lt;p&gt;Here are the instructions to 
&lt;a href=&#34;../tutorials/get-started&#34;&gt;install Flux on your own
cluster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are using Helm, we have a 
&lt;a href=&#34;../tutorials/get-started-helm&#34;&gt;separate section about
this&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started developing</title>
      <link>/legacy/helm-operator/contributing/get-started-developing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/contributing/get-started-developing/</guid>
      <description>
        
        
        &lt;p&gt;This guide shows you how to make a small change to the Helm Operator and then build and test that change locally using a Kind cluster.&lt;/p&gt;
&lt;h2 id=&#34;prepare-your-environment&#34;&gt;Prepare your environment&lt;/h2&gt;
&lt;p&gt;To get started you will need to prepare your development environment, the following will need to be installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.docker.com/install/&#34; target=&#34;_blank&#34;&gt;docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34; target=&#34;_blank&#34;&gt;kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://helm.sh/docs/intro/quickstart/&#34; target=&#34;_blank&#34;&gt;helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configure-kind&#34;&gt;Configure Kind&lt;/h3&gt;
&lt;p&gt;You will want to create a Kind cluster with a 
&lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/local-registry/&#34; target=&#34;_blank&#34;&gt;local registry&lt;/a&gt; so that you have somewhere to easily push your helm-operator image without relying on an external registry, you can do this by running the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;KIND_CLUSTER_NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  sh -c &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;curl -sSL https://kind.sigs.k8s.io/examples/kind-with-registry.sh&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now have your local development environment ready to make a change to the Helm Operator, continue on to see how to make your first change and deploy it to the Kind cluster.&lt;/p&gt;
&lt;h2 id=&#34;make-the-change&#34;&gt;Make the change&lt;/h2&gt;
&lt;p&gt;Your first change will involve adding a new field to the HelmRelease CRD that will simply output a custom log message when applying the release, first you will need to modify the CRD definition to add the new field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a00000&#34;&gt;--- a/pkg/apis/helm.fluxcd.io/v1/types_helmrelease.go
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/pkg/apis/helm.fluxcd.io/v1/types_helmrelease.go
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -420,6 +420,9 @@ type HelmReleaseSpec struct {
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;        // Values holds the values for this Helm release.
        // +optional
        Values HelmValues `json:&amp;#34;values,omitempty&amp;#34;`
&lt;span style=&#34;color:#00a000&#34;&gt;+       // A custom message to emit when applying the release.
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+       // +optional
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+       EchoMessage *string `json:&amp;#34;echoMessage,omitempty&amp;#34;`
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now modify the sync process to output your message if it has been set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a00000&#34;&gt;--- a/pkg/release/release.go
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/pkg/release/release.go
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -74,6 +74,10 @@ func (r *Release) Sync(hr *v1.HelmRelease) (err error) {
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;        logger := releaseLogger(r.logger, client, hr)
        logger.Log(&amp;#34;info&amp;#34;, &amp;#34;starting sync run&amp;#34;)
 
&lt;span style=&#34;color:#00a000&#34;&gt;+       if hr.Spec.EchoMessage != nil {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+               logger.Log(&amp;#34;info&amp;#34;, *hr.Spec.EchoMessage)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+       }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;        chart, cleanup, err := r.prepareChart(client, hr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That should be all that is needed for your first change, you can now move on to building and pushing the image so that you can see your changes in action.&lt;/p&gt;
&lt;h2 id=&#34;building&#34;&gt;Building&lt;/h2&gt;
&lt;p&gt;The next step is to build everything, as you have made changes to the CRD you will first want to run the code-generation tasks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can build everything else including the Docker image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pushing-the-image&#34;&gt;Pushing the image&lt;/h2&gt;
&lt;p&gt;Once everything is successfully built you should be ready to push the image to your local Kind registry, you will have to re-tag the image and then push it to the local registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Tag the image&lt;/span&gt;
docker tag &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;fluxcd/helm-operator:&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;./docker/image-tag&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;localhost:5000/helm-operator:&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;./docker/image-tag&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Push the image&lt;/span&gt;
docker push &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;localhost:5000/helm-operator:&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;./docker/image-tag&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deploying-your-changes&#34;&gt;Deploying your changes&lt;/h2&gt;
&lt;p&gt;You can now deploy your changes to the Kind cluster using your newly built and pushed image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Create fluxcd namespace&lt;/span&gt;
kubectl create namespace fluxcd

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Apply HelmRelease CRD&lt;/span&gt;
kubectl apply -f deploy/crds.yaml

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Install helm-operator using pushed image&lt;/span&gt;
helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --namespace fluxcd &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --set helm.versions&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3 &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --set image.repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;localhost:5000/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --set image.tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;./docker/image-tag&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now have an instance of the Helm Operator running with your changes!&lt;/p&gt;
&lt;h2 id=&#34;see-your-changes-in-action&#34;&gt;See your changes in action&lt;/h2&gt;
&lt;p&gt;To see your changes in action, first deploy a HelmRelease setting the new &lt;code&gt;echoMessage&lt;/code&gt; field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: helm.fluxcd.io/v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: HelmRelease
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  echoMessage: This is a test
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  releaseName: podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  chart:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    repository: https://stefanprodan.github.io/podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    version: 2.1.0
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    name: podinfo
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  values:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    replicaCount: 1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the release is deployed you can view the helm-operator pods logs to see your emitted message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; kubectl logs -n fluxcd --tail&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;25&lt;/span&gt; --selector&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;helm-operator

...
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2020-04-15T20:35:16.249414781Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release.go:78 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release &lt;span style=&#34;color:#bb60d5&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;targetNamespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default &lt;span style=&#34;color:#bb60d5&#34;&gt;resource&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:helmrelease/podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;helmVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3 &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;This is a test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2020-04-15T20:35:16.540354042Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release.go:272 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release &lt;span style=&#34;color:#bb60d5&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;targetNamespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default &lt;span style=&#34;color:#bb60d5&#34;&gt;resource&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:helmrelease/podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;helmVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3 &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;running installation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;phase&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;install
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2020-04-15T20:35:16.89689355Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;helm.go:69 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;helm &lt;span style=&#34;color:#bb60d5&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3 &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;creating 3 resource(s)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;targetNamespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default &lt;span style=&#34;color:#bb60d5&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo
&lt;span style=&#34;color:#bb60d5&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2020-04-15T20:35:16.938861204Z &lt;span style=&#34;color:#bb60d5&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release.go:281 &lt;span style=&#34;color:#bb60d5&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;release &lt;span style=&#34;color:#bb60d5&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;targetNamespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default &lt;span style=&#34;color:#bb60d5&#34;&gt;resource&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default:helmrelease/podinfo &lt;span style=&#34;color:#bb60d5&#34;&gt;helmVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3 &lt;span style=&#34;color:#bb60d5&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;installation succeeded&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;revision&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2.1.0 &lt;span style=&#34;color:#bb60d5&#34;&gt;phase&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;install
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations!&lt;/h2&gt;
&lt;p&gt;You did it! you made your first change to the HelmRelease CRD, built, deployed and ran an instance of the Helm Operator to see it in action.&lt;/p&gt;
&lt;p&gt;You should now hopefully be more comfortable with making changes and running the Helm Operator locally, and be ready to tackle your 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3A%22help&amp;#43;wanted%22&#34; target=&#34;_blank&#34;&gt;first issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To find out more about the Helm Operator community and our contribution workflow have a look at the 
&lt;a href=&#34;introduction.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: How to bootstrap Flux using Kustomize</title>
      <link>/legacy/flux/tutorials/get-started-kustomize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/tutorials/get-started-kustomize/</guid>
      <description>
        
        
        &lt;p&gt;This guide shows you how to use Kustomize to bootstrap Flux on a Kubernetes cluster.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will need to have Kubernetes set up. For a quick local test,
you can use &lt;code&gt;minikube&lt;/code&gt; or &lt;code&gt;kubeadm&lt;/code&gt;. Any other Kubernetes setup
will work as well though.&lt;/p&gt;
&lt;h3 id=&#34;a-note-on-gke-with-rbac-enabled&#34;&gt;A note on GKE with RBAC enabled&lt;/h3&gt;
&lt;p&gt;If working on e.g. GKE with RBAC enabled, you will need to add a cluster role binding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create clusterrolebinding &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cluster-admin-&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --clusterrole&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cluster-admin &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;gcloud config get-value core/account&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;prepare-flux-installation&#34;&gt;Prepare Flux installation&lt;/h2&gt;
&lt;p&gt;First you&amp;rsquo;ll need a git repository to store your cluster desired state.
In our example we are going to use 
&lt;a href=&#34;https://github.com/fluxcd/flux-get-started&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fluxcd/flux-get-started&lt;/code&gt;&lt;/a&gt;.
If you want to use that too, be sure to create a fork of it on GitHub.&lt;/p&gt;
&lt;p&gt;Create a directory, and add a &lt;code&gt;kustomization.yaml&lt;/code&gt; file that uses the
Flux deploy YAMLs as a base:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; fluxcd/kustomization.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;namespace: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;bases:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  - github.com/fluxcd/flux//deploy
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;patchesStrategicMerge:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  - patch.yaml
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    If you want to install a specific Flux release,
add the version number to the base URL:
&lt;code&gt;github.com/fluxcd/flux//deploy?ref=v1.14.1&lt;/code&gt;

&lt;/div&gt;

&lt;p&gt;Create a patch file for Flux deployment and set the &lt;code&gt;--git-url&lt;/code&gt;
parameter to point to the config repository
(replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub username):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;YOURUSER&amp;#34;&lt;/span&gt;
cat &amp;gt; fluxcd/patch.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  namespace: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - name: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          args:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --manifest-generation=true
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --memcached-hostname=memcached.flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --memcached-service=
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --ssh-keygen-dir=/var/fluxd/keygen
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --git-branch=master
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --git-path=namespaces,workloads
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --git-user=${GHUSER}
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --git-email=${GHUSER}@users.noreply.github.com
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - --git-url=git@github.com:${GHUSER}/flux-get-started
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We set &lt;code&gt;--git-path=namespaces,workloads&lt;/code&gt; to exclude Helm manifests.
If you want to get started with Helm, please refer to the

&lt;a href=&#34;/legacy/flux/tutorials/get-started-helm/&#34;&gt;&amp;ldquo;Get started with Flux using Helm&amp;rdquo;&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;h3 id=&#34;overwriting-the-default-namespace&#34;&gt;Overwriting the default namespace&lt;/h3&gt;
&lt;p&gt;Overwriting the default (&lt;code&gt;flux&lt;/code&gt;) namespace is possible by defining
your own namespace and accordingly setting the &lt;code&gt;namespace:&lt;/code&gt; key in
the &lt;code&gt;kustomization.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Create your own namespace definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; fluxcd/namespace.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Namespace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: &amp;lt;namespace&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adapt your &lt;code&gt;fluxcd/kustomization.yaml&lt;/code&gt; to include your own namespace
resource and change the namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;namespace&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- namespace.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bases&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- github.com/fluxcd/flux//deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- patch.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-flux-with-kustomize&#34;&gt;Install Flux with Kustomize&lt;/h2&gt;
&lt;p&gt;In the next step, deploy Flux to the cluster (you&amp;rsquo;ll need kubectl &lt;strong&gt;1.14&lt;/strong&gt; or newer):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -k fluxcd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait for Flux to start:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux rollout status deployment/flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setup-github-write-access&#34;&gt;Setup GitHub write access&lt;/h2&gt;
&lt;p&gt;At startup Flux generates a SSH key and logs the public key. Find
the SSH public key by installing 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;fluxctl&lt;/a&gt; and
running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl identity --k8s-fwd-ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to sync your cluster state with git you need to copy the
public key and create a deploy key with write access on your GitHub
repository.&lt;/p&gt;
&lt;p&gt;Open GitHub, navigate to your fork, go to &lt;strong&gt;Setting &amp;gt; Deploy keys&lt;/strong&gt;,
click on &lt;strong&gt;Add deploy key&lt;/strong&gt;, give it a &lt;code&gt;Title&lt;/code&gt;, check &lt;strong&gt;Allow write
access&lt;/strong&gt;, paste the Flux public key and click &lt;strong&gt;Add key&lt;/strong&gt;. See the

&lt;a href=&#34;https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys&#34; target=&#34;_blank&#34;&gt;GitHub docs&lt;/a&gt;
for more info on how to manage deploy keys.&lt;/p&gt;
&lt;h2 id=&#34;committing-a-small-change&#34;&gt;Committing a small change&lt;/h2&gt;
&lt;p&gt;In this example we&amp;rsquo;ll be making a configuration change to a web application
and display a different message in the UI.&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;YOURUSER&lt;/code&gt; in
&lt;code&gt;https://github.com/YOURUSER/flux-get-started/blob/master/workloads/podinfo-dep.yaml&lt;/code&gt;
with your GitHub ID), open the URL in your browser, edit the file,
change the &lt;code&gt;PODINFO_UI_MESSAGE&lt;/code&gt; env var to &lt;code&gt;Welcome to Flux&lt;/code&gt; and commit the file.&lt;/p&gt;
&lt;p&gt;By default, Flux git pull frequency is set to 5 minutes.
You can tell Flux to sync the changes immediately with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl sync --k8s-fwd-ns flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;confirm-the-change-landed&#34;&gt;Confirm the change landed&lt;/h2&gt;
&lt;p&gt;To access our webservice and check out its welcome message, simply
run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n demo port-forward deployment/podinfo 9898:9898 &amp;amp;
curl localhost:9898
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the updated &lt;code&gt;message&lt;/code&gt; value in the JSON reply.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Try out 
&lt;a href=&#34;https://github.com/weaveworks/flux-kustomize-example&#34; target=&#34;_blank&#34;&gt;flux-kustomize-example&lt;/a&gt;
for using Flux with Kustomize to manage
a staging and production clusters while minimizing duplicated declarations.&lt;/p&gt;
&lt;p&gt;Try out 
&lt;a href=&#34;https://github.com/fluxcd/multi-tenancy&#34; target=&#34;_blank&#34;&gt;fluxcd/multi-tenancy&lt;/a&gt;
for using Flux with Kustomize to manage a multi-tenant cluster.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Setup Notifications</title>
      <link>/docs/iac/notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iac/notifications/</guid>
      <description>
        
        
        &lt;p&gt;When operating a cluster, different teams may wish to receive notifications about
the status of their GitOps pipelines.
For example, the on-call team would receive alerts about reconciliation
failures in the cluster, while the dev team may wish to be alerted when a new version
of an app was deployed and if the deployment is healthy.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To follow this guide you&amp;rsquo;ll need a Kubernetes cluster with Flux installed on it.
Please see the 
&lt;a href=&#34;/docs/get-started/&#34;&gt;get started guide&lt;/a&gt;
or the 
&lt;a href=&#34;../installation/&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Flux controllers emit Kubernetes events whenever a resource status changes.
You can use the 
&lt;a href=&#34;../components/notification/_index.md&#34;&gt;notification-controller&lt;/a&gt;
to forward these events to Slack, Microsoft Teams, Discord and others.
The notification controller is part of the default Flux installation.&lt;/p&gt;
&lt;h2 id=&#34;define-a-provider&#34;&gt;Define a provider&lt;/h2&gt;
&lt;p&gt;First create a secret with your Slack incoming webhook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux-system create secret generic slack-url &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;address&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the secret must contain an &lt;code&gt;address&lt;/code&gt; field,
it can be a Slack, Microsoft Teams, Discord or Rocket webhook URL.&lt;/p&gt;
&lt;p&gt;Create a notification provider for Slack by referencing the above secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Provider&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;slack&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;slack&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;channel&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;general&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;slack-url&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The provider type can be &lt;code&gt;slack&lt;/code&gt;, &lt;code&gt;msteams&lt;/code&gt;, &lt;code&gt;discord&lt;/code&gt;, &lt;code&gt;rocket&lt;/code&gt;, &lt;code&gt;googlechat&lt;/code&gt;, &lt;code&gt;webex&lt;/code&gt;, &lt;code&gt;sentry&lt;/code&gt; or &lt;code&gt;generic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When type &lt;code&gt;generic&lt;/code&gt; is specified, the notification controller will post the incoming

&lt;a href=&#34;../components/notification/event.md&#34;&gt;event&lt;/a&gt; in JSON format to the webhook address.
This way you can create custom handlers that can store the events in
Elasticsearch, CloudWatch, Stackdriver, etc.&lt;/p&gt;
&lt;h2 id=&#34;define-an-alert&#34;&gt;Define an alert&lt;/h2&gt;
&lt;p&gt;Create an alert definition for all repositories and kustomizations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Alert&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;on&lt;/span&gt;-call-webapp&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;providerRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;slack&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSeverity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;info&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the above files or commit them to the &lt;code&gt;fleet-infra&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;To verify that the alert has been acknowledge by the notification controller do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl -n flux-system get alerts

NAME             READY   STATUS        AGE
on-call-webapp   True    Initialized   1m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Multiple alerts can be used to send notifications to different channels or Slack organizations.&lt;/p&gt;
&lt;p&gt;The event severity can be set to &lt;code&gt;info&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;.
When the severity is set to &lt;code&gt;error&lt;/code&gt;, the kustomize controller will alert on any error
encountered during the reconciliation process.
This includes kustomize build and validation errors,
apply errors and health check failures.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/slack-error-alert.png&#34; alt=&#34;error alert&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the verbosity is set to &lt;code&gt;info&lt;/code&gt;, the controller will alert if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Kubernetes object was created, updated or deleted&lt;/li&gt;
&lt;li&gt;heath checks are passing&lt;/li&gt;
&lt;li&gt;a dependency is delaying the execution&lt;/li&gt;
&lt;li&gt;an error occurs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/slack-info-alert.png&#34; alt=&#34;info alert&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-commit-status&#34;&gt;Git commit status&lt;/h2&gt;
&lt;p&gt;The GitHub, GitLab, Bitbucket, and Azure DevOps providers are slightly different to the other providers. Instead of
a stateless stream of events, the git notification providers will link the event with accompanying git commit which
triggered the event. The linking is done by updating the commit status of a specific commit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-status-checks&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.gitlab.com/ee/api/commits.html&#34; target=&#34;_blank&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://developer.atlassian.com/server/bitbucket/how-tos/updating-build-status-for-commits/&#34; target=&#34;_blank&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/rest/api/azure/devops/git/statuses?view=azure-devops-rest-6.0&#34; target=&#34;_blank&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In GitHub the commit status set by notification-controller will result in a green checkmark or red cross next to the commit hash.
Clicking the icon will show more detailed information about the status.
&lt;img src=&#34;/img/commit-status-github-overview.png&#34; alt=&#34;commit status GitHub overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;Receiving an event in the form of a commit status rather than a message in a chat conversation has the benefit
that it closes the deployment loop giving quick and visible feedback if a commit has reconciled and if it succeeded.
This means that a deployment will work in a similar manner that people are used to with &amp;ldquo;traditional&amp;rdquo; push based CD pipelines.
Additionally the status can be fetched from the git providers API for a specific commit. Allowing for custom automation tools
that can automatically promote, commit to a new directory, after receiving a successful commit status. This can all be
done without requiring any access to the Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;As stated before the provider works by referencing the same git repository as the Kustomization controller does.
When a new commit is pushed to the repository, source-controller will sync the commit, triggering the kustomize-controller
to reconcile the new commit. After this is done the kustomize-controller sends an event to the notification-controller
with the result and the commit hash it reconciled. Then notification-controller can update the correct commit and repository
when receiving the event.
&lt;img src=&#34;/img/commit-status-flow.png&#34; alt=&#34;commit status flow&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Limitations&lt;/h4&gt;

    The git notification providers require that a commit hash present in the meta data
of the event. There for the providers will only work with &lt;code&gt;Kustomization&lt;/code&gt; as an
event source, as it is the only resource which includes this data.

&lt;/div&gt;

&lt;p&gt;First follow the 
&lt;a href=&#34;../../get-started&#34;&gt;get started guide&lt;/a&gt; if you do not have a Kubernetes cluster with Flux installed in it.
You will need a authentication token to communicate with the API. The authentication method depends on
the git provider used, refer to the 
&lt;a href=&#34;../../components/notification/provider/#git-commit-status&#34;&gt;Provider CRD&lt;/a&gt;
for details about how to get the correct token. The guide will use GitHub, but the other providers will work in a very similar manner.
The token will need to have write access to the repository it is going to update the commit status in.
Store the generated token in a Secret with the following data format in the cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;github&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;data&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;token&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When sending notification events the kustomization-controller will include the commit hash related to the event.
Note that the commit hash in the event does not come from the git repository the &lt;code&gt;Kustomization&lt;/code&gt; resource
comes from but rather the kustomization source ref. This mean that commit status notifications will not work
if the manifests comes from a repository which the API token is not allowed to write to.&lt;/p&gt;
&lt;p&gt;Copy the manifest content in the &amp;ldquo;
&lt;a href=&#34;https://github.com/stefanprodan/podinfo/tree/master/kustomize&#34; target=&#34;_blank&#34;&gt;kustomize&lt;/a&gt;&amp;rdquo; directory
into the directory &amp;ldquo;./clusters/my-cluster/podinfo&amp;rdquo; in your fleet-infra repository. Make sure that you also add the
namespace podinfo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Namespace&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then create a Kustomization to deploy podinfo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;5m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;targetNamespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./clusters/my-cluster/podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;prune&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;sourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;healthChecks&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creating a git provider is very similar to creating other types of providers.
The only caveat being that the provider address needs to point to the same
git repository as the event source originates from.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Provider&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;github&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;address&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/&amp;lt;username&amp;gt;/fleet-infra&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;github&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Alert&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;providerRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSeverity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;info&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;eventSources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By now the fleet-infra repository should have a similar directory structure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fleet-infra
└── clusters/
    └── my-cluster/
        ├── flux-system/
        │   ├── gotk-components.yaml
        │   ├── gotk-sync.yaml
        │   └── kustomization.yaml
        ├── podinfo/
        │   ├── namespace.yaml
        │   ├── deployment.yaml
        │   ├── hpa.yaml
        │   ├── service.yaml
        │   └── kustomization.yaml
        ├── podinfo-kustomization.yaml
        └── podinfo-notification.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If podinfo is deployed and the health checks pass you should get a successful status in
your forked podinfo repository.&lt;/p&gt;
&lt;p&gt;If everything is setup correctly there should now be a green check-mark next to the latest commit.
Clicking the check-mark should show a detailed view.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GitHub&lt;/th&gt;
&lt;th&gt;GitLab&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;/img/commit-status-github-success.png&#34; alt=&#34;commit status GitHub successful&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/img/commit-status-gitlab-success.png&#34; alt=&#34;commit status GitLab successful&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Generate error&lt;/p&gt;
&lt;p&gt;A deployment failure can be forced by setting an invalid image tag in the podinfo deployment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfod&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ghcr.io/stefanprodan/podinfo:fake&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the commit has been reconciled it should return a failed commit status.
This is where the health check in the Kustomization comes into play together
with the timeout. The health check is used to asses the health of the Kustomization.
A failed commit status will not be sent until the health check timeout. Setting
a lower timeout will give feedback faster, but may sometimes not allow enough time
for a new application to deploy.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GitHub&lt;/th&gt;
&lt;th&gt;GitLab&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;/img/commit-status-github-failure.png&#34; alt=&#34;commit status GitHub failure&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/img/commit-status-gitlab-failure.png&#34; alt=&#34;commit status GitLab failure&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;status-changes&#34;&gt;Status changes&lt;/h3&gt;
&lt;p&gt;The provider will continuously receive events as they happen, and multiple events may
be received for the same commit hash. The git providers are configured to only update
the status if the status has changed. This is to avoid spamming the commit status
history with the same status over and over again.&lt;/p&gt;
&lt;p&gt;There is an aspect of state fullness that needs to be considered, compared to the other
notification providers, as the events are stored by the git provider. This means that
the status of a commit can change over time. Initially a deployment may be healthy, resulting
in a successful status. Down the line the application, and the health check, may start failing
due to the amount of traffic it receives or external dependencies no longer being available.
The change in the health check would cause the status to go from successful to failed.
It is important to keep this in mind when building any automation tools that deals with the
status, and consider the fact that receiving a successful status once does not mean it will
always be successful.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Using a private Git host</title>
      <link>/legacy/flux/guides/use-private-git-host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/guides/use-private-git-host/</guid>
      <description>
        
        
        &lt;p&gt;If you&amp;rsquo;re using your own git host &amp;ndash; e.g., your own installation of
gitlab, or bitbucket server &amp;ndash; you will need to add its host key to
&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; in the Flux daemon container.&lt;/p&gt;
&lt;p&gt;First, run a check that you can clone the repo. The following assumes
that your git server&amp;rsquo;s hostname (e.g., &lt;code&gt;githost&lt;/code&gt;) is in &lt;code&gt;$GITHOST&lt;/code&gt; and
the URL you&amp;rsquo;ll use to access the repository (e.g.,
&lt;code&gt;user@githost:path/to/repo&lt;/code&gt;) is in &lt;code&gt;$GITREPO&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Find the fluxd daemon pod:&lt;/span&gt;
$ kubectl get pods --all-namespaces -l &lt;span style=&#34;color:#bb60d5&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux
NAMESPACE   NAME                    READY     STATUS    RESTARTS   AGE
weave       flux-85cdc6cdfc-n2tgf   1/1       Running   &lt;span style=&#34;color:#40a070&#34;&gt;0&lt;/span&gt;          1h

$ kubectl &lt;span style=&#34;color:#007020&#34;&gt;exec&lt;/span&gt; -n weave flux-85cdc6cdfc-n2tgf -ti -- &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    env &lt;span style=&#34;color:#bb60d5&#34;&gt;GITHOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$GITHOST&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GITREPO&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$GITREPO&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;container&lt;/span&gt;$&lt;span style=&#34;color:#4070a0&#34;&gt; &amp;#34;&lt;/span&gt; /bin/sh

container$ git clone &lt;span style=&#34;color:#bb60d5&#34;&gt;$GITREPO&lt;/span&gt;
Cloning into &amp;lt;repository name&amp;gt;...
No ECDSA host key is known &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt;  &amp;lt;GITHOST&amp;gt; and you have requested strict checking.
Host key verification failed.
fatal: Could not &lt;span style=&#34;color:#007020&#34;&gt;read&lt;/span&gt; from remote repository

container$ &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# ^ that was expected. Now we&amp;#39;ll try with a modified known_hosts&lt;/span&gt;
container$ ssh-keyscan &lt;span style=&#34;color:#bb60d5&#34;&gt;$GITHOST&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/known_hosts
container$ git clone &lt;span style=&#34;color:#bb60d5&#34;&gt;$GITREPO&lt;/span&gt;
Cloning into &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &lt;code&gt;git clone&lt;/code&gt; doesn&amp;rsquo;t succeed, you&amp;rsquo;ll need to check that the SSH key
has been installed properly first, then come back. &lt;code&gt;ssh -vv $GITHOST&lt;/code&gt;
from within the container may help debug it.&lt;/p&gt;
&lt;p&gt;If it &lt;em&gt;did&lt;/em&gt; work, you will need to make it a more permanent
arrangement. Back in that shell, create a ConfigMap for the cluster. To
make sure the ConfigMap is created in the namespace of the Flux
deployment, the namespace is set explicitly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;container$ kubectl create configmap flux-ssh-config --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$HOME&lt;/span&gt;/.ssh/known_hosts -n &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;cat /var/run/secrets/kubernetes.io/serviceaccount/namespace&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;
configmap &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux-ssh-config&amp;#34;&lt;/span&gt; created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use the ConfigMap every time the Flux daemon restarts, you&amp;rsquo;ll need
to mount it into the container. The example deployment manifest
includes an example of doing this, commented out. Uncomment those two blocks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ssh-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;configMap&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-ssh-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ssh-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/.ssh&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It assumes you used &lt;code&gt;flux-ssh-config&lt;/code&gt; as name of the ConfigMap and then reapply the
manifest.&lt;/p&gt;
&lt;p&gt;Another alternative is to create the ConfigMap from a template. This could be
something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;data&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;known_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    # github
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    192.30.253.112 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    # github
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    192.30.253.113 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    # private gitlab
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    gitlab.________ ssh-rsa AAAAB3N...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-ssh-config&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;lt;OPTIONAL NAMESPACE (if not default)&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will need to explicitly tell &lt;code&gt;fluxd&lt;/code&gt; to use that service account by
uncommenting and possible adapting the line &lt;code&gt;# serviceAccountName: flux&lt;/code&gt; in the file &lt;code&gt;flux-deployment.yaml&lt;/code&gt; before applying it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started using Helm</title>
      <link>/legacy/helm-operator/get-started/using-helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/get-started/using-helm/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through setting up the Helm Operator using the
available 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/tree/master/chart/helm-operator&#34; target=&#34;_blank&#34;&gt;Helm chart&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes cluster &lt;strong&gt;&amp;gt;=1.13.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Up-to-date &lt;strong&gt;Helm 2 or 3&lt;/strong&gt; 
&lt;a href=&#34;https://github.com/helm/helm/releases&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;helm&lt;/code&gt; binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt;
Tiller 
&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;(secure setup)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-the-helm-operator-chart&#34;&gt;Install the Helm Operator chart&lt;/h2&gt;
&lt;p&gt;Install the &lt;code&gt;HelmRelease&lt;/code&gt; Custom Resource Definition. By adding this
CRD it will be possible to define &lt;code&gt;HelmRelease&lt;/code&gt; resources on the
cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/crds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;helm&lt;/code&gt;, add the Flux CD Helm repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm repo add fluxcd https://charts.fluxcd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the Helm Operator using the available Helm chart:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --set helm.versions&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;v3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the Helm Operator deployed successfully:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ helm status helm-operator
NAME: helm-operator
LAST DEPLOYED: Wed Jan 01 12:00:00 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
...
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
helm-operator-6985656995-dpmdl   1/1     Running   0          31s
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    This installs the Helm Operator with only support for Helm 3 enabled,
to also enable support for Helm 2 and connect to Tiller, read 
&lt;a href=&#34;#with-tiller-helm-2&#34;&gt;with
Tiller&lt;/a&gt; below.

&lt;/div&gt;

&lt;h3 id=&#34;with-tiller-helm-2&#34;&gt;With Tiller (Helm 2)&lt;/h3&gt;
&lt;p&gt;Make sure 
&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;your Tiller installation is
secure&lt;/a&gt;, and create a
secret for the client certificates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create secret tls helm-client-certs &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --cert&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cert.pem &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --key&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install (or upgrade) the Helm Operator with the 
&lt;a href=&#34;/legacy/helm-operator/references/operator/#tiller-configuration&#34;&gt;Tiller
configuration&lt;/a&gt;
while also enabling Helm 2 support:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --set &lt;span style=&#34;color:#bb60d5&#34;&gt;tillerNamespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kube-system &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --set tls.enable&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --set helm.versions&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;v2\,v3&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the Helm Operator deployed successfully and connected to
Tiller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
helm-operator-7cc7c798cc-kn26w   1/1     Running   0          18s
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl logs -f deploy/helm-operator
...
ts=2020-01-01T12:00:00.556712443Z caller=helm.go:71 component=helm version=v2 info=&amp;quot;connected to Tiller&amp;quot; version=&amp;quot;sem_ver:\&amp;quot;v2.16.3\&amp;quot; git_commit:\&amp;quot;1ee0254c86d4ed6887327dabed7aa7da29d7eb0d\&amp;quot; git_tree_state:\&amp;quot;clean\&amp;quot; &amp;quot; host=tiller-deploy.kube-system:44134 options=&amp;quot;{Host: Port: Namespace:kube-system TLSVerify:false TLSEnable:true TLSKey:/etc/fluxd/helm/tls.key TLSCert:/etc/fluxd/helm/tls.crt TLSCACert: TLSHostname:}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip&lt;/h4&gt;

    Targeting a specific Helm version in a &lt;code&gt;HelmRelease&lt;/code&gt; is possible by
defining the &lt;code&gt;spec.helmVersion&lt;/code&gt;, e.g: &lt;code&gt;helmVersion: v3&lt;/code&gt; to target
Helm 3. Read more about this in &amp;lsquo;
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/release-configuration/#targeting-a-helm-version&#34;&gt;targeting a Helm
version&lt;/a&gt;&amp;rsquo;
in the &lt;code&gt;HelmRelease&lt;/code&gt; guide.

&lt;/div&gt;

&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn all about the available configuration options in the 
&lt;a href=&#34;../references/chart.md#configuration&#34;&gt;chart
documentation&lt;/a&gt;
and 
&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;operator reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Continue learning about &lt;code&gt;HelmRelease&lt;/code&gt; resources 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/introduction/&#34;&gt;in the
guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Values</title>
      <link>/legacy/helm-operator/helmrelease-guide/values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/helmrelease-guide/values/</guid>
      <description>
        
        
        &lt;p&gt;Now that we have a good understanding of where we can get our charts from and
what they have to offer, it is time to examine how you can supply

&lt;a href=&#34;https://helm.sh/docs/glossary/#values-values-files-values-yaml&#34; target=&#34;_blank&#34;&gt;values&lt;/a&gt; to
be used with the chart when the Helm Operator makes a release.&lt;/p&gt;
&lt;h3 id=&#34;inlined-values&#34;&gt;Inlined values&lt;/h3&gt;
&lt;p&gt;The most simple option to define the values for your Helm release. This is a
YAML map as you would put in a file and supply to Helm with &lt;code&gt;-f values.yaml&lt;/code&gt;,
but inlined into the &lt;code&gt;HelmRelease&lt;/code&gt; manifest. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;foo&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;value1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bar&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;baz&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;value2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;oof&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- item1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- item2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;values-from-sources&#34;&gt;Values from sources&lt;/h2&gt;
&lt;p&gt;It is possible to define a list of config maps, secrets (in the same namespace
as the &lt;code&gt;HelmRelease&lt;/code&gt; by default, or in a configured namespace) or external
sources (URLs) from which to take values. For charts from a Git
repository, there is an additional option available to refer to a file in
the chart folder.&lt;/p&gt;
&lt;p&gt;The values are merged in the order given, with later values overwriting
earlier. These values always have a lower priority than the values
inlined in the &lt;code&gt;HelmRelease&lt;/code&gt; via the &lt;code&gt;spec.values&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;This is useful if you want to have defaults such as the &lt;code&gt;region&lt;/code&gt;,
&lt;code&gt;clustername&lt;/code&gt;, &lt;code&gt;environment&lt;/code&gt;, a local docker registry URL, etc., or if you
simply do not want the values to be visible as plaintext in the &lt;code&gt;HelmRelease&lt;/code&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The Helm Operator does not watch the sources for updates. Changes to
sources are detected during the 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/#reconciliation&#34;&gt;reconciliation
loop&lt;/a&gt;.

&lt;/div&gt;

&lt;h3 id=&#34;config-maps&#34;&gt;Config maps&lt;/h3&gt;
&lt;p&gt;The reference to a config map is defined by adding a &lt;code&gt;configMapKeyRef&lt;/code&gt; to the
&lt;code&gt;spec.valuesFrom&lt;/code&gt; list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;configMapKeyRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;my-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;key&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;values.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;optional&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the config map.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The namespace the config map is in. Defaults to the
namespace of the &lt;code&gt;HelmRelease&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The key in the config map to get the values from.
Defaults to &lt;code&gt;values.yaml&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: When set to &lt;code&gt;true&lt;/code&gt;, successful retrieval of the
config map is optional and a release will still be made if it is missing.
Defaults to &lt;code&gt;false&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;secrets&#34;&gt;Secrets&lt;/h3&gt;
&lt;p&gt;The reference to a secret is defined by adding a &lt;code&gt;secretKeyRef&lt;/code&gt; to the
&lt;code&gt;spec.valuesFrom&lt;/code&gt; list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretKeyRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;default-values&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;my-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;key&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;values.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;optional&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the secret.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The namespace the secret is in. Defaults to the
namespace of the &lt;code&gt;HelmRelease&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: The key in the secret to get the values from.
Defaults to &lt;code&gt;values.yaml&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: When set to &lt;code&gt;true&lt;/code&gt;, successful retrieval of the
secret is optional and a release will still be made if it is missing.
Defaults to &lt;code&gt;false&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;external-sources&#34;&gt;External sources&lt;/h3&gt;
&lt;p&gt;The reference to an external source (URL) is defined by adding a
&lt;code&gt;externalSourceRef&lt;/code&gt; to the &lt;code&gt;spec.valuesFrom&lt;/code&gt; list. The external
source is expected to be a plain YAML file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;externalSourceRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://example.com/static/raw/values.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;optional&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The URL of the plain YAML file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: When set to &lt;code&gt;true&lt;/code&gt;, successful retrieval of the
YAML file is optional and a release will still be made if it could not be
found. Defaults to &lt;code&gt;false&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chart-files&#34;&gt;Chart files&lt;/h3&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Values from chart files are only supported for charts from a 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/chart-sources/#git-repositories&#34;&gt;Git
repository&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;When making use of a chart sourced from a Git repository, it is possible to
refer to a values file relative to the path of the chart. This can for example
be utilized to select values optimized for production environments, that you ship
with your chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;valuesFrom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chartFileRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;overrides/environment-prod.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;optional&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition of the listed keys is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The path relative to the &lt;code&gt;.chart.path&lt;/code&gt; where the values file can be
found.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt; &lt;em&gt;(Optional)&lt;/em&gt;: When set to &lt;code&gt;true&lt;/code&gt;, successful retrieval of the
YAML file is optional and a release will still be made if it could not be
found. Defaults to &lt;code&gt;false&lt;/code&gt; when omitted.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 工具链</title>
      <link>/docs/tool-chain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tool-chain/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through setting up Flux to
manage one or more Kubernetes clusters.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will need a Kubernetes cluster version &lt;strong&gt;1.16&lt;/strong&gt; or newer
and kubectl version &lt;strong&gt;1.18&lt;/strong&gt; or newer.&lt;/p&gt;
&lt;h2 id=&#34;install-the-flux-cli&#34;&gt;Install the Flux CLI&lt;/h2&gt;
&lt;p&gt;With 
&lt;a href=&#34;https://brew.sh&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt; for macOS and Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install fluxcd/tap/flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With 
&lt;a href=&#34;https://gofi.sh&#34; target=&#34;_blank&#34;&gt;GoFish&lt;/a&gt; for Windows, macOS and Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gofish install flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With 
&lt;a href=&#34;https://github.com/Jguer/yay&#34; target=&#34;_blank&#34;&gt;yay&lt;/a&gt; (or another 
&lt;a href=&#34;https://wiki.archlinux.org/title/AUR_helpers&#34; target=&#34;_blank&#34;&gt;AUR helper&lt;/a&gt;) for Arch Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;yay -S flux-bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With Bash for macOS and Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -s https://fluxcd.io/install.sh | sudo bash

&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# enable completions in ~/.bash_profile&lt;/span&gt;
. &amp;lt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;flux completion bash&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Command-line completion for &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, and &lt;code&gt;powershell&lt;/code&gt;
are also supported with their own sub-commands.&lt;/p&gt;
&lt;p&gt;Binaries for macOS AMD64/ARM64, Linux AMD64/ARM and Windows are available for
download on the 
&lt;a href=&#34;https://github.com/fluxcd/flux2/releases&#34; target=&#34;_blank&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A container image with &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;flux&lt;/code&gt; is available on DockerHub and GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker.io/fluxcd/flux-cli:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghcr.io/fluxcd/flux-cli:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verify that your cluster satisfies the prerequisites with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux check --pre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;flux bootstrap&lt;/code&gt; command you can install Flux on a
Kubernetes cluster and configure it to manage itself from a Git
repository.&lt;/p&gt;
&lt;p&gt;If the Flux components are present on the cluster, the bootstrap
command will perform an upgrade if needed. The bootstrap is
idempotent, it&amp;rsquo;s safe to run the command as many times as you want.&lt;/p&gt;
&lt;p&gt;The Flux component images are published to DockerHub and GitHub Container Registry
as 
&lt;a href=&#34;https://docs.docker.com/docker-for-mac/multi-arch/&#34; target=&#34;_blank&#34;&gt;multi-arch container images&lt;/a&gt;
with support for Linux &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;armv7&lt;/code&gt; (e.g. 32bit Raspberry Pi)
architectures.&lt;/p&gt;
&lt;p&gt;If your Git provider is &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;GitLab&lt;/strong&gt; or &lt;strong&gt;Azure DevOps&lt;/strong&gt; please follow the specific bootstrap procedure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#github-and-github-enterprise&#34;&gt;GitHub.com and GitHub Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gitlab-and-gitlab-enterprise&#34;&gt;GitLab.com and GitLab Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;../use-cases/azure.md#flux-installation-for-azure-devops&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generic-git-server&#34;&gt;Generic Git Server&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;bootstrap git&lt;/code&gt; command takes an existing Git repository, clones it and
commits the Flux components manifests to the specified branch. Then it
configures the target cluster to synchronize with that repository.&lt;/p&gt;
&lt;p&gt;Run bootstrap for a Git repository and authenticate with your SSH agent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap git &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ssh://git@&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/&amp;lt;repository&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;my-branch&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will generate a SSH key (defaults to RSA 2048 but can be changed with &lt;code&gt;--ssh-key-algorithm&lt;/code&gt;),
and it will prompt you to add the SSH public key as a deploy key to your repository.&lt;/p&gt;
&lt;p&gt;If you want to use your own SSH key, you can provide a private key using
&lt;code&gt;--private-key-file=&amp;lt;path/to/private.key&amp;gt;&lt;/code&gt; (you can supply the passphrase with &lt;code&gt;--password=&amp;lt;key-passphrase&amp;gt;&lt;/code&gt;).
This option can also be used if no SSH agent is available on your machine.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Bootstrap options&lt;/h4&gt;

    There are many options available when bootstrapping Flux, such as installing a subset of Flux components,
setting the Kubernetes context, changing the Git author name and email, enabling Git submodules, and more.
To list all the available options run &lt;code&gt;flux bootstrap git --help&lt;/code&gt;.

&lt;/div&gt;

&lt;p&gt;If your Git server doesn&amp;rsquo;t support SSH, you can run bootstrap for Git over HTTPS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap git &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/&amp;lt;repository&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;my-username&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;my-password&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --token-auth&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your Git server uses a self-signed TLS certificate, you can specify the CA file with
&lt;code&gt;--ca-file=&amp;lt;path/to/ca.crt&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;--path&lt;/code&gt; you can configure the directory which will be used to reconcile the target cluster.
To control multiple clusters from the same Git repository, you have to set a unique path per
cluster e.g. &lt;code&gt;clusters/staging&lt;/code&gt; and &lt;code&gt;clusters/production&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./clusters/
├── staging &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- path=clusters/staging&lt;/span&gt;
│   └── flux-system &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- namespace dir generated by bootstrap&lt;/span&gt;
│       ├── gotk-components.yaml
│       ├── gotk-sync.yaml
│       └── kustomization.yaml
└── production &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# &amp;lt;- path=clusters/production&lt;/span&gt;
    └── flux-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running bootstrap you can place Kubernetes YAMLs inside a dir under path
e.g. &lt;code&gt;clusters/staging/my-app&lt;/code&gt;, and Flux will reconcile them on your cluster.&lt;/p&gt;
&lt;p&gt;For examples on how you can structure your Git repository see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/flux2-kustomize-helm-example&#34; target=&#34;_blank&#34;&gt;flux2-kustomize-helm-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/fluxcd/flux2-multi-tenancy&#34; target=&#34;_blank&#34;&gt;flux2-multi-tenancy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-and-github-enterprise&#34;&gt;GitHub and GitHub Enterprise&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;bootstrap github&lt;/code&gt; command creates a GitHub repository if one doesn&amp;rsquo;t exist and
commits the Flux components manifests to specified branch. Then it
configures the target cluster to synchronize with that repository by
setting up a SSH deploy key or by using token-based authentication.&lt;/p&gt;
&lt;p&gt;Generate a 
&lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&#34; target=&#34;_blank&#34;&gt;personal access token&lt;/a&gt;
that can create repositories by checking all permissions under &lt;code&gt;repo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Export your GitHub personal access token as an environment variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;your-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the bootstrap for a repository on your personal GitHub account:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-username &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --personal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Deploy key&lt;/h4&gt;

    The bootstrap command creates an SSH key which it stores as a secret in the
Kubernetes cluster. The key is also used to create a deploy key in the GitHub
repository. The new deploy key will be linked to the personal access token used
to authenticate. &lt;strong&gt;Removing the personal access token will also remove the deploy key.&lt;/strong&gt;

&lt;/div&gt;

&lt;p&gt;Run the bootstrap for a repository owned by a GitHub organization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-organization &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --team&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;team1-slug &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --team&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;team2-slug &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you specify a list of teams, those teams will be granted maintainer access to the repository.&lt;/p&gt;
&lt;p&gt;To run the bootstrap for a repository hosted on GitHub Enterprise, you have to specify your GitHub hostname:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-enterprise.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --ssh-hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-enterprise.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-organization &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your GitHub Enterprise has SSH access disabled, you can use HTTPS and token authentication with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --token-auth &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-enterprise.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-organization &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gitlab-and-gitlab-enterprise&#34;&gt;GitLab and GitLab Enterprise&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;bootstrap gitlab&lt;/code&gt; command creates a GitLab repository if one doesn&amp;rsquo;t exist and
commits the Flux components manifests to specified branch. Then it
configures the target cluster to synchronize with that repository by
setting up a SSH deploy key or by using token-based authentication.&lt;/p&gt;
&lt;p&gt;Generate a 
&lt;a href=&#34;https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html&#34; target=&#34;_blank&#34;&gt;personal access token&lt;/a&gt;
that grants complete read/write access to the GitLab API.&lt;/p&gt;
&lt;p&gt;Export your GitLab personal access token as an environment variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GITLAB_TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;your-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the bootstrap for a repository on your personal GitLab account:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap gitlab &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-gitlab-username &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;master &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --token-auth &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --personal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run the bootstrap for a repository using deploy keys for authentication, you have to specify the SSH hostname:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap gitlab &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --ssh-hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;gitlab.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-gitlab-username &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;master &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Authentication&lt;/h4&gt;

    When providing the &lt;code&gt;--ssh-hostname&lt;/code&gt;, a read-only (SSH) deploy key will be added
to your repository, otherwise your GitLab personal token will be used to
authenticate against the HTTPS endpoint instead.

&lt;/div&gt;

&lt;p&gt;Run the bootstrap for a repository owned by a GitLab (sub)group:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap gitlab &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-gitlab-group/my-gitlab-subgroup &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;master &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run the bootstrap for a repository hosted on GitLab on-prem or enterprise, you have to specify your GitLab hostname:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap gitlab &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-gitlab.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --token-auth &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-gitlab-group &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;master &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;air-gapped-environments&#34;&gt;Air-gapped Environments&lt;/h3&gt;
&lt;p&gt;To bootstrap Flux on air-gapped environments without access to github.com and ghcr.io, first you&amp;rsquo;ll need
to download the &lt;code&gt;flux&lt;/code&gt; binary, and the container images from a computer with access to internet.&lt;/p&gt;
&lt;p&gt;List all container images:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ flux install --export | grep ghcr.io

image: ghcr.io/fluxcd/helm-controller:v0.8.0
image: ghcr.io/fluxcd/kustomize-controller:v0.9.0
image: ghcr.io/fluxcd/notification-controller:v0.9.0
image: ghcr.io/fluxcd/source-controller:v0.9.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pull the images locally and push them to your container registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker pull ghcr.io/fluxcd/source-controller:v0.9.0
docker tag ghcr.io/fluxcd/source-controller:v0.9.0 registry.internal/fluxcd/source-controller:v0.9.0
docker push registry.internal/fluxcd/source-controller:v0.9.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy &lt;code&gt;flux&lt;/code&gt; binary to a computer with access to your air-gapped cluster,
and create the pull secret in the &lt;code&gt;flux-system&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create ns flux-system

kubectl -n flux-system create secret generic regcred &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;.dockerconfigjson&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/.docker/config.json &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    --type&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kubernetes.io/dockerconfigjson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, bootstrap Flux using the images from your private registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap &amp;lt;GIT-PROVIDER&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --registry&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;registry.internal/fluxcd &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --image-pull-secret&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;regcred &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --hostname&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-git-server.internal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that when running &lt;code&gt;flux bootstrap&lt;/code&gt; without specifying a &lt;code&gt;--version&lt;/code&gt;,
the CLI will use the manifests embedded in its binary instead of downloading
them from GitHub. You can determine which version you&amp;rsquo;ll be installing,
with &lt;code&gt;flux --version&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bootstrap-with-terraform&#34;&gt;Bootstrap with Terraform&lt;/h2&gt;
&lt;p&gt;The bootstrap procedure can be implemented with Terraform using the Flux provider published on

&lt;a href=&#34;https://registry.terraform.io/providers/fluxcd/flux&#34; target=&#34;_blank&#34;&gt;registry.terraform.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The provider consists of two data sources (&lt;code&gt;flux_install&lt;/code&gt; and &lt;code&gt;flux_sync&lt;/code&gt;) for generating the
Kubernetes manifests that can be used to install or upgrade Flux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux_install&amp;#34; &amp;#34;main&amp;#34;&lt;/span&gt; {
  target_path    &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;clusters/my-cluster&amp;#34;&lt;/span&gt;
  network_policy &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#902000&#34;&gt;false&lt;/span&gt;
  version        &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;flux_sync&amp;#34; &amp;#34;main&amp;#34;&lt;/span&gt; {
  target_path &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;clusters/my-cluster&amp;#34;&lt;/span&gt;
  url         &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;https://github.com/${var.github_owner}/${var.repository_name}&amp;#34;&lt;/span&gt;
  branch      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more details on how to use the Terraform provider
please see 
&lt;a href=&#34;https://github.com/fluxcd/terraform-provider-flux&#34; target=&#34;_blank&#34;&gt;fluxcd/terraform-provider-flux&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;customize-flux-manifests&#34;&gt;Customize Flux manifests&lt;/h2&gt;
&lt;p&gt;You can customize the Flux components before or after running bootstrap.&lt;/p&gt;
&lt;p&gt;Assuming you want to customise the Flux controllers before they get deployed on the cluster,
first you&amp;rsquo;ll need to create a Git repository and clone it locally.&lt;/p&gt;
&lt;p&gt;Create the file structure required by bootstrap with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p clusters/my-cluster/flux-system
touch clusters/my-cluster/flux-system/gotk-components.yaml &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    clusters/my-cluster/flux-system/gotk-patches.yaml &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    clusters/my-cluster/flux-system/gotk-sync.yaml &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;    clusters/my-cluster/flux-system/kustomization.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming you want to add custom annotations and labels to the Flux controllers,
edit &lt;code&gt;clusters/my-cluster/gotk-patches.yaml&lt;/code&gt; and set the metadata for source-controller and kustomize-controller pods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source-controller&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;custom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;annotation&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;custom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;label&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize-controller&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;custom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;annotation&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;custom&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;label&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit &lt;code&gt;clusters/my-cluster/kustomization.yaml&lt;/code&gt; and set the resources and patches:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize.config.k8s.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- gotk-components.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- gotk-sync.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- gotk-patches.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Push the changes to main branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git add -A &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;add flux customisations&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now run the bootstrap for &lt;code&gt;clusters/my-cluster&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap git &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ssh://git@&amp;lt;host&amp;gt;/&amp;lt;org&amp;gt;/&amp;lt;repository&amp;gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the controllers are deployed for the first time on your cluster, they will contain all
the customisations from &lt;code&gt;gotk-patches.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can make changes to the patches after bootstrap and Flux will apply them in-cluster on its own.&lt;/p&gt;
&lt;h3 id=&#34;pod-security-policy&#34;&gt;Pod Security Policy&lt;/h3&gt;
&lt;p&gt;Assuming you want to make the Flux controllers conform to Pod Security Policy or equivalent webhooks,
create a file at &lt;code&gt;clusters/my-cluster/psp-patch.yaml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;all-flux-components&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# Required by Kubernetes node autoscaler&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;cluster-autoscaler.kubernetes.io/safe-to-evict&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;runAsUser&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;fsGroup&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1337&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;manager&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;runAsNonRoot&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;capabilities&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;drop&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                &lt;/span&gt;- ALL&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit &lt;code&gt;clusters/my-cluster/kustomization.yaml&lt;/code&gt; and enable the patch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize.config.k8s.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Kustomization&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- gotk-components.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- gotk-sync.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patches&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;psp-patch.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Push the changes to the main branch and run &lt;code&gt;flux bootstrap&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;dev-install&#34;&gt;Dev install&lt;/h2&gt;
&lt;p&gt;For testing purposes you can install Flux without storing its manifests in a Git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or using kubectl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://github.com/fluxcd/flux2/releases/latest/download/install.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you can register Git repositories and reconcile them on your cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/stefanprodan/podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --tag-semver&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&amp;gt;=4.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1m

flux create kustomization podinfo-default &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --source&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;podinfo &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;./kustomize&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --prune&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --validation&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;client &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;10m &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --health-check&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Deployment/podinfo.default&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --health-check-timeout&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can register Helm repositories and create Helm releases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; helm bitnami &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1h &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://charts.bitnami.com/bitnami

flux create helmrelease nginx &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1h &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --release-name&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;nginx-ingress-controller &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --target-namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kube-system &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --source&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;HelmRepository/bitnami &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --chart&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;nginx-ingress-controller &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --chart-version&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;5.x.x&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;upgrade&#34;&gt;Upgrade&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Patch versions&lt;/h4&gt;

    It is safe and advised to use the latest PATCH version when upgrading to a
new MINOR version.

&lt;/div&gt;

&lt;p&gt;Update Flux CLI to the latest release with &lt;code&gt;brew upgrade fluxcd/tap/flux&lt;/code&gt; or by
downloading the binary from 
&lt;a href=&#34;https://github.com/fluxcd/flux2/releases&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Verify that you are running the latest version with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bootstrap-upgrade&#34;&gt;Bootstrap upgrade&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ve used the 
&lt;a href=&#34;#bootstrap&#34;&gt;bootstrap&lt;/a&gt; procedure to deploy Flux,
then rerun the bootstrap command for each cluster using the same arguments as before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux bootstrap github &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --owner&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-github-username &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --repository&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-repository &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;clusters/my-cluster &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --personal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will clone the repository, it will update the components manifest in
&lt;code&gt;&amp;lt;path&amp;gt;/flux-system/gotk-components.yaml&lt;/code&gt; and it will push the changes to the remote branch.&lt;/p&gt;
&lt;p&gt;Tell Flux to pull the manifests from Git and upgrade itself with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux reconcile &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git flux-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that the controllers have been upgrade with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Automated upgrades&lt;/h4&gt;

    You can automate the components manifest update with GitHub Actions
and open a PR when there is a new Flux version available.
For more details please see 
&lt;a href=&#34;https://github.com/fluxcd/flux2/tree/main/action&#34; target=&#34;_blank&#34;&gt;Flux GitHub Action docs&lt;/a&gt;.

&lt;/div&gt;

&lt;h3 id=&#34;terraform-upgrade&#34;&gt;Terraform upgrade&lt;/h3&gt;
&lt;p&gt;Update the Flux provider to the 
&lt;a href=&#34;https://github.com/fluxcd/terraform-provider-flux/releases&#34; target=&#34;_blank&#34;&gt;latest release&lt;/a&gt;
and run &lt;code&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Tell Flux to upgrade itself in-cluster or wait for it to pull the latest commit from Git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl annotate --overwrite gitrepository/flux-system reconcile.fluxcd.io/requestedAt&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;in-cluster-upgrade&#34;&gt;In-cluster upgrade&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ve installed Flux directly on the cluster, then rerun the install command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will  apply the new manifests on your cluster.
You can verify that the controllers have been upgraded to the latest version with &lt;code&gt;flux check&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve installed Flux directly on the cluster with kubectl,
then rerun the command using the latest manifests from the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kustomize build https://github.com/fluxcd/flux2/manifests/install?ref&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main | kubectl apply -f-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h2&gt;
&lt;p&gt;You can uninstall Flux with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux uninstall --namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command performs the following operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deletes Flux components (deployments and services)&lt;/li&gt;
&lt;li&gt;deletes Flux network policies&lt;/li&gt;
&lt;li&gt;deletes Flux RBAC (service accounts, cluster roles and cluster role bindings)&lt;/li&gt;
&lt;li&gt;removes the Kubernetes finalizers from Flux custom resources&lt;/li&gt;
&lt;li&gt;deletes Flux custom resource definitions and custom resources&lt;/li&gt;
&lt;li&gt;deletes the namespace where Flux was installed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;ve installed Flux in a namespace that you wish to preserve, you
can skip the namespace deletion with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux uninstall --namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;infra --keep-namespace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Reinstall&lt;/h4&gt;

    Note that the &lt;code&gt;uninstall&lt;/code&gt; command will not remove any Kubernetes objects
or Helm releases that were reconciled on the cluster by Flux.
It is safe to uninstall Flux and rerun the boostrap, any existing workloads
will not be affected.

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Legacy: Automations, locks and annotations</title>
      <link>/legacy/flux/tutorials/driving-flux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/tutorials/driving-flux/</guid>
      <description>
        
        
        &lt;p&gt;In this tutorial we want to get a better feel for what we can do with
Flux. We won&amp;rsquo;t spend too much time with getting it up and running, so let&amp;rsquo;s
get that out of the way first.&lt;/p&gt;
&lt;p&gt;In our example we are going to use the &lt;code&gt;flux-get-started&lt;/code&gt; example deployment.
So as your first step, please head to 
&lt;a href=&#34;https://github.com/fluxcd/flux-get-started&#34; target=&#34;_blank&#34;&gt;our example
deployment&lt;/a&gt; and click on the
&amp;ldquo;Fork&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install 
&lt;a href=&#34;/legacy/flux/references/fluxctl/&#34;&gt;fluxctl&lt;/a&gt; and run (replace &lt;code&gt;YOURUSER&lt;/code&gt; with your GitHub username):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;YOURUSER&amp;#34;&lt;/span&gt;
fluxctl install &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-email&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;@users.noreply.github.com &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;git@github.com:&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;GHUSER&lt;/span&gt;&lt;span style=&#34;color:#70a0d0;font-style:italic&#34;&gt;}&lt;/span&gt;/flux-get-started &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--git-path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;namespaces,workloads &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;connecting-to-your-git-config&#34;&gt;Connecting to your git config&lt;/h3&gt;
&lt;p&gt;The first step is done. Flux is now and up running (you can confirm by
running &lt;code&gt;kubectl get pods --all-namespaces&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In the second step we will use &lt;code&gt;fluxctl&lt;/code&gt; to talk to Flux in the cluster and
interact with the deployments. (It enables you to drive all of Flux, so have a look at the output of
&lt;code&gt;fluxctl -h&lt;/code&gt; to get a better idea.)&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Another option (without installing &lt;code&gt;fluxctl&lt;/code&gt; is to take a look
at the resulting annotation changes and make the changes in Git. This is
GitOps after all. :-)

&lt;/div&gt;

&lt;p&gt;Tell fluxctl in which namespace is Flux installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;FLUX_FORWARD_NAMESPACE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To enable Flux to sync your config, you need to add the deployment key
to your fork.&lt;/p&gt;
&lt;p&gt;Get your Flux deployment key by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy/paste the key and add it to
&lt;code&gt;https://github.com/YOUR-USER-ID/flux-get-started/settings/keys/new&lt;/code&gt; and
enable write access for it.&lt;/p&gt;
&lt;p&gt;Wait for sync to happen or run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;driving-flux&#34;&gt;Driving Flux&lt;/h2&gt;
&lt;p&gt;After syncing, Flux will find out which workloads there are, which
images are available and what needs doing. To find out which workloads are
managed by Flux, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl list-workloads -a 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that &lt;code&gt;podinfo&lt;/code&gt; is on &lt;code&gt;3.1.0&lt;/code&gt; and in state &lt;code&gt;automated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To check which images are available for podinfo run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl list-images -w demo:deployment/podinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s change the policy for &lt;code&gt;podinfo&lt;/code&gt; to target &lt;code&gt;3.2&lt;/code&gt; releases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl policy -w demo:deployment/podinfo --tag&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;podinfod=3.2.*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the command-line you should see a message just like this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;WORKLOAD                 STATUS   UPDATES
demo:deployment/podinfo  success
Commit pushed:  4755a3b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you now go back to &lt;code&gt;https://github.com/YOUR-USER-ID/flux-get-started&lt;/code&gt; in
your browser, you will notice that Flux has made a commit on your
behalf. The policy change is now in Git, which is great for transparency and
for defining expected state.&lt;/p&gt;
&lt;p&gt;It should look a little something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a00000&#34;&gt;--- a/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -8,8 +8,8 @@ metadata:
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;     app: podinfo
   annotations:
     fluxcd.io/automated: &amp;#34;true&amp;#34;
&lt;span style=&#34;color:#a00000&#34;&gt;-    fluxcd.io/tag.podinfod: semver:~3.1
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+    fluxcd.io/tag.podinfod: glob:3.2.*
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have a closer look at the last change which was committed, you&amp;rsquo;ll see
that the image filtering pattern has been changed. (Our docs explain how to
use &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt; filtering.)&lt;/p&gt;
&lt;p&gt;Again, wait for the sync to happen or run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check which image is current, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl list-images -w demo:deployment/podinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our case this is &lt;code&gt;3.2.2&lt;/code&gt; (it could be a later image too). Let&amp;rsquo;s say an
engineer found that &lt;code&gt;3.2.2&lt;/code&gt; was faulty and we have to go back to &lt;code&gt;3.2.1&lt;/code&gt;.
That&amp;rsquo;s easy.&lt;/p&gt;
&lt;p&gt;Lock deployment with a message describing why:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl lock -w demo:deployment/podinfo -m &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;3.2.2 does not work for us&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting diff should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a00000&#34;&gt;--- a/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -10,6 +10,7 @@ metadata:
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;     app: podinfo
   annotations:
     fluxcd.io/automated: &amp;#34;true&amp;#34;
     fluxcd.io/tag.podinfod: glob:3.2.*
&lt;span style=&#34;color:#00a000&#34;&gt;+    fluxcd.io/locked: &amp;#39;true&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt; spec:
   strategy:
     rollingUpdate:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rollback to &lt;code&gt;3.2.1&lt;/code&gt;. Flag &lt;code&gt;--force&lt;/code&gt; is needed because the workload is locked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl release --force --workload demo:deployment/podinfo -i stefanprodan/podinfo:3.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The response should be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Submitting release ...
CONTROLLER               STATUS   UPDATES
demo:deployment/podinfo  success  podinfod: stefanprodan/podinfo:3.2.2 -&amp;gt; 3.2.1
Commit pushed:  426d723
Commit applied: 426d723
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the diff for this is going to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a00000&#34;&gt;--- a/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/workloads/podinfo-dep.yaml
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -33,7 +33,7 @@ spec:
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;         - &amp;#34;1&amp;#34;
       containers:
       - name: podinfod
&lt;span style=&#34;color:#a00000&#34;&gt;-        image: stefanprodan/podinfo:3.2.2
&lt;/span&gt;&lt;span style=&#34;color:#a00000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        image: stefanprodan/podinfo:3.2.1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it. At the end of this tutorial, you have automated, locked and
annotated deployments with Flux.&lt;/p&gt;
&lt;p&gt;Another tip, if you should get stuck anywhere: check what Flux is doing. You
can do that by simply running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl logs -n flux deploy/flux -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you should have any questions, find us on Slack in the 
&lt;a href=&#34;https://cncf.slack.com/messages/flux/&#34; target=&#34;_blank&#34;&gt;#flux
channel&lt;/a&gt;, get
an invite to it 
&lt;a href=&#34;https://slack.cncf.io&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Manifest generation through .flux.yaml configuration files</title>
      <link>/legacy/flux/references/fluxyaml-config-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/fluxyaml-config-files/</guid>
      <description>
        
        
        &lt;p&gt;This feature lets you generate Kubernetes manifests with a program,
instead of having to include them in your git repo as YAML files. For
example, you can use &lt;code&gt;kustomize&lt;/code&gt; to patch a common set of resources to
suit a particular environment.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    For a full, self-contained example of Flux generating manifests
with &lt;code&gt;kustomize&lt;/code&gt; you can go to 
&lt;a href=&#34;https://github.com/fluxcd/flux-kustomize-example&#34; target=&#34;_blank&#34;&gt;https://github.com/fluxcd/flux-kustomize-example&lt;/a&gt;

&lt;/div&gt;

&lt;p&gt;Manifest generation is controlled by the flags given to &lt;code&gt;fluxd&lt;/code&gt;, and
&lt;code&gt;.flux.yaml&lt;/code&gt; files in your git repo.&lt;/p&gt;
&lt;p&gt;To enable it, you will need to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pass the command-line flag &lt;code&gt;--manifest-generation=true&lt;/code&gt;
to &lt;code&gt;fluxd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;put at least one &lt;code&gt;.flux.yaml&lt;/code&gt; file in the git repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Where to put &lt;code&gt;.flux.yaml&lt;/code&gt;, and what should be in it, are described in
the sections following.&lt;/p&gt;
&lt;h2 id=&#34;setting-manifest-generation-up&#34;&gt;Setting manifest generation up&lt;/h2&gt;
&lt;p&gt;The command-line flag &lt;code&gt;--git-path&lt;/code&gt; (which can be given multiple
values) marks a &amp;ldquo;target path&amp;rdquo; within the git repository in which to
find manifests. If &lt;code&gt;--git-path&lt;/code&gt; is not supplied, the top of the git
repository is assumed to be the sole target path.&lt;/p&gt;
&lt;p&gt;Without manifest generation, fluxd will recursively walk the
directories under each target path, to look for YAML files.&lt;/p&gt;
&lt;p&gt;With manifest generation &lt;strong&gt;enabled&lt;/strong&gt;, fluxd will look for processing
instructions in a file &lt;code&gt;.flux.yaml&lt;/code&gt;, which can be located &lt;em&gt;at&lt;/em&gt; the
target path, or in a directory &lt;em&gt;above&lt;/em&gt; it in the git repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if a &lt;code&gt;.flux.yaml&lt;/code&gt; file is found, it is used &lt;strong&gt;instead&lt;/strong&gt; of looking
for YAML files, and no other files are examined for that target
path;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if no &lt;code&gt;.flux.yaml&lt;/code&gt; file is found, the usual behaviour of looking
for YAML files is adopted for that target path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;.flux.yaml&lt;/code&gt; file containing the &lt;code&gt;scanForFiles&lt;/code&gt; directive resets
the behaviour to looking for YAML files. This is explained below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The manifests from all the target paths &amp;ndash; read from YAML files or
generated &amp;ndash; are combined before applying to the cluster. If
duplicates are detected, an error is logged and fluxd will abandon the
attempt to apply manifests to the cluster.&lt;/p&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── base
│   ├── demo-ns.yaml
│   ├── kustomization.yaml
│   ├── podinfo-dep.yaml
│   ├── podinfo-hpa.yaml
│   └── podinfo-svc.yaml
├── .flux.yaml
├── production
│   ├── flux-patch.yaml
│   ├── kustomization.yaml
│   └── replicas-patch.yaml
└── staging
    ├── flux-patch.yaml
    └── kustomization.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, say you started &lt;code&gt;fluxd&lt;/code&gt; with &lt;code&gt;--git-path=staging&lt;/code&gt;, it
would find &lt;code&gt;.flux.yaml&lt;/code&gt; in the top directory and use that to generate
manifests.  The other files and directories (if there were any) in
&lt;code&gt;staging/&lt;/code&gt; are not examined by fluxd, in favour of following the
instructions given in the &lt;code&gt;.flux.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;This layout could also be used with &lt;code&gt;--git-path=production&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this modified example, the &lt;code&gt;.flux.yaml&lt;/code&gt; file has been moved under
&lt;code&gt;staging/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── base
│   ├── demo-ns.yaml
│   ├── kustomization.yaml
│   ├── podinfo-dep.yaml
│   ├── podinfo-hpa.yaml
│   └── podinfo-svc.yaml
├── production
│   ├── flux-patch.yaml
│   ├── kustomization.yaml
│   └── replicas-patch.yaml
└── staging
    ├── flux-patch.yaml
    ├── .flux.yaml
    └── kustomization.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… since the &lt;code&gt;.flux.yaml&lt;/code&gt; file is now under &lt;code&gt;staging/&lt;/code&gt;, it will still
take effect for &lt;code&gt;--git-path=staging&lt;/code&gt;. However:&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;--git-path=production&lt;/code&gt; would &lt;strong&gt;not produce a usable
configuration&lt;/strong&gt;, because without an applicable &lt;code&gt;.flux.yaml&lt;/code&gt;, the files
under &lt;code&gt;production/&lt;/code&gt; would be treated as plain Kubernetes manifests,
which they are plainly not.&lt;/p&gt;
&lt;p&gt;Note also that the configuration file would &lt;strong&gt;not&lt;/strong&gt; take effect for
&lt;code&gt;--git-path=.&lt;/code&gt; (i.e., the top directory), because manifest generation
will not look in subdirectories for a &lt;code&gt;.flux.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&#34;the-scanforfiles-directive&#34;&gt;The &lt;code&gt;scanForFiles&lt;/code&gt; directive&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;scanForFiles&lt;/code&gt; directive indicates that the target path should be
treated as though it had &lt;em&gt;no&lt;/em&gt; &lt;code&gt;.flux.yaml&lt;/code&gt; in effect. In other words,
fluxd will look for YAML files under the directory, and update
manifests directly by rewriting the YAML files.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example &lt;code&gt;.flux.yaml&lt;/code&gt; with the &lt;code&gt;scanForFiles&lt;/code&gt; directive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: 1
scanForFiles: {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(The &lt;code&gt;{}&lt;/code&gt; is an empty map, which acts as a placeholder value).&lt;/p&gt;
&lt;p&gt;This is to account for the case in which you have a &lt;code&gt;.flux.yaml&lt;/code&gt;
higher in the directory tree, applying to several target paths beneath
it, but want to have a directory with regular YAMLs as well.&lt;/p&gt;
&lt;p&gt;In the following example, the top-level &lt;code&gt;.flux.yaml&lt;/code&gt; would take effect
for &lt;code&gt;--git-path=staging&lt;/code&gt; or &lt;code&gt;--git-path=production&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But if you wanted &lt;code&gt;yamls/permissions.yaml&lt;/code&gt; to be applied (as it is),
you could put a &lt;code&gt;.flux.yaml&lt;/code&gt; containing &lt;code&gt;scanForFiles&lt;/code&gt; in that directory, and
specify &lt;code&gt;--git-path=staging,yamls&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── .flux.yaml
├── base
│   ├── demo-ns.yaml
│   ├── kustomization.yaml
│   ├── podinfo-dep.yaml
│   ├── podinfo-hpa.yaml
│   └── podinfo-svc.yaml
├── production
│   ├── flux-patch.yaml
│   ├── kustomization.yaml
│   └── replicas-patch.yaml
├── yamls
│   ├── .flux.yaml # (with &amp;quot;scanForFiles&amp;quot; directive)
│   └── permissions.yaml
└── staging
    ├── flux-patch.yaml
    └── kustomization.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-to-construct-a-fluxyaml-file&#34;&gt;How to construct a .flux.yaml file&lt;/h2&gt;
&lt;p&gt;Aside from the special case of the &lt;code&gt;scanForFiles&lt;/code&gt; directive,
&lt;code&gt;.flux.yaml&lt;/code&gt; files come in two varieties: &amp;ldquo;patch-updated&amp;rdquo;,
&amp;ldquo;command-updated&amp;rdquo;. These refer to the way in which 
&lt;a href=&#34;/legacy/flux/references/automated-image-update/&#34;&gt;automated
updates&lt;/a&gt; are applied to files in the
repo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when patch-updated, fluxd will keep updates in its own patch file,
which it applies to the generated manifests before applying to the
cluster;&lt;/li&gt;
&lt;li&gt;when command-updated, you must supply commands to update the
appropriate file or files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Patch-updated will work with any kind of manifest generation, because
the patch is entirely managed by &lt;code&gt;fluxd&lt;/code&gt; and applied post-hoc to the
manifests.&lt;/p&gt;
&lt;p&gt;Command-updated is more general, but since you need to supply your own
programs to find and update the right file, it is likely to be a lot
more work.&lt;/p&gt;
&lt;p&gt;Both patch-updated and command-updated configurations have the same
way of specifying how to generate manifests, and differ only in how
updates are recorded.&lt;/p&gt;
&lt;h3 id=&#34;generator-configuration&#34;&gt;Generator configuration&lt;/h3&gt;
&lt;p&gt;Here is an example of a &lt;code&gt;.flux.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# must be `1`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchUpdated&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;generators&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kustomize build .&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchFile&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-patch.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;generators&lt;/code&gt; field is an array of commands, all of which will be
run in turn. Each command is expected to print a YAML stream to its
stdout. The streams are concatenated and parsed as one big YAML
stream, before being applied.&lt;/p&gt;
&lt;p&gt;Much of the time, it will only be necessary to supply one command to
be run.&lt;/p&gt;
&lt;p&gt;The commands will be run with the target path being processed as a
working directory &amp;ndash; which is not necessarily the same directory in
which the &lt;code&gt;.flux.yaml&lt;/code&gt; file was found. 
&lt;a href=&#34;#execution-context&#34;&gt;See below&lt;/a&gt;
for more details on the execution context in which commands are run.&lt;/p&gt;
&lt;h3 id=&#34;using-patch-updated-configuration&#34;&gt;Using patch-updated configuration&lt;/h3&gt;
&lt;p&gt;A patch-updated configuration generates manifests using commands, and
records updates as a set of 
&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/strategic-merge-patch.md&#34; target=&#34;_blank&#34;&gt;strategic merge&lt;/a&gt; patches
in a file.&lt;/p&gt;
&lt;p&gt;For example, when an automated image upgrade is run, fluxd will do
this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;run the generator commands and parse the manifests;&lt;/li&gt;
&lt;li&gt;find the manifest that needs to be updated, and calculate the
patch to it that performs the update;&lt;/li&gt;
&lt;li&gt;record that patch in the patch file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When syncing, fluxd will generate the manifests as usual, then apply
all the patches that have been recorded in the patch file.&lt;/p&gt;
&lt;p&gt;This is how a patch-updated &lt;code&gt;.flux.yaml&lt;/code&gt; looks in general:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchUpdated&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;generators&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;generator_command&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchFile&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;path/to/patch.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;generators&lt;/code&gt; field is explained just above. The &lt;code&gt;patchFile&lt;/code&gt; field
gives a path, relative to the target path, in which to record
patches. &lt;code&gt;fluxd&lt;/code&gt; will create or update the file when needed, and
commit any changes it makes to git.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    At present, it is necessary to manually remove patches that
refer to deleted manifests. See 
&lt;a href=&#34;https://github.com/fluxcd/flux/issues/2428&#34; target=&#34;_blank&#34;&gt;issue
#2428&lt;/a&gt;).

&lt;/div&gt;

&lt;h3 id=&#34;using-command-updated-configuration&#34;&gt;Using command-updated configuration&lt;/h3&gt;
&lt;p&gt;A command-updated configuration generates manifests in the same way,
but records changes by running commands as given in the &lt;code&gt;.flux.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is how a command-updated &lt;code&gt;.flux.yaml&lt;/code&gt; looks in general:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;commandUpdated&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;generators&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;generator_command&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;updaters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containerImage&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;image_updater_program&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;policy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;policy_updater_program&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;updaters&lt;/code&gt; section is particular to command-updated
configuration. It contains an array of updaters, each of which gives a
command for updating container images, and a command for updating
policies (policy controls how automated updates should be applied to a
resource; these appear as annotations in generated manifests).&lt;/p&gt;
&lt;p&gt;When asked to update a resource, fluxd will run execute the
appropriate variety of command for &lt;em&gt;each&lt;/em&gt; entry in &lt;code&gt;updaters:&lt;/code&gt;. For
example, when updating an image, it will execute the command under
&lt;code&gt;containerImage&lt;/code&gt;, for each updater entry, in turn.&lt;/p&gt;
&lt;p&gt;Usually updates come in batches &amp;ndash; e.g., updating the same container
image in several resources &amp;ndash; so the commands will likely be run
several times.&lt;/p&gt;
&lt;h3 id=&#34;execution-context-of-commands&#34;&gt;Execution context of commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;generators&lt;/code&gt; and &lt;code&gt;updaters&lt;/code&gt; are run in a POSIX shell inside the fluxd
container. This means that the executables mentioned in commands must
be available in the running fluxd container.&lt;/p&gt;
&lt;p&gt;Flux currently includes &lt;code&gt;kustomize&lt;/code&gt;, &lt;code&gt;sops&lt;/code&gt; and basic Unix shell tools.
If the tools in the Flux image are not sufficient for your use case,
you have some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build your own custom image based on the 
&lt;a href=&#34;https://github.com/fluxcd/flux/blob/master/docker/Dockerfile.flux&#34; target=&#34;_blank&#34;&gt;Flux
image&lt;/a&gt; that includes the tooling you need, and run
that image instead of &lt;code&gt;fluxcd.io/flux&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;copy files from an &lt;code&gt;initContainer&lt;/code&gt; into a volume shared by the flux
container, within the deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future it may be possible to specify an container image for
each command, rather than relying on the tooling being in the
filesystem.&lt;/p&gt;
&lt;p&gt;The working directory (also known as CWD) of the &lt;code&gt;command&lt;/code&gt;s executed
from a &lt;code&gt;.flux.yaml&lt;/code&gt; file will be set to the target path, i.e., the
&lt;code&gt;--git-path&lt;/code&gt; entry.&lt;/p&gt;
&lt;p&gt;For example, when using flux with &lt;code&gt;--git-path=staging&lt;/code&gt; on a git
repository with this structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;├── .flux.yaml
├── staging/
├──── &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
├── production/
└──── &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… the commands in &lt;code&gt;.flux.yaml&lt;/code&gt; will be executed with their working
directory set to &lt;code&gt;staging&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, commands from &lt;code&gt;updaters&lt;/code&gt; are given arguments via
environment variables, when executed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUX_WORKLOAD&lt;/code&gt;: the workload to be updated. Its format is
&lt;code&gt;&amp;lt;namespace&amp;gt;:&amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;default:deployment/foo&lt;/code&gt;). For
convenience (to circumvent parsing) &lt;code&gt;FLUX_WORKLOAD&lt;/code&gt; is also broken
down into the following environment variables:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUX_WL_NS&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUX_WL_KIND&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUX_WL_NAME&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;containerImage&lt;/code&gt; updaters are provided with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FLUX_CONTAINER&lt;/code&gt;: Name of the container within the workload whose image needs to be updated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLUX_IMG&lt;/code&gt;: Image name which the container needs to be updated to (e.g. &lt;code&gt;nginx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLUX_TAG&lt;/code&gt;: Image tag which the container needs to be updated to (e.g. &lt;code&gt;1.15&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;policy&lt;/code&gt; updaters are provided with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FLUX_POLICY&lt;/code&gt;: the name of the policy to be added or updated in
the workload. To make into an annotation name, prefix with
&lt;code&gt;fluxcd.io/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLUX_POLICY_VALUE&lt;/code&gt;: value of the policy to be added or updated
in the controller. If the &lt;code&gt;FLUX_POLICY_VALUE&lt;/code&gt; environment
variable is not set, it means the policy should be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the default timeout for sync commands is set to one
minute. If you run into errors like &lt;code&gt;error executing generator command: context deadline exceeded&lt;/code&gt;, you can increase the timeout with
the &lt;code&gt;--sync-timeout&lt;/code&gt; fluxd command flag or the &lt;code&gt;sync.timeout&lt;/code&gt; Helm
chart option.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Monitoring</title>
      <link>/legacy/helm-operator/references/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/references/monitoring/</guid>
      <description>
        
        
        &lt;p&gt;The Helm Operator exposes a metrics endpoint at &lt;code&gt;/metrics&lt;/code&gt;  on the configured

&lt;a href=&#34;/legacy/helm-operator/references/operator/#general-flags&#34;&gt;&lt;code&gt;--listen&lt;/code&gt;&lt;/a&gt; address (defaults to &lt;code&gt;:3030&lt;/code&gt;) with data
in Prometheus format.&lt;/p&gt;
&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Count of releases managed by the operator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_action_duration_seconds&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration of release sync actions in seconds. See 
&lt;a href=&#34;#release-actions&#34;&gt;release actions&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_condition_info&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Release condition status gauge, see 
&lt;a href=&#34;#release-conditions&#34;&gt;release conditions&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_queue_length_count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Count of release jobs waiting in the queue to be processed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;release-actions&#34;&gt;Release actions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;release_action_duration_seconds&lt;/code&gt; supports the following labels and label values.&lt;/p&gt;
&lt;h4 id=&#34;labels&#34;&gt;Labels&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Label Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;target_namespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;targetNamespace&lt;/code&gt; of &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;releaseName&lt;/code&gt; of &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;success&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Whether the action was successful (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;action&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The release action, see below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;actions&#34;&gt;Actions&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;One entire release sync attempt, as configured to occur once every 
&lt;a href=&#34;/legacy/helm-operator/references/operator/#reconciliation-configuration&#34;&gt;&amp;ndash;charts-sync-interval&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;install&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Installation attempt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Upgrade attempt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rollback&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rollback attempt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uninstall&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Uninstallation attempt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dry-run-compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Dry run compare attempt to 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/#what-triggers-an-upgrade&#34;&gt;determine whether to upgrade&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;annotate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/#the-antecedent-annotation&#34;&gt;Annotation&lt;/a&gt; attempt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;release-conditions&#34;&gt;Release conditions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;release_condition_info&lt;/code&gt; supports the following labels and label values.&lt;/p&gt;
&lt;h4 id=&#34;labels-1&#34;&gt;Labels&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Label Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;target_namespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;targetNamespace&lt;/code&gt; of &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;release_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;releaseName&lt;/code&gt; of &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href=&#34;helmrelease-custom-resource.md#helm.fluxcd.io/v1.HelmReleaseConditionType&#34;&gt;condition type&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;values&#34;&gt;Values&lt;/h4&gt;
&lt;p&gt;Values represent the 
&lt;a href=&#34;helmrelease-custom-resource.md#helm.fluxcd.io/v1.ConditionStatus&#34;&gt;condition status&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Condition Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unknown&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;prometheus-alert-rules-examples&#34;&gt;Prometheus alert rules examples&lt;/h2&gt;
&lt;p&gt;The following is a list of Prometheus alert rules examples possible
with the exposed metrics. We are open to 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/pulls&#34; target=&#34;_blank&#34;&gt;pull requests&lt;/a&gt; adding additional rules.&lt;/p&gt;
&lt;h3 id=&#34;low-queue-throughput&#34;&gt;Low queue throughput&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;alert&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmOperatorLowThroughput&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;expr&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux_helm_operator_release_queue_length_count &amp;gt; 0&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;for&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;30m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;automatic-rollback-of-helmrelease&#34;&gt;Automatic rollback of &lt;code&gt;HelmRelease&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;alert&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmReleaseRolledBack&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;expr&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux_helm_operator_release_condition_info{condition=&amp;#34;RolledBack&amp;#34;} == 1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;helmrelease-subject-to-an-error&#34;&gt;&lt;code&gt;HelmRelease&lt;/code&gt; subject to an error&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;alert&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmReleaseError&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;expr&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux_helm_operator_release_condition_info{condition=&amp;#34;Released&amp;#34;} == -1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Release configuration</title>
      <link>/legacy/helm-operator/helmrelease-guide/release-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/helmrelease-guide/release-configuration/</guid>
      <description>
        
        
        &lt;p&gt;When making use of the &lt;code&gt;helm&lt;/code&gt; binary you can pass along various flags while
making a release that influence how a release is performed. Most of these flags
are also available as parameters in the &lt;code&gt;spec&lt;/code&gt; of the &lt;code&gt;HelmRelease&lt;/code&gt; resource,
others are not available for &lt;code&gt;helm&lt;/code&gt; but fine-tune how the Helm Operator itself
functions.&lt;/p&gt;
&lt;p&gt;This section of the guide documents the parameters, and the effect they have
when the Helm Operator performs a release for the &lt;code&gt;HelmRelease&lt;/code&gt; they are
configured on.&lt;/p&gt;
&lt;h2 id=&#34;targeting-a-helm-version&#34;&gt;Targeting a Helm version&lt;/h2&gt;
&lt;p&gt;When you install the Helm Operator with multiple Helm versions enabled, the
lowest enabled version is targeted by default. To target another version or to
ensure it does not accidentally target the wrong version due to a configuration
mistake, you can set the &lt;code&gt;.helmVersion&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;helmVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;migrating-from-helm-v2-to-v3&#34;&gt;Migrating from Helm v2 to v3&lt;/h2&gt;
&lt;p&gt;Helm Operator uses the 
&lt;a href=&#34;https://github.com/helm/helm-2to3&#34; target=&#34;_blank&#34;&gt;helm-2to3 plugin&lt;/a&gt;
under the hood to migrate HelmRelease objects.
In order to perform a release conversion you have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;.spec.helmVersion&lt;/code&gt; to &lt;code&gt;v3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a migrate annotation &lt;code&gt;helm.fluxcd.io/migrate: &amp;quot;true&amp;quot;&lt;/code&gt; (For testing, you
can set the value to &amp;ldquo;dry-run&amp;rdquo; instead of &amp;ldquo;true&amp;rdquo;)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm.fluxcd.io/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;HelmRelease&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;redis&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;helm.fluxcd.io/migrate&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# add annotation&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;helmVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v3&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# set helmVersion to v3&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;releaseName&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;redis&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;chart&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://kubernetes-charts.storage.googleapis.com&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;redis&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Assuming you will be deleting the tiller deployment using gitops, consider
setting the operator flags &lt;code&gt;--convert-tiller-out-cluster=true&lt;/code&gt; and
&lt;code&gt;--convert-release-storage=configmaps&lt;/code&gt;. If tiller is in a custom namespace, make
sure you set &lt;code&gt;--tiller-namespace=&lt;/code&gt; flag as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After applying the new HelmRelease, the operator will take care of deleting the
old v2 release that Tiller managed and converting it to the v3 format. Once
you&amp;rsquo;re satisfied with the migration, you can go ahead and remove the
annotation. This approach allows teams to migrate their charts at scale to
the v3 format without stopping the world.&lt;/p&gt;
&lt;h2 id=&#34;configuring-a-target-namespace&#34;&gt;Configuring a target namespace&lt;/h2&gt;
&lt;p&gt;It is possible to target a different namespace for the release than the
&lt;code&gt;HelmRelease&lt;/code&gt; lives in using &lt;code&gt;.targetNamespace&lt;/code&gt;. This can come in handy when
you have to deploy releases into a namespace that is also managed by another
team running their own namespace-restricted Helm Operator in this same
namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;targetNamespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;team-a&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;specifying-a-release-name&#34;&gt;Specifying a release name&lt;/h2&gt;
&lt;p&gt;The default release name used by the Helm Operator is a composition of the
following values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;namespace&amp;gt;-[&amp;lt;target namespace&amp;gt;-]&amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This format was invented for Helm 2 to ensure release names from
&lt;code&gt;HelmRelease&lt;/code&gt; resources in different namespaces would never accidentally
collide with each if they would have the same name, as release names

&lt;a href=&#34;https://helm.sh/docs/faq/#release-names-are-now-scoped-to-the-namespace&#34; target=&#34;_blank&#34;&gt;were not scoped in this version like they are in Helm 3&lt;/a&gt;,
and it still serves this purpose when a target namespace is defined.&lt;/p&gt;
&lt;p&gt;In some situations you may want to overwrite this generated release name, for
example because you want to take over a release made with &lt;code&gt;helm&lt;/code&gt;. This is
possible by declaring a &lt;code&gt;.releaseName&lt;/code&gt; which will replace the generated format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;releaseName&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;forcing-resource-updates&#34;&gt;Forcing resource updates&lt;/h2&gt;
&lt;p&gt;When a chart contains a breaking upgrade, you may need to force resource updates
through the replacement strategy of Helm, this is possible by setting
&lt;code&gt;.forceUpgrade&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;forceUpgrade&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reusing-values-during-upgrade&#34;&gt;Reusing values during upgrade&lt;/h2&gt;
&lt;p&gt;Due to the declarative behaviour of the Helm Operator it resets all values by
default, so that the only configuration being applied is what is defined in the
&lt;code&gt;HelmRelease&lt;/code&gt; resource. It is possible to disable this behaviour, and make it
reuse values from the previous release by explicitly stating that values should
not be reset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resetValues&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuring-the-timeout&#34;&gt;Configuring the timeout&lt;/h2&gt;
&lt;p&gt;To configure how many seconds Helm should wait for any individual Kubernetes operations
you can set &lt;code&gt;.timeout&lt;/code&gt;, the default is &lt;code&gt;300&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    When your chart requires a high non-default &lt;code&gt;timeout&lt;/code&gt; value it is advised
to increase the &lt;code&gt;terminationGracePeriod&lt;/code&gt; on the Helm Operator pod to not
end up with a release in a faulty state due to the operator receiving a
&lt;code&gt;SIGKILL&lt;/code&gt; signal during an upgrade.

&lt;/div&gt;

&lt;h2 id=&#34;wait-for-resources-to-be-ready&#34;&gt;Wait for resources to be ready&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    When you have many &lt;code&gt;HelmRelease&lt;/code&gt; resources with the waiting enabled,
it is likely that you want to increase the amount of &lt;code&gt;--workers&lt;/code&gt; to
ensure other releases are still processed, given the waiting process blocks
the worker from processing other &lt;code&gt;HelmRelease&lt;/code&gt; resources.

&lt;/div&gt;

&lt;p&gt;By default, Helm will mark a release as successfully deployed as soon as the
changes have been applied to the cluster. To instruct Helm to wait until
all resources are in ready state before marking the release as successful
you can set &lt;code&gt;.wait&lt;/code&gt;, or enable 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/tests/#enabling-tests&#34;&gt;tests&lt;/a&gt; or 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/rollbacks/#enabling-rollbacks&#34;&gt;rollbacks&lt;/a&gt; which has the same effect.
When set, it will wait for as long as 
&lt;a href=&#34;#configuring-the-timeout&#34;&gt;&lt;code&gt;.timeout&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;wait&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuring-the-max-number-of-revision-saved&#34;&gt;Configuring the max number of revision saved&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Setting this only has effect for a &lt;code&gt;HelmRelease&lt;/code&gt; targeting Helm 3.
You can configure a global history limit for Helm 2 by 
&lt;a href=&#34;https://v2.helm.sh/docs/using_helm/#initialize-helm-and-install-tiller&#34; target=&#34;_blank&#34;&gt;passing &lt;code&gt;--history-max &amp;lt;int&amp;gt;&lt;/code&gt; to &lt;code&gt;helm init&lt;/code&gt;&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;To configure the maximum number of revision saved by Helm for a &lt;code&gt;HelmRelease&lt;/code&gt;,
you can set &lt;code&gt;.maxHistory&lt;/code&gt;. Use &lt;code&gt;0&lt;/code&gt; for an unlimited number of revisions;
defaults to &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;maxHistory&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Setup Webhook Receivers</title>
      <link>/docs/iac/webhook-receivers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iac/webhook-receivers/</guid>
      <description>
        
        
        &lt;p&gt;Flux is by design &lt;strong&gt;pull-based&lt;/strong&gt;.
In order to notify the Flux controllers about changes in Git or Helm repositories,
you can setup webhooks and trigger a cluster reconciliation
every time a source changes. Using webhook receivers, you can build &lt;strong&gt;push-based&lt;/strong&gt;
GitOps pipelines that react to external events.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To follow this guide you&amp;rsquo;ll need a Kubernetes cluster with the GitOps
toolkit controllers installed on it.
Please see the 
&lt;a href=&#34;/docs/get-started/&#34;&gt;get started guide&lt;/a&gt;
or the 
&lt;a href=&#34;../installation/&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 
&lt;a href=&#34;../components/notification/_index.md&#34;&gt;notification controller&lt;/a&gt;
can handle events coming from external systems
(GitHub, GitLab, Bitbucket, Harbor, Jenkins, etc)
and notify the GitOps toolkit controllers about source changes.
The notification controller is part of the default toolkit installation.&lt;/p&gt;
&lt;h2 id=&#34;expose-the-webhook-receiver&#34;&gt;Expose the webhook receiver&lt;/h2&gt;
&lt;p&gt;In order to receive Git push or Helm chart upload events, you&amp;rsquo;ll have to
expose the webhook receiver endpoint outside of your Kubernetes cluster on
a public address.&lt;/p&gt;
&lt;p&gt;The notification controller handles webhook requests on port &lt;code&gt;9292&lt;/code&gt;.
This port can be used to create a Kubernetes LoadBalancer Service or Ingress.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;LoadBalancer&lt;/code&gt; service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;receiver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;LoadBalancer&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification-controller&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;9292&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait for Kubernetes to assign a public address with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;watch kubectl -n flux-system get svc/receiver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;or, create an &lt;code&gt;Ingress&lt;/code&gt; with the same destination, the &lt;code&gt;notification-webhook&lt;/code&gt; http service on port 9292:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;networking.k8s.io/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Ingress&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webhook-receiver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;rules&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;host&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-webhook.example.com&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;http&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;paths&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;pathType&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Prefix&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;backend&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;service&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification-webhook&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;number&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;9292&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add any necessary annotations for your ingress controller or, for example, cert-manager to encrypt the endpoint with TLS; full configuration of ingress controllers and TLS are beyond the scope of this documentation.&lt;/p&gt;
&lt;h2 id=&#34;define-a-git-repository&#34;&gt;Define a Git repository&lt;/h2&gt;
&lt;p&gt;Create a Git source pointing to a GitHub repository that you have control over:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;source.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webapp&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;60m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://github.com/&amp;lt;GH-ORG&amp;gt;/&amp;lt;GH-REPO&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;ref&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;branch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Authentication&lt;/h4&gt;

    SSH or token based authentication can be configured for private repositories.
See the 
&lt;a href=&#34;../components/source/gitrepositories.md&#34;&gt;GitRepository CRD docs&lt;/a&gt; for more details.

&lt;/div&gt;

&lt;h2 id=&#34;define-a-git-repository-receiver&#34;&gt;Define a Git repository receiver&lt;/h2&gt;
&lt;p&gt;First generate a random string and create a secret with a &lt;code&gt;token&lt;/code&gt; field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;TOKEN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;$(&lt;/span&gt;head -c &lt;span style=&#34;color:#40a070&#34;&gt;12&lt;/span&gt; /dev/urandom | shasum | cut -d &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#bb60d5&#34;&gt;$TOKEN&lt;/span&gt;

kubectl -n flux-system create secret generic webhook-token &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\	&lt;/span&gt;
--from-literal&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bb60d5&#34;&gt;$TOKEN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a receiver for GitHub and specify the &lt;code&gt;GitRepository&lt;/code&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;notification.toolkit.fluxcd.io/v1beta1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Receiver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webapp&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-system&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;github&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;events&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;push&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretRef&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webhook-token&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitRepository&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webapp&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Other receiver&lt;/h4&gt;

    Besides GitHub, you can define receivers for &lt;strong&gt;GitLab&lt;/strong&gt;, &lt;strong&gt;Bitbucket&lt;/strong&gt;, &lt;strong&gt;Harbor&lt;/strong&gt;
and any other system that supports webhooks e.g. Jenkins, CircleCI, etc.
See the 
&lt;a href=&#34;../components/notification/receiver.md&#34;&gt;Receiver CRD docs&lt;/a&gt; for more details.

&lt;/div&gt;

&lt;p&gt;The notification controller generates a unique URL using the provided token and the receiver name/namespace.&lt;/p&gt;
&lt;p&gt;Find the URL with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl -n flux-system get receiver/webapp

NAME     READY   STATUS
webapp   True    Receiver initialised with URL: /hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On GitHub, navigate to your repository and click on the &amp;ldquo;Add webhook&amp;rdquo; button under &amp;ldquo;Settings/Webhooks&amp;rdquo;.
Fill the form with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Payload URL&lt;/strong&gt;: compose the address using the receiver LB and the generated URL &lt;code&gt;http://&amp;lt;LoadBalancerAddress&amp;gt;/&amp;lt;ReceiverURL&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secret&lt;/strong&gt;: use the &lt;code&gt;token&lt;/code&gt; string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the above settings, when you push a commit to the repository, the following happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub sends the Git push event to the receiver address&lt;/li&gt;
&lt;li&gt;Notification controller validates the authenticity of the payload using HMAC&lt;/li&gt;
&lt;li&gt;Source controller is notified about the changes&lt;/li&gt;
&lt;li&gt;Source controller pulls the changes into the cluster and updates the &lt;code&gt;GitRepository&lt;/code&gt; revision&lt;/li&gt;
&lt;li&gt;Kustomize controller is notified about the revision change&lt;/li&gt;
&lt;li&gt;Kustomize controller reconciles all the &lt;code&gt;Kustomizations&lt;/code&gt; that reference the &lt;code&gt;GitRepository&lt;/code&gt; object&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Upgrading to Flux v1</title>
      <link>/legacy/flux/guides/upgrading-to-1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/guides/upgrading-to-1.0/</guid>
      <description>
        
        
        &lt;p&gt;Flux v1 is a major improvement over the previous versions, and is
different enough that you need to do a bit of work to upgrade it.&lt;/p&gt;
&lt;p&gt;In previous releases of Flux, much of the work was done by the
service. This meant that to get a useful system, you had to run both
the daemon and the service in your cluster. In version 1, the daemon
does all of the mechanical work by itself.&lt;/p&gt;
&lt;h2 id=&#34;differences-between-old-flux-and-flux-v1&#34;&gt;Differences between old Flux and Flux v1&lt;/h2&gt;
&lt;p&gt;In version 1 the daemon is more self-sufficient and easier to set
up. It is also more capable, and in particular, it now synchronises
your cluster with the manifests you keep in git &amp;ndash; enabling you to use
git (and GitHub) workflows to manage your cluster.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;&lt;th&gt;Old Flux&lt;/th&gt;&lt;th&gt;Flux v1&lt;/th&gt;&lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tr&gt;&lt;th&gt;Setting up the repo&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;
   &lt;ul&gt;
    &lt;li&gt;Create an SSH keypair&lt;/li&gt;
    &lt;li&gt;Construct a YAML file with the git repo and private key in it&lt;/li&gt;
    &lt;li&gt;Feed the config YAML file to the Flux service&lt;/li&gt;
    &lt;li&gt;Add the public key to GitHub/wherever&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/td&gt;
  &lt;td&gt;
   &lt;ul&gt;
    &lt;li&gt;The git repo can be supplied as an argument&lt;/li&gt;
    &lt;li&gt;The daemon  creates an SSH keypair&lt;/li&gt;
    &lt;li&gt;Add the public key to GitHub/wherever&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;&lt;th&gt;Supplying Docker registry credentials&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;
   &lt;ul&gt;
    &lt;li&gt;Assemble Docker credentials in a config.json file&lt;/li&gt;
    &lt;li&gt;Translate that file into entries in the config YAML file&lt;/li&gt;
    &lt;li&gt;Feed the config YAML file to the Flux service (again)&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/td&gt;
  &lt;td&gt;
    The daemon finds credentials for itself by looking at Kubernetes resources
  &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;&lt;th&gt;Managing your cluster with Flux&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;
   &lt;ul&gt;
    &lt;li&gt;For releasing images, use the UI or fluxctl; Flux will apply the changes to the cluster&lt;/li&gt;
    &lt;li&gt;For other changes, commit them to config, then apply to the cluster with kubectl&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/td&gt;
  &lt;td&gt;
   &lt;ul&gt;
    &lt;li&gt;For releasing images, use the UI or fluxctl; Flux will commit changes to your git repo&lt;/li&gt;
    &lt;li&gt;For other changes, commit them to your git repo&lt;/li&gt;
    &lt;li&gt;Flux applies all changes to the git repo to the cluster&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;upgrade-process&#34;&gt;Upgrade process&lt;/h2&gt;
&lt;p&gt;In summary, you will need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove the old Flux resources from your cluster&lt;/li&gt;
&lt;li&gt;Delete any deployment keys&lt;/li&gt;
&lt;li&gt;Run the new Flux resources&lt;/li&gt;
&lt;li&gt;Install a new deploy key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, it will help in a few places to have an old fluxctl
around. Download it from GitHub:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -o fluxctl_030 https://github.com/fluxcd/flux/releases/download/0.3.0/fluxctl_linux_amd64
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# or if using macOS,&lt;/span&gt;
&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# curl -o fluxctl_030 https://github.com/fluxcd/flux/releases/download/0.3.0/fluxctl_darwin_amd64&lt;/span&gt;
chmod a+x ./fluxctl_030
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;if-you-are-running-flux-in-standalone-mode&#34;&gt;If you are running Flux in &amp;ldquo;standalone&amp;rdquo; mode&lt;/h2&gt;
&lt;p&gt;Set the environment variable FLUX_URL to point to the Flux service you
are running, as described in

&lt;a href=&#34;https://github.com/fluxcd/flux/blob/0.3.0/site/using.md#fluxctl-setup&#34; target=&#34;_blank&#34;&gt;the old deployment docs&lt;/a&gt;. The
particular URL will differ, depending on how you have told Kubernetes
to expose the Flux service.&lt;/p&gt;
&lt;p&gt;Before making any changes, get the config so that it can be consulted later:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./fluxctl_030 get-config --fingerprint&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;md5 | tee old-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;remove-old-flux-resources&#34;&gt;Remove old Flux resources&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Important! If you have Flux resources committed to git&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing to do here is to remove any manifests for running
Flux you have stored in git, before deleting them in the cluster
(below). If you don’t remove these, running the new Flux daemon will
restore the old configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can delete the Flux resources by referring to the manifest files
used to create them. If you don’t have the files on hand, you can try
using the example deployment as a stand-in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --branch 0.3.0 git@github.com:fluxcd/flux flux-0.3.0
kubectl delete --ignore-not-found -R -f ./flux-0.3.0/deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s something of a sledgehammer! But it should cover most cases.&lt;/p&gt;
&lt;h3 id=&#34;delete-deployment-keys&#34;&gt;Delete deployment keys&lt;/h3&gt;
&lt;p&gt;It’s good practice to remove any unused deployment keys. If you’re
using GitHub, look at the settings for the repository you were
pointing Flux at, and delete the key Flux was using. To check you are
removing the correct key, you can see the fingerprint of the key used
by Flux in the file &lt;code&gt;old-config.yaml&lt;/code&gt; that was created earlier.&lt;/p&gt;
&lt;h3 id=&#34;configure-and-run-new-flux-resources&#34;&gt;Configure and run new Flux resources&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;First, it is important to understand that Flux manages more of your
cluster resources now. It will automatically apply the manifests
that appear in your config repo, either by creating or by updating
them.  In other words, it tries to keep the cluster running whatever
is represented in the repo. (Though it doesn’t delete things, yet).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To run Flux without connecting to Weave Cloud, adapt the manifests
provided in the

&lt;a href=&#34;https://github.com/fluxcd/flux/tree/master/deploy&#34; target=&#34;_blank&#34;&gt;Flux repo&lt;/a&gt;
with the git parameters (URL, path, and branch) from
&lt;code&gt;old-config.yaml&lt;/code&gt;, and then apply them with &lt;code&gt;kubectl&lt;/code&gt;. Consider adding
these adapted manifests to your own config repo.&lt;/p&gt;
&lt;p&gt;The daemon now has an API itself, so you can point fluxctl directly at
it (the example manifests include a Kubernetes service so you can do
just that).&lt;/p&gt;
&lt;p&gt;You may find that you need to set FLUX_URL again, to take account of
the new deployment. See the

&lt;a href=&#34;https://github.com/fluxcd/flux/blob/1.0.1/site/standalone/setup.md#connecting-fluxctl-to-the-daemon&#34; target=&#34;_blank&#34;&gt;setup instructions&lt;/a&gt;
for guidance.&lt;/p&gt;
&lt;p&gt;To see the SSH key created by Flux, download the latest fluxctl from

&lt;a href=&#34;https://github.com/fluxcd/flux/releases/tag/1.0.1&#34; target=&#34;_blank&#34;&gt;the release page&lt;/a&gt;
and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fluxctl identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will need to add this as a deploy key, which is also described in
the setup instructions linked above.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h3 id=&#34;the-kubectl-delete-commands-didnt-delete-anything&#34;&gt;The &lt;code&gt;kubectl delete&lt;/code&gt; commands didn’t delete anything&lt;/h3&gt;
&lt;p&gt;It’s possible that the Flux resources are in an unusual namespace or
given a different name. As a last resort, you can hunt down the
resources by name and delete them. Use kubectl to look for likely
suspects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl get serviceaccount,service,deployment --all-namespaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Have a look for deployments and services with “flux” in the name.&lt;/p&gt;
&lt;h3 id=&#34;i-deleted-the-flux-resources-but-when-i-install-flux-v1-they-come-back&#34;&gt;I deleted the Flux resources but when I install Flux v1 they come back&lt;/h3&gt;
&lt;p&gt;The most likely explanation is that you have manifests for the
resources in your config repo. When Flux v1 starts, it does a sync &amp;ndash;
and if there are manifests for the old Flux still in git, it will
create those as resources.&lt;/p&gt;
&lt;p&gt;If that’s the case, you will need to remove the manifests from git
before running Flux v1.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Get started using Kustomize</title>
      <link>/legacy/helm-operator/get-started/using-kustomize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/get-started/using-kustomize/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through setting up the Helm Operator using

&lt;a href=&#34;https://kustomize.io&#34; target=&#34;_blank&#34;&gt;Kustomize&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes cluster &lt;strong&gt;&amp;gt;=1.13.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kustomize&lt;/code&gt; &lt;strong&gt;&amp;gt;=3.2.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Some knowledge of Kustomize&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt;
Tiller 
&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;(secure setup)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prepare-the-manifests-for-installation&#34;&gt;Prepare the manifests for installation&lt;/h2&gt;
&lt;p&gt;Create a directory called &lt;code&gt;helm-operator&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir helm-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a &lt;code&gt;kustomization.yaml&lt;/code&gt; file and use the 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/tree/1.2.0/deploy&#34; target=&#34;_blank&#34;&gt;Helm Operator
deployment YAMLs&lt;/a&gt;
as a base:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/kustomization.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;bases:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;- github.com/fluxcd/helm-operator//deploy
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;patchesJSON6902:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;- target:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    group: apps
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    version: v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    name: helm-operator
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    namespace: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  patch: |-
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    - op: replace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      path: /spec/template/spec/containers/0/args
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      value:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - --enabled-helm-versions=v3
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;patchesJSON6902&lt;/code&gt; target ensures only support for Helm 3 is
enabled, to also enable support for Helm 2 and connect to Tiller,
continue to read 
&lt;a href=&#34;#helm-2&#34;&gt;Helm 2&lt;/a&gt; below.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip&lt;/h4&gt;

    &lt;p&gt;If you want to install a specific Helm Operator release, add the
version number to the base URL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bases&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- github.com/fluxcd/helm-operator//deploy?ref=1.2.0&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;h3 id=&#34;helm-2&#34;&gt;Helm 2&lt;/h3&gt;
&lt;p&gt;To also enable support for Helm 2 and configure the Tiller settings, we
need to make slight adjustment to the &lt;code&gt;patchesJSON6902&lt;/code&gt; target.&lt;/p&gt;
&lt;p&gt;First, make sure 
&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;your Tiller installation is
secure&lt;/a&gt;, and add a
&lt;code&gt;secretGenerator&lt;/code&gt; entry of type &lt;code&gt;kubernetes.io/tls&lt;/code&gt; for the client
certificates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# helm-operator/kustomization.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux  &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# ensures secret is generated in the right namespace&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bases&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- github.com/fluxcd/helm-operator//deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretGenerator&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;tiller-tls-cert&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kubernetes.io/tls&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;files&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- tls.crt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- tls.key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesJSON6902&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a patch file for the Helm Operator to mount the &lt;code&gt;tiller-tls-cert&lt;/code&gt;
secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/patch-tiller-tls.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: helm-operator
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  namespace: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      volumes:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - name: tiller-tls-cert
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          secret:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            secretName: tiller-tls-cert
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            defaultMode: 0400
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - name: helm-operator
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          volumeMounts:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          - name: tiller-tls-cert
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            mountPath: /etc/fluxd/helm
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            readOnly: true
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adapt your &lt;code&gt;kustomization.yaml&lt;/code&gt; to include the patch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# helm-operator/kustomization.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- patch-tiller-tls.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add (or replace) &lt;code&gt;v2&lt;/code&gt; to &lt;code&gt;--enabled-helm-versions&lt;/code&gt; and configure the
required 
&lt;a href=&#34;/legacy/helm-operator/references/operator/#tiller-configuration&#34;&gt;Tiller option flags&lt;/a&gt;
for your setup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# helm-operator/kustomization.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesJSON6902&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;group&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-operator&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|-&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    - op: replace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      path: /spec/template/spec/containers/0/args
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      value:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;        - --enabled-helm-versions=v2,v3     # enables Helm 2
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;        - --tiller-namespace=kube-system    # defines the Tiller namespace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;        - --tiller-tls-enable=true          # enables TLS communication with Tiller&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-the-helm-operator-using-kustomize&#34;&gt;Install the Helm Operator using Kustomize&lt;/h2&gt;
&lt;p&gt;Deploy the Helm Operator to the cluster by applying the &lt;code&gt;helm-operator&lt;/code&gt;
folder with the &lt;code&gt;kustomization.yaml&lt;/code&gt; file in it onto the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kustomize build helm-operator | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the Helm Operator deployed successfully to the default &lt;code&gt;flux&lt;/code&gt;
namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n flux rollout status deployment/helm-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customize-the-helm-operator-deployment&#34;&gt;Customize the Helm Operator deployment&lt;/h2&gt;
&lt;h3 id=&#34;configure-a-namespace&#34;&gt;Configure a namespace&lt;/h3&gt;
&lt;p&gt;By default the Helm Operator is installed in the &lt;code&gt;flux&lt;/code&gt; namespace when
making use of the published deployment YAMLs as a base. It is possible
to override this default namespace by creating a custom namespace
definition and configuring a &lt;code&gt;namespace&lt;/code&gt; in your &lt;code&gt;kustomization.yaml&lt;/code&gt;
file.&lt;/p&gt;
&lt;p&gt;Create a custom namespace definition, this example uses &lt;code&gt;team-ns&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/namespace.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Namespace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: team-ns
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a patch to remove the default namespace from the base:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/patch-default-ns.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Namespace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;\$patch: delete
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adapt your &lt;code&gt;kustomization.yaml&lt;/code&gt; file to to include your own namespace
resource and the patch file, and define the &lt;code&gt;namespace&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# helm-operator/kustomization.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;team-ns&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- namespace.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bases&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- github.com/fluxcd/helm-operator//deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesJSON6902&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;group&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-operator&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|-&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    - op: replace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      path: /spec/template/spec/containers/0/args
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      value:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;        - --enabled-helm-versions=v3&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- patch-default-ns.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the &lt;code&gt;helm-operator&lt;/code&gt; folder with the &lt;code&gt;kustomization.yaml&lt;/code&gt; file
in it onto the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -k helm-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the Helm Operator deployed successfully to the &lt;code&gt;teamn-ns&lt;/code&gt;
namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n team-ns rollout status deployment/helm-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;provide-helm-repository-credentials&#34;&gt;Provide Helm repository credentials&lt;/h3&gt;
&lt;p&gt;To mount a custom &lt;code&gt;repositories.yaml&lt;/code&gt; file to e.g. provide credentials
to a Helm chart repository 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/chart-sources/#authentication-and-certificates&#34;&gt;as described in the &lt;code&gt;HelmRelease&lt;/code&gt;
guide&lt;/a&gt;,
you can instruct Kustomize to create a secret from the
&lt;code&gt;repositories.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;First, create the &lt;code&gt;repositores.yaml&lt;/code&gt; file with the credentials:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/repositories.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;generated: &amp;#34;0001-01-01T00:00:00Z&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;repositories:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;- caFile: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  certFile: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  keyFile: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: private-repository
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  url: https://charts.example.com
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  password: john
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  username: s3cr3t!
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a patch file for the Helm Operator to mount the &lt;code&gt;flux-helm-repositories&lt;/code&gt;
secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; helm-operator/patch-repositories-mount.yaml &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  name: helm-operator
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  namespace: flux
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      volumes:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - name: repositories-yaml
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          secret:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            secretName: flux-helm-repositories
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            defaultMode: 0400
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;        - name: helm-operator
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;          volumeMounts:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;            - name: repositories-yaml
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;              mountPath: /root/.helm/repository/repositories.yaml
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;              readOnly: true
&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adapt the &lt;code&gt;kustomization.yaml&lt;/code&gt; file to instruct it to generate the
secret and apply the patch file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# helm-operator/kustomization.yaml&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux        &lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# ensures secret is generated in the right namespace                            &lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;bases&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;- github.com/fluxcd/helm-operator//deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesJSON6902&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;group&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;helm-operator&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patch&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|-&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;    - op: replace
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      path: /spec/template/spec/containers/0/args
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;      value:
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-style:italic&#34;&gt;        - --enabled-helm-versions=v3&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretGenerator&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-helm-repositories&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;files&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- repositories.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;patchesStrategicMerge&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- patch-repositories-mount.yaml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the &lt;code&gt;helm-operator&lt;/code&gt; folder with the &lt;code&gt;kustomization.yaml&lt;/code&gt; file
in it onto the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kustomize build helm-operator | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn all about the available configuration options in the 
&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;operator
reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Continue learning about &lt;code&gt;HelmRelease&lt;/code&gt; resources 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/introduction/&#34;&gt;in the
guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Garbage collection</title>
      <link>/legacy/flux/references/garbagecollection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/garbagecollection/</guid>
      <description>
        
        
        &lt;p&gt;Part of syncing a cluster with a git repository is getting rid of
resources in the cluster that have been removed in the repository. You
can tell &lt;code&gt;fluxd&lt;/code&gt; to do this &amp;ldquo;garbage collection&amp;rdquo; using the command-line
flag &lt;code&gt;--sync-garbage-collection&lt;/code&gt;. It&amp;rsquo;s important to know how it
operates, and appreciate its limitations, before enabling it.&lt;/p&gt;
&lt;h2 id=&#34;how-garbage-collection-works&#34;&gt;How garbage collection works&lt;/h2&gt;
&lt;p&gt;When garbage collection is enabled, syncing is done in two phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Apply all the manifests in the git repo (as delimited by the
branch and path arguments), and give each resource a label marking
it as having been synced from this source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the cluster for all the resources marked as being from this
source, and delete those that were not applied in step 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the above, &amp;ldquo;source&amp;rdquo; refers to the particular combination of git
repo URL, branch, and paths that this &lt;code&gt;fluxd&lt;/code&gt; has been configured to
use, which is taken as identifying the resources under &lt;em&gt;this&lt;/em&gt;
&lt;code&gt;fluxd&lt;/code&gt;&amp;rsquo;s control.&lt;/p&gt;
&lt;p&gt;We need to be careful about identifying these accurately, since
getting it wrong could mean &lt;em&gt;not&lt;/em&gt; deleting resources that should be
deleted; or (much worse), deleting resources that are under another
&lt;code&gt;fluxd&lt;/code&gt;&amp;rsquo;s control.&lt;/p&gt;
&lt;p&gt;The definition of &amp;ldquo;source&amp;rdquo; affects how garbage collection behaves when
you reconfigure &lt;code&gt;fluxd&lt;/code&gt;. It is intended to be conservative: it ensures
that &lt;code&gt;fluxd&lt;/code&gt; will not delete resources that it did not create.&lt;/p&gt;
&lt;h2 id=&#34;limitations-of-this-approach&#34;&gt;Limitations of this approach&lt;/h2&gt;
&lt;p&gt;In general, if you change an element of the source (the git repo URL,
branch, and paths), there is a possiblility that resources no longer
present in the new source will be missed (i.e., not deleted) by
garbage collection, and you will need to delete them by hand.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Config change&lt;/th&gt;
&lt;th&gt;What happens&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git URL or branch&lt;/td&gt;
&lt;td&gt;If the manifests at the new git repo are the same, they will all be relabelled, and things will proceed as usual. If they are different, the resources from the old repo will be missed by garbage collection and will need to be deleted by hand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path added&lt;/td&gt;
&lt;td&gt;Existing resources will be relabelled, and new resources (from manifests in the new path) will be created. Then things will proceed as usual.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path removed&lt;/td&gt;
&lt;td&gt;The resources from manifests in the removed path will be missed by garbage collection, and will need to be deleted by hand. Other resources will be treated as usual.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Monitoring with Prometheus</title>
      <link>/docs/iac/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iac/monitoring/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through configuring monitoring for the Flux control plane.&lt;/p&gt;
&lt;p&gt;Flux uses 
&lt;a href=&#34;https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack&#34; target=&#34;_blank&#34;&gt;kube-prometheus-stack&lt;/a&gt;
to provide a monitoring stack made out of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prometheus Operator&lt;/strong&gt; - manages Prometheus clusters atop Kubernetes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prometheus&lt;/strong&gt; - collects metrics from the Flux controllers and Kubernetes API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grafana&lt;/strong&gt; dashboards - displays the Flux control plane resource usage and reconciliation stats&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kube-state-metrics&lt;/strong&gt; - generates metrics about the state of the Kubernetes objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-the-kube-prometheus-stack&#34;&gt;Install the kube-prometheus-stack&lt;/h2&gt;
&lt;p&gt;To install the monitoring stack with &lt;code&gt;flux&lt;/code&gt;, first register the toolkit Git repository on your cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create &lt;span style=&#34;color:#007020&#34;&gt;source&lt;/span&gt; git monitoring &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;30m &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --url&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://github.com/fluxcd/flux2 &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --branch&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then apply the 
&lt;a href=&#34;https://github.com/fluxcd/flux2/tree/main/manifests/monitoring/kube-prometheus-stack&#34; target=&#34;_blank&#34;&gt;manifests/monitoring/kube-prometheus-stack&lt;/a&gt;
kustomization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create kustomization monitoring-stack &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1h &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --prune&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --source&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;monitoring &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;./manifests/monitoring/kube-prometheus-stack&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --health-check&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Deployment/kube-prometheus-stack-operator.monitoring&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --health-check&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Deployment/kube-prometheus-stack-grafana.monitoring&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above Kustomization will install the kube-prometheus-stack in the &lt;code&gt;monitoring&lt;/code&gt; namespace.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Prometheus Configuration&lt;/h4&gt;

    Note that the above configuration is not suitable for production.
In order to configure long term storage for metrics
and highly availability for Prometheus consult the Helm
chart 
&lt;a href=&#34;https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;install-flux-grafana-dashboards&#34;&gt;Install Flux Grafana dashboards&lt;/h2&gt;
&lt;p&gt;Note that the Flux controllers expose the &lt;code&gt;/metrics&lt;/code&gt; endpoint on port &lt;code&gt;8080&lt;/code&gt;.
When using Prometheus Operator you need a &lt;code&gt;PodMonitor&lt;/code&gt; object to configure scraping for the controllers.&lt;/p&gt;
&lt;p&gt;Apply the 
&lt;a href=&#34;https://github.com/fluxcd/flux2/tree/main/manifests/monitoring/monitoring-config&#34; target=&#34;_blank&#34;&gt;manifests/monitoring/monitoring-config&lt;/a&gt;
containing the &lt;code&gt;PodMonitor&lt;/code&gt; and the &lt;code&gt;ConfigMap&lt;/code&gt; with Flux&amp;rsquo;s Grafana dashboards:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;flux create kustomization monitoring-config &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --interval&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;1h &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --prune&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --source&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;monitoring &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;./manifests/monitoring/monitoring-config&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can access Grafana using port forwarding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana 3000:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To log in to the Grafana dashboard, you can use the default credentials from the 
&lt;a href=&#34;https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml#L620&#34; target=&#34;_blank&#34;&gt;kube-prometheus-stack chart&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;username&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;admin&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;password&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;prom-operator&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;flux-dashboards&#34;&gt;Flux dashboards&lt;/h2&gt;
&lt;p&gt;Control plane dashboard 
&lt;a href=&#34;http://localhost:3000/d/flux-control-plane/flux-control-plane&#34; target=&#34;_blank&#34;&gt;http://localhost:3000/d/flux-control-plane&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/cp-dashboard-p1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/cp-dashboard-p2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Cluster reconciliation dashboard 
&lt;a href=&#34;http://localhost:3000/d/flux-cluster/flux-cluster-stats&#34; target=&#34;_blank&#34;&gt;http://localhost:3000/d/flux-cluster&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/cluster-dashboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you wish to use your own Prometheus and Grafana instances, then you can import the dashboards from

&lt;a href=&#34;https://github.com/fluxcd/flux2/tree/main/manifests/monitoring/grafana/dashboards&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;p&gt;For each &lt;code&gt;toolkit.fluxcd.io&lt;/code&gt; kind,
the controllers expose a gauge metric to track the Ready condition status,
and a histogram with the reconciliation duration in seconds.&lt;/p&gt;
&lt;p&gt;Ready status metrics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gotk_reconcile_condition&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace, &lt;span style=&#34;color:#bb60d5&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Ready&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bb60d5&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
gotk_reconcile_condition&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace, &lt;span style=&#34;color:#bb60d5&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Ready&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bb60d5&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
gotk_reconcile_condition&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace, &lt;span style=&#34;color:#bb60d5&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Ready&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bb60d5&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
gotk_reconcile_condition&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace, &lt;span style=&#34;color:#bb60d5&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Ready&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bb60d5&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Deleted&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suspend status metrics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gotk_suspend_status&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Time spent reconciling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gotk_reconcile_duration_seconds_bucket&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace, le&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
gotk_reconcile_duration_seconds_sum&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
gotk_reconcile_duration_seconds_count&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;kind, name, namespace&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alert manager example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;groups&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;GitOpsToolkit&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;rules&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;alert&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ReconciliationFailure&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;expr&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;max(gotk_reconcile_condition{status=&amp;#34;False&amp;#34;,type=&amp;#34;Ready&amp;#34;}) by (namespace, name, kind) + on(namespace, name, kind) (max(gotk_reconcile_condition{status=&amp;#34;Deleted&amp;#34;}) by (namespace, name, kind)) * 2 == 1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;for&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;10m&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;severity&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;page&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;summary&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;{{ $labels.kind }} {{ $labels.namespace }}/{{ $labels.name }} reconciliation has been failing for more than ten minutes.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Reconciliation and upgrades</title>
      <link>/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/helmrelease-guide/reconciliation-and-upgrades/</guid>
      <description>
        
        
        &lt;p&gt;Now that you know the ins and outs of configuring a release, we are going to
have a better look at how the Helm Operator performs the actual Helm release.&lt;/p&gt;
&lt;h2 id=&#34;reconciliation&#34;&gt;Reconciliation&lt;/h2&gt;
&lt;p&gt;On the creation and update of a &lt;code&gt;HelmRelease&lt;/code&gt; the resource is queued for
reconciliation. Besides this all &lt;code&gt;HelmRelease&lt;/code&gt; resources handled by the Helm
operator instance are also queued for reconciliation every

&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;&lt;code&gt;--charts-sync-interval&lt;/code&gt;&lt;/a&gt; (defaults to 3
minutes).&lt;/p&gt;
&lt;p&gt;Once the queued resource has been picked up by a worker, the Helm Operator
attempts to receive the chart for the resource and performs several 
&lt;a href=&#34;#what-triggers-an-upgrade&#34;&gt;safe guard
checks&lt;/a&gt;; if those do not result in an error or
instruct to return early, the Helm installation or upgrade is performed.&lt;/p&gt;
&lt;h2 id=&#34;what-triggers-an-upgrade&#34;&gt;What triggers an upgrade&lt;/h2&gt;
&lt;p&gt;To prevent spurious upgrades from happening the Helm Operator performs several
safe guard checks before performing the actual upgrade. Bellow you will find an
overview of the checks it performs, and what effect they have.&lt;/p&gt;
&lt;p&gt;If any of the following equals to &lt;code&gt;false&lt;/code&gt;, the sync process will exit with an
error and no upgrade will be performed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The values composed of the merged &lt;code&gt;.valuesFrom&lt;/code&gt; and &lt;code&gt;.values&lt;/code&gt; are valid
YAML.&lt;/li&gt;
&lt;li&gt;The resources of the Helm release are 
&lt;a href=&#34;#the-antecedent-annotation&#34;&gt;marked as being managed by the
&lt;code&gt;HelmRelease&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The current state of the Helm release is &lt;code&gt;deployed&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first of the following that equals to &lt;code&gt;true&lt;/code&gt; will result in an upgrade
being performed, otherwise no action is taken:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No Helm release exists in the Helm storage for the &lt;code&gt;HelmRelease&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This generation of the &lt;code&gt;HelmRelease&lt;/code&gt; has not been processed before —
the generation changes for example when the &lt;code&gt;.spec&lt;/code&gt; is edited.&lt;/li&gt;
&lt;li&gt;The result of a dry-run upgrade for the &lt;code&gt;HelmRelease&lt;/code&gt; differs from the
latest release in the Helm storage.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Mutations to live cluster-state are not detected and thus not
reverted. This will however be added in the foreseeable future.

&lt;/div&gt;

&lt;h2 id=&#34;upgrade-failures&#34;&gt;Upgrade failures&lt;/h2&gt;
&lt;p&gt;When an upgrade fails, the Helm Operator will stop performing upgrades for the
release as it cannot assume this is a safe procedure, nor does it
automatically perform 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/rollbacks/&#34;&gt;a rollback&lt;/a&gt;. Instead it will start logging
warnings about the &lt;code&gt;failed&lt;/code&gt; status of the release.&lt;/p&gt;
&lt;p&gt;Recovering from this is possible, after having inspected the state of the
release, by getting the Helm release manually in a &lt;code&gt;deployed&lt;/code&gt; state, for
example by performing a rollback or upgrade for the release using &lt;code&gt;helm&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;helm rollback &amp;lt;release name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-antecedent-annotation&#34;&gt;The antecedent annotation&lt;/h2&gt;
&lt;p&gt;Right after the Helm Operator performs a Helm release for the
&lt;code&gt;HelmRelease&lt;/code&gt; resource, all resources that were the result of this release
are annotated with the antecedent annotation &lt;code&gt;helm.fluxcd.io/antecedent&lt;/code&gt;,
the value of the annotation equals to &lt;code&gt;&amp;lt;namespace&amp;gt;:helmrelease/&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The purpose of this annotation is to indicate that the cause of that resource
is a &lt;code&gt;HelmRelease&lt;/code&gt;. It also functions as a safe guard during reconciliation
to ensure the release is only managed by a single &lt;code&gt;HelmRelease&lt;/code&gt;, as it is
possible that due to a misconfiguration multiple &lt;code&gt;HelmRelease&lt;/code&gt; resources exist
with the same &lt;code&gt;.releaseName&lt;/code&gt; set.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Using GKE Workload Identity with Flux</title>
      <link>/legacy/flux/guides/use-gke-workload-identity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/guides/use-gke-workload-identity/</guid>
      <description>
        
        
        &lt;p&gt;When Flux is running in a GKE cluster with 
&lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity&#34; target=&#34;_blank&#34;&gt;Workload Identity&lt;/a&gt; enabled and you use Google Container Registry to host private images in your project, there are additional steps required for Flux to be able to check for updated images.&lt;/p&gt;
&lt;p&gt;Without Workload Identity, Pods in the cluster by default assume the default IAM account of the GCP compute instances they are running on. With Workload Identity enabled, however, VM instance and Pod identity is completely separate. This results in Flux no longer being able to access a private GCR registry in the same project.&lt;/p&gt;
&lt;p&gt;In this case, the Kubernetes service account as which Flux is running needs to be granted the Storage Object Viewer role to the registry&amp;rsquo;s underlying GCS bucket to scan for updated images.&lt;/p&gt;
&lt;h2 id=&#34;configure-a-gcp-service-account&#34;&gt;Configure a GCP service account&lt;/h2&gt;
&lt;p&gt;The first step is to create an 
&lt;a href=&#34;https://cloud.google.com/docs/authentication/getting-started#creating_a_service_account&#34; target=&#34;_blank&#34;&gt;IAM service account&lt;/a&gt; in the GCP project and assign it the Storage Object Viewer (&lt;code&gt;storage.objectViewer&lt;/code&gt;) role in the GCS bucket that is backing the container registry in your project.&lt;/p&gt;
&lt;p&gt;Next, the GCP service account needs to be assigned the &lt;code&gt;iam.workloadIdentityUser&lt;/code&gt; role:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcloud iam service-accounts add-iam-policy-binding &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --role roles/iam.workloadIdentityUser &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --member &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;serviceAccount:cluster_project.svc.id.goog[k8s_namespace/ksa_name]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  gsa_name@gsa_project.iam.gserviceaccount.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So if your GCP project is called &lt;code&gt;total-mayhem-123456&lt;/code&gt; and the GCP service account &lt;code&gt;flux-gcp&lt;/code&gt; and Flux in your Kubernetes cluster(s) are running in the namespace &lt;code&gt;flux&lt;/code&gt; and using the service account &lt;code&gt;flux&lt;/code&gt; (the default), this would translate to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcloud iam service-accounts add-iam-policy-binding &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --role roles/iam.workloadIdentityUser &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  --member &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;serviceAccount:total-mayhem-123456.svc.id.goog[flux/flux]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;  flux-gcp@total-mayhem-123456.iam.gserviceaccount.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configure-k8s-service-account&#34;&gt;Configure K8s service account&lt;/h2&gt;
&lt;p&gt;In the second step you need to add an annotation to the Kubernetes service account as which the Flux pod is running in the cluster, so Workload Identity knows the relationship of GCP to K8s service account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ServiceAccount&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;iam.gke.io/gcp-service-account=flux-gcp@total-mayhem-123456.iam.gserviceaccount.com&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, if you use the Helm chart to install Flux, you can set the annotations during installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# You need to escape the dots in the annotation key, else Helm will throw an error&lt;/span&gt;
helm upgrade -i flux fluxcd/flux &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--set serviceAccount.annotations.&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;iam\.gke\.io/gcp-service-account&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;flux-gcp@total-mayhem-123456.iam.gserviceaccount.com&amp;#39;&lt;/span&gt;
--set &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;your other settings here&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt;--namespace flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Legacy: Get started using YAMLs</title>
      <link>/legacy/helm-operator/get-started/using-yamls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/helm-operator/get-started/using-yamls/</guid>
      <description>
        
        
        &lt;p&gt;This guide walks you through setting up the Helm Operator using

&lt;a href=&#34;https://github.com/fluxcd/helm-operator/tree/1.2.0/deploy&#34; target=&#34;_blank&#34;&gt;deployment YAMLs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes cluster &lt;strong&gt;&amp;gt;=1.1.3.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt;
Tiller 
&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;(secure setup)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-the-helm-operator&#34;&gt;Install the Helm Operator&lt;/h2&gt;
&lt;p&gt;First, install the &lt;code&gt;HelmRelease&lt;/code&gt; Custom Resource Definition. By adding this CRD
it will be possible to define &lt;code&gt;HelmRelease&lt;/code&gt; resources on the cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/crds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proceed to create the &lt;code&gt;flux&lt;/code&gt; namespace, this is the namespace the Helm Operator
will be deployed to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create namespace flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the &lt;code&gt;ServiceAccount&lt;/code&gt;, &lt;code&gt;ClusterRole&lt;/code&gt; and &lt;code&gt;ClusterRoleBinding&lt;/code&gt; so that the
Helm Operator can access cluster resources:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/rbac.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the Helm Operator deployment itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl deploy -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;helm-3&#34;&gt;Helm 3&lt;/h3&gt;
&lt;p&gt;The default deployment of the Helm Operator comes with support for Helm 2 and 3
enabled. To disable support for Helm 2 (and recover from the Tiller connection
failure), patch the resource to set &lt;code&gt;--enabled-helm-versions=v3&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl deploy -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.2.0/deploy/deployment.yaml \
    --type=&#39;json&#39; \
    -p=&#39;[{&amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/spec/template/spec/containers/0/args/-&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;--enabled-helm-versions=v3&amp;quot;}]&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm-2&#34;&gt;Helm 2&lt;/h3&gt;
&lt;p&gt;The default deployment of the Helm Operator does enable support for Helm 2 but
does not take any custom configurations like Tiller TLS settings into account.
If your Tiller is e.g. in a different namespace than &lt;code&gt;kube-system&lt;/code&gt; or

&lt;a href=&#34;https://v2.helm.sh/docs/securing_installation/&#34; target=&#34;_blank&#34;&gt;securely setup&lt;/a&gt;, take a look
at the available 
&lt;a href=&#34;/legacy/helm-operator/references/operator/#tiller-configuration&#34;&gt;Tiller configuration flags&lt;/a&gt;
and 
&lt;a href=&#34;https://github.com/fluxcd/helm-operator/blob/1.2.0/deploy/deployment.yaml&#34; target=&#34;_blank&#34;&gt;commented out sections&lt;/a&gt;
in the example deployment to further tweak your Helm Operator installation.&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn all about the available configuration options in the 
&lt;a href=&#34;/legacy/helm-operator/references/operator/&#34;&gt;operator
reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Continue learning about &lt;code&gt;HelmRelease&lt;/code&gt; resources 
&lt;a href=&#34;/legacy/helm-operator/helmrelease-guide/introduction/&#34;&gt;in the
guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Legacy: Git commit signing and verification</title>
      <link>/legacy/flux/references/git-gpg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legacy/flux/references/git-gpg/</guid>
      <description>
        
        
        &lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Flux can be configured to sign commits that it makes to the user git
repo when, for example, it detects an updated Docker image is available
for a release with automatic deployments enabled. To complete this
functionality it is also able to verify signatures of commits (and the
sync tag in git) to prevent Flux from applying unauthorized changes on
the cluster.&lt;/p&gt;
&lt;h2 id=&#34;commit-signing&#34;&gt;Commit signing&lt;/h2&gt;
&lt;p&gt;The signing of commits (and the sync tag) requires two flags to be set:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;--git-gpg-key-import&lt;/code&gt; should be set to the path(s) Flux should look
for GPG key(s) to import, this can be direct paths to keys and/or
the paths to folders Flux should scan for files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--git-signing-key&lt;/code&gt; should be set to the ID of the key Flux should
use to sign commits, this can be the full fingerprint or the long
ID, for example: &lt;code&gt;700D397C988079BFF0DDAFED6A7436E8790F8689&lt;/code&gt; (or
&lt;code&gt;6A7436E8790F8689&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once enabled Flux will sign both commits and the sync tag with given
&lt;code&gt;--git-signing-key&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-gpg-signing-key&#34;&gt;Creating a GPG signing key&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    This requires 
&lt;a href=&#34;https://www.gnupg.org&#34; target=&#34;_blank&#34;&gt;gnupg&lt;/a&gt; to be
installed on your system.

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enter the following shell command to start the key generation dialog:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt; $ gpg --full-generate-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The dialog will guide you through the process of generating a key.
Pressing the &lt;code&gt;Enter&lt;/code&gt; key will assign the default value, please note
that when in doubt, in almost all cases, the default value is
recommended.&lt;/p&gt;
&lt;p&gt;Select what kind of key you want and press &lt;code&gt;Enter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Please &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;select&lt;/span&gt; what kind of key you want:
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; RSA and RSA &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;default&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; DSA and Elgamal
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; DSA &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;sign only&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; RSA &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;sign only&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Your selection? &lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the desired key size (or simply press &lt;code&gt;Enter&lt;/code&gt; as the default
will be secure for almost any setup):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;RSA keys may be between &lt;span style=&#34;color:#40a070&#34;&gt;1024&lt;/span&gt; and &lt;span style=&#34;color:#40a070&#34;&gt;4096&lt;/span&gt; bits long.
What keysize &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;do&lt;/span&gt; you want? &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;2048&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify how long the key should be valid (or simply press &lt;code&gt;Enter&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Please specify how long the key should be valid.
       &lt;span style=&#34;color:#bb60d5&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key does not expire
    &amp;lt;n&amp;gt;  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key expires in n days
    &amp;lt;n&amp;gt;w &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key expires in n weeks
    &amp;lt;n&amp;gt;m &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key expires in n months
    &amp;lt;n&amp;gt;y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; key expires in n years
Key is valid &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt;? &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify your selection of choices and accept (&lt;code&gt;y&lt;/code&gt; and &lt;code&gt;Enter&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter your user ID information, it is recommended to set the email
address to the same address as the daemon uses for Git operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not enter a passphrase&lt;/strong&gt;, as Flux will be unable to sign with a
passphrase protected private key, instead, keep it in a secure place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can validate the public and private keypair were created with
success by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ gpg --list-secret-keys --keyid-format long &amp;lt;email address&amp;gt;
sec   rsa2048/6A7436E8790F8689 2019-03-28 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SC&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
      700D397C988079BFF0DDAFED6A7436E8790F8689
uid                 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ultimate&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Weaveworks Flux &amp;lt;support@weave.works&amp;gt;
ssb   rsa2048/ECA4FF5BD988B8E9 2019-03-28 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;E&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;importing-a-gpg-signing-key&#34;&gt;Importing a GPG signing key&lt;/h3&gt;
&lt;p&gt;Any file found in the configured &lt;code&gt;--git-gpg-key-import&lt;/code&gt; path(s) will be
imported into GPG; therefore, by volume-mounting a key into that
directory it will be made available for use by Flux.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the key ID (second row of the &lt;code&gt;sec&lt;/code&gt; column):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$  gpg --list-secret-keys --keyid-format long &amp;lt;email address&amp;gt;
sec   rsa2048/6A7436E8790F8689 2019-03-28 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SC&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
      700D397C988079BFF0DDAFED6A7436E8790F8689
uid                 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ultimate&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Weaveworks Flux &amp;lt;support@weave.works&amp;gt;
ssb   rsa2048/ECA4FF5BD988B8E9 2019-03-28 &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;E&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export the public and private keypair from your local GPG keyring
to a Kubernetes secret with &lt;code&gt;--export-secret-keys &amp;lt;key id&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ gpg --export-secret-keys --armor 700D397C988079BFF0DDAFED6A7436E8790F8689 |
  kubectl create secret generic flux-gpg-signing-key --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;flux.asc&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/dev/stdin --dry-run -o yaml
apiVersion: v1
data:
  flux.asc: &amp;lt;base64 string&amp;gt;
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gpg-signing-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapt your Flux deployment to mount the secret and enable the
signing of commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;gpg-signing-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secret&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;secretName&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-gpg-signing-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;defaultMode&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;0400&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;gpg-signing-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/gpg-signing-key/&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;readOnly&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- --git-gpg-key-import=/root/gpg-signing-key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- --git-signing-key=700D397C988079BFF0DDAFED6A7436E8790F8689&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;# key id&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or set the &lt;code&gt;gpgKeys.secretName&lt;/code&gt; in your Helm &lt;code&gt;values.yaml&lt;/code&gt; to
&lt;code&gt;gpg-keys&lt;/code&gt;, and &lt;code&gt;signingKey&lt;/code&gt; to your &lt;code&gt;&amp;lt;key id&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To validate your setup is working, run &lt;code&gt;git log --show-signature&lt;/code&gt; or
&lt;code&gt;git verify-tag &amp;lt;configured label&amp;gt;&lt;/code&gt; to assure Flux signs its git
actions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ git verify-tag &amp;lt;configured label&amp;gt;
gpg: Signature made vr &lt;span style=&#34;color:#40a070&#34;&gt;29&lt;/span&gt; mrt &lt;span style=&#34;color:#40a070&#34;&gt;2019&lt;/span&gt; 15:28:34 CET
gpg:                using RSA key 700D397C988079BFF0DDAFED6A7436E8790F8689
gpg: Good signature from &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Weaveworks Flux &amp;lt;support@weave.works&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ultimate&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Flux &lt;em&gt;does not&lt;/em&gt; recursively scan a given directory but does
understand symbolic links to files.

&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Flux will automatically add any imported key to the GnuPG
trustdb. This is required as git will otherwise not trust signatures
made with the imported keys.

&lt;/div&gt;

&lt;h2 id=&#34;signature-verification&#34;&gt;Signature verification&lt;/h2&gt;
&lt;p&gt;The verification of commit signatures is enabled by importing all
trusted public keys (&lt;code&gt;--git-gpg-key-import=&amp;lt;path&amp;gt;,&amp;lt;path2&amp;gt;&lt;/code&gt;), and by
setting the &lt;code&gt;--gpg-verify-signatures&lt;/code&gt; flag. Once enabled Flux will
verify all commit signatures, and the signature from the sync tag it is
comparing revisions with.&lt;/p&gt;
&lt;p&gt;In case a signature can not be verified, Flux will sync state up to the
last valid revision it can find &lt;em&gt;before&lt;/em&gt; the unverified commit was
made, and lock on this revision.&lt;/p&gt;
&lt;h3 id=&#34;importing-trusted-gpg-keys-and-enabling-verification&#34;&gt;Importing trusted GPG keys and enabling verification&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Collect the public keys from all trusted git authors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;ConfigMap&lt;/code&gt; with all trusted public keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl create configmap flux-gpg-public-keys &lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4070a0;font-weight:bold&#34;&gt;&lt;/span&gt; --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;author.asc --from-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;author2.asc --dry-run -o yaml
 apiVersion: v1
 data:
   author.asc: &amp;lt;base64 string&amp;gt;
   author2.asc: &amp;lt;base64 string&amp;gt;
 kind: ConfigMap
 metadata:
   creationTimestamp: null
   name: flux-gpg-public-keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the config map in your Flux deployment, add the mount path to
&lt;code&gt;--git-gpg-key-import&lt;/code&gt;, and enable the verification of commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;gpg-public-keys&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;configMap&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux-gpg-public-keys&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;defaultMode&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;0400&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;flux&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;gpg-public-keys&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/root/gpg-public-keys&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;           &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;readOnly&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- --git-gpg-key-import=/root/gpg-public-keys&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;         &lt;/span&gt;- --git-verify-signatures&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    Flux &lt;em&gt;does not&lt;/em&gt; recursively scan a given directory but does
understand symbolic links to files.

&lt;/div&gt;

&lt;h3 id=&#34;enabling-verification-for-existing-repositories-disaster-recovery-and-deleted-sync-tags&#34;&gt;Enabling verification for existing repositories, disaster recovery, and deleted sync tags&lt;/h3&gt;
&lt;p&gt;In case you have existing commits in your repository without a
signature you may want to:&lt;/p&gt;
&lt;p&gt;a. First enable signing by setting the &lt;code&gt;--git-gpg-key-import&lt;/code&gt; and
&lt;code&gt;--git-signing-key&lt;/code&gt;, after Flux has synchronized the first commit
with a signature, enable verification.&lt;/p&gt;
&lt;p&gt;b. Sign the sync tag by yourself, with a key that is imported, to point
towards the first commit with a signature (or the current &lt;code&gt;HEAD&lt;/code&gt;).
Flux will then start synchronizing the changes between the sync tag
revision and &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ git tag --force --local-user&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;key id&amp;gt; -a -m &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Sync pointer&amp;#34;&lt;/span&gt; &amp;lt;tag name&amp;gt; &amp;lt;revision&amp;gt;
$ git push --force origin &amp;lt;tag name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;choosing-a---git-verify-signatures-mode&#34;&gt;Choosing a &lt;code&gt;--git-verify-signatures-mode&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;none-default&#34;&gt;&lt;code&gt;&amp;quot;none&amp;quot;&lt;/code&gt; (default)&lt;/h4&gt;
&lt;p&gt;By default, Flux skips GPG verification of all commits.&lt;/p&gt;
&lt;h4 id=&#34;all&#34;&gt;&lt;code&gt;&amp;quot;all&amp;quot;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is the regular verification behavior, consistent with the original
&lt;code&gt;--gitVerifySignatures&lt;/code&gt; flag. It will perform GPG verification on every commit
between the tip of the Flux branch and the Flux sync tag, including all parents.
If your &lt;code&gt;master&lt;/code&gt; branch contains only signed commits (
&lt;a href=&#34;https://help.github.com/en/github/administering-a-repository/about-required-commit-signing&#34; target=&#34;_blank&#34;&gt;a flow which GitHub
supports&lt;/a&gt;), then this flow ought to work.&lt;/p&gt;
&lt;h4 id=&#34;first-parent&#34;&gt;&lt;code&gt;&amp;quot;first-parent&amp;quot;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;However, there are some arguments for more limited signing behaviors, e.g. 
&lt;a href=&#34;https://mikegerwitz.com/2012/05/a-git-horror-story-repository-integrity-with-signed-commits&#34; target=&#34;_blank&#34;&gt;this
parable&lt;/a&gt; and 
&lt;a href=&#34;http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-tp2582986p2583316.html&#34; target=&#34;_blank&#34;&gt;this thread&lt;/a&gt;). In
particular, it can be useful to allow unsigned commits into &lt;code&gt;master&lt;/code&gt;, and to
point Flux at a &lt;code&gt;release&lt;/code&gt; branch containing signed merges from &lt;code&gt;master&lt;/code&gt;. A merge
commit has two parents: the previous commit &amp;ldquo;in the branch,&amp;rdquo; as well as the last
commit in the merged branch. In this scenario, use the &lt;code&gt;&amp;quot;first-parent&amp;quot;&lt;/code&gt; mode &amp;ndash;
only the merge commits &amp;ldquo;in the branch&amp;rdquo; should be GPG-verified, since the commits
from master have no signature.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
